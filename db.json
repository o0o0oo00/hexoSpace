{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/baidu_verify_BPEnYJt5Db.html","path":"baidu_verify_BPEnYJt5Db.html","modified":1,"renderable":1},{"_id":"themes/next/source/googlea592df6c428bfb96.html","path":"googlea592df6c428bfb96.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/Arkipelago-2.otf","path":"fonts/Arkipelago-2.otf","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/dytitle.js","path":"js/src/dytitle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/header.png","path":"images/header.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/back.jpg","path":"images/back.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"971dfe1300c46a30557e4c335dc67d12067c0c5a","modified":1545378515774},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537169346000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537169346000},{"_id":"themes/next/.DS_Store","hash":"72eae91e4bab2bd94c148abd9e81472276e03ec3","modified":1543993431331},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537169346000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1537169346000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1537169346000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1537169346000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1537169346000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537169346000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1537169346000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1537169346000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1537169346000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1537169346000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1537169346000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1537169346000},{"_id":"themes/next/_config.yml","hash":"9250670787d3b68bfe74f7793517d91beff58e6b","modified":1541584680285},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1537169346000},{"_id":"source/_posts/2018-9-21-秋高气爽.md","hash":"0a847f7343bb96a0b1e8c480c5b6d1ca714f8107","modified":1537499387000},{"_id":"source/_posts/AndroidProblem.md","hash":"f247193d8d4d8ed62fef95638e561666cb08c337","modified":1546505325632},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1540195826000},{"_id":"source/_posts/1022.md","hash":"be71fd3376ab129b654af0d14ecffa3402bccaec","modified":1540206602000},{"_id":"source/_posts/Observer.md","hash":"5e4d666718dcc6461ac1cffb8e80247c7e853bd5","modified":1539078110000},{"_id":"source/_posts/Personal-introduction.md","hash":"0a00176d03aaec21a2188096be25aef3804e8468","modified":1538556288000},{"_id":"source/_posts/annotation.md","hash":"6f6d89ff3d4c1e482f9678f80e80c256db30f64c","modified":1539159860000},{"_id":"source/_posts/alert.md","hash":"9b0aeb74d68fccda642b63716c5ca40551a481f6","modified":1545377270227},{"_id":"source/_posts/fancyDialog.md","hash":"4263d8bb81482553e170927e741eb60d0f5668ce","modified":1546941300213},{"_id":"source/_posts/decoration.md","hash":"4ca9b55c1ffa9158bd6572208480b6fe535f424c","modified":1545128163788},{"_id":"source/_posts/blog.md","hash":"43a3ac249f56e89d3caefc474b94d6fffc331b22","modified":1543993660916},{"_id":"source/_posts/fx.md","hash":"aa342beb4f5d8f88a6b3eb175de0d97cc1785230","modified":1539247813000},{"_id":"source/_posts/eventbus.md","hash":"33120e70a8787716ad994dabd137b31aad245483","modified":1540463444871},{"_id":"source/_posts/hello-world.md","hash":"779a0ba54e41d8b86d364d7d61f269b4e67e3402","modified":1540259832000},{"_id":"source/_posts/reflection.md","hash":"26ecea0c2052dc5505251ab8f00a04f08385c07d","modified":1539337883000},{"_id":"source/_posts/rxScheduler.md","hash":"fae9fce7656a67c9989d21af9db692ae8e38d8f6","modified":1540195871000},{"_id":"source/_posts/rx.md","hash":"a1187026ffbc90f3a044e1dc2e9b2546a5cfe146","modified":1539763360000},{"_id":"source/_posts/rxoperator.md","hash":"5bf785345e2f8cd4128a83b123ebc7c94a80998d","modified":1539763577000},{"_id":"source/_posts/天气好好.md","hash":"942c9e1cd131d05909813922a624553ff78dd97a","modified":1538279977000},{"_id":"source/_posts/twitter.md","hash":"743321c83298949f139fc2fea74842684104c1a0","modified":1537499508000},{"_id":"source/_posts/小雨.md","hash":"2299b246175d67b2e718932e9569c30c432a8c6b","modified":1538555759000},{"_id":"source/friends/index.md","hash":"f04fbcbfb1a79b21ab4e51fefbe51dfdb3d34c84","modified":1545378522655},{"_id":"source/_posts/有风冷了.md","hash":"3141c7cbd137f460f4954415141ba9f38f00dd78","modified":1537667425000},{"_id":"source/categories/index.md","hash":"d25b857fa317cb754d315c9ff5cf3dd6254e4bb6","modified":1539064102000},{"_id":"source/about/index.md","hash":"5a411031cf3b14ba17136b0ddf7455bf7d3b2360","modified":1539253237000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537169346000},{"_id":"source/tags/index.md","hash":"ce904626705639f67afe713a71a85a25f65c116a","modified":1537249657000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537169318000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1537169346000},{"_id":"themes/next/.git/index","hash":"9237874ecaf2c92e74219ab3413ebf85e137e73e","modified":1540379688457},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1537169346000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1537169346000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1537169346000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1537169346000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537169346000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1537169346000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1537169346000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1537169346000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1537169346000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1537169346000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1537169346000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1537169346000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1537169346000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1537169346000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1537169346000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1537169346000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1537169346000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1537169346000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1537169346000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1537169346000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1537169346000},{"_id":"themes/next/layout/.DS_Store","hash":"5bde335fe1b545c75f30dcf55f13716b4a0a14aa","modified":1539250423000},{"_id":"themes/next/layout/_layout.swig","hash":"8fcb6f74d0eba092ed7e0d1438f217edc6b9c2d4","modified":1539916324000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1537169346000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1537169346000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1537169346000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1537169346000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1537169346000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1537169346000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1537169346000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1537169346000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537169346000},{"_id":"themes/next/scripts/.DS_Store","hash":"7036e84064fa768a1e7ae25f4b4406908ccbed2f","modified":1539250423000},{"_id":"themes/next/source/baidu_verify_BPEnYJt5Db.html","hash":"d87219af5f947df85b6b707815139a9228b399d6","modified":1537259961000},{"_id":"themes/next/source/.DS_Store","hash":"3e7bd9946cbba24fb895cbcef2cea14444bbc4ec","modified":1543993431324},{"_id":"themes/next/source/googlea592df6c428bfb96.html","hash":"dd195cac7528ce3d3ecd42bcf04d04a7d3eae519","modified":1537260484000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537169346000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537169346000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537169346000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537169318000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537169318000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537169318000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537169318000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537169318000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537169318000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537169318000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1537169318000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1537169318000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537169318000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537169318000},{"_id":"themes/next/.git/logs/HEAD","hash":"cc2b051a4ef74218fb152d339d844ae9f44a4559","modified":1537169346000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537169346000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537169346000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"f2ea785946139f117937d81cd51e103529c92f3e","modified":1537662934000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537169346000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1537169346000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1537169346000},{"_id":"themes/next/layout/_macro/post.swig","hash":"0200f01fa188ffe6c90015f978ec13a5c2db4de0","modified":1537323999000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0e91a89a54b53bf49d16c82567bebd0ecd2cac89","modified":1538997805000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f3093a74dcd9be37b83c3048a5f2ed2cc468c017","modified":1539152670000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1537169346000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1537169346000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1537169346000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"654160bea34f6ffb14d0b7c54475c66a47076d49","modified":1539250423000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1537169346000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1537169346000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1537169346000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1537169346000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1537169346000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1537169346000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1537169346000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"5f60239de8af4418bece2671612116ed5d4b20c1","modified":1539250423000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1537169346000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1537169346000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1537169346000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1537169346000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537169346000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1537169346000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537169346000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1537169346000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1537169346000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1537169346000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1537169346000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1537169346000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1537169346000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1537169346000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1537169346000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1537169346000},{"_id":"themes/next/source/css/.DS_Store","hash":"bd227095710b2cd718f093fd570b9929d9a2c7b3","modified":1539253403000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1537169346000},{"_id":"themes/next/source/fonts/Arkipelago-2.otf","hash":"13a9390452b6f6a1f1b7e20baafe1430d4a199df","modified":1537408214000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537169346000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1541584621908},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537169346000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537169346000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537169346000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537169346000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537169346000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537169346000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537169346000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537169346000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537169346000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537169346000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537169346000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537169346000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537169346000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537169346000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537169346000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537169346000},{"_id":"themes/next/source/js/.DS_Store","hash":"0ec567dd09592fa319abfcbfc0aea7ca570f58f3","modified":1539250423000},{"_id":"themes/next/source/lib/.DS_Store","hash":"80f54c549b3a558b3c1f0782f504306f7d1215c8","modified":1539250423000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537169346000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1537169346000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537169346000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537169346000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537169346000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537169346000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537169346000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537169346000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537169346000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537169346000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537169346000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1537169346000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537169346000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537169346000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"a2dc4b43b26e0308427e02fbd7b4108f687d169f","modified":1538998259000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"08338cba394ebef11bd9473675237fbb8ba06f04","modified":1538997269000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1537169346000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1537169346000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1537169346000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537169346000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537169346000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537169346000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"6d3f9349fe27e6137551dd9131ddfac24e8b9afa","modified":1539250423000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"6f1411ccea39b2be18a20d123abbc9f5db09597a","modified":1540259739000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537169346000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1537169346000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"89427537f12428adfb9b350454d7c845258ddb6b","modified":1539250423000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1537169346000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1537169346000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1537169346000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537169346000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1537169346000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1537169346000},{"_id":"themes/next/source/js/src/dytitle.js","hash":"fa6c8817a69f5cccc27a930f7320076463187e91","modified":1537429303000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"0dc78cc8af436b39ab5d4f5c398b79929e23ea2b","modified":1539250423000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1537169346000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1537169346000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1537169346000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1537169346000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1537169346000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537169346000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1537169346000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1537169346000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1537169346000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537169346000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537169346000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537169346000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1537169346000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1537169346000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1537169346000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1537169346000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537169346000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1537169346000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1537169346000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1537169346000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537169346000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537169346000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537169346000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"cc2b051a4ef74218fb152d339d844ae9f44a4559","modified":1537169346000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1537169346000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537169346000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1537169346000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1ce3314861f524393d547ff8364b0b5a23cc6cc4","modified":1539139578000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1539138964000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1539139126000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1537169346000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1537169346000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537169346000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537169346000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537169346000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cc2b051a4ef74218fb152d339d844ae9f44a4559","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1537169346000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537169346000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1537169346000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537169346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537169346000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537169346000},{"_id":"themes/next/.git/objects/pack/pack-587e986c8f244f3cb34d396fe78c5f767ed94ed3.idx","hash":"f24d4f8f3bc3acc790cb9a839b58700d191024df","modified":1537169346000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1537169346000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1537169346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1537169346000},{"_id":"themes/next/source/images/header.png","hash":"edec311371f9b81402a2f397a089b13459323488","modified":1541584604695},{"_id":"themes/next/source/images/back.jpg","hash":"fbbc3af7fc034093d5ad67e6820fd6be50158a95","modified":1540259387000},{"_id":"themes/next/.git/objects/pack/pack-587e986c8f244f3cb34d396fe78c5f767ed94ed3.pack","hash":"e05285b4d18a81a2800eebce3609687c13452e6b","modified":1537169346000},{"_id":"public/baidu_urls.txt","hash":"a4738dc7c29241a7ad17103e6677af1dfb339c67","modified":1546941379594},{"_id":"public/baidusitemap.xml","hash":"575e6f3c776ce5132dc327ab0ee6bec90c338353","modified":1546941379594},{"_id":"public/sitemap.xml","hash":"c7bfd9e5fb3ca8bca8f92111b2ee2d65a5d13430","modified":1546941379606},{"_id":"public/categories/index.html","hash":"206050a31f5e9f7de4e07f99d3627a33ca531c1d","modified":1546941379615},{"_id":"public/about/index.html","hash":"99172530828a2a8342a619ec50b75c5613435a72","modified":1546941379615},{"_id":"public/tags/index.html","hash":"58d95e035bbfcca633b8dcfc3e6bab9ed181073a","modified":1546941379615},{"_id":"public/archives/page/3/index.html","hash":"7f7f190f763a8cdba6d6f63e588718f881448c73","modified":1546941379615},{"_id":"public/archives/2018/12/index.html","hash":"89616007a0d668df7391a1cd8a013ade3a9496df","modified":1546941379615},{"_id":"public/archives/2019/index.html","hash":"a16259a0bdf2921508b64f824382d7ce4b26dd2d","modified":1546941379615},{"_id":"public/archives/2019/01/index.html","hash":"0b4c7e28b67ea4f9da94d13b57d1f7a7b28d73fd","modified":1546941379615},{"_id":"public/categories/hexo/index.html","hash":"9c6b87b0c881b5c4e22fc34939f67ac676d48321","modified":1546941379615},{"_id":"public/tags/技术/index.html","hash":"a489c1f8254cd859f9ec1f271b1e5360f7ccf130","modified":1546941379615},{"_id":"public/tags/technology/index.html","hash":"c19a66f6ab82d2ff7b6c78cffd7bb7c1be6f0374","modified":1546941379615},{"_id":"public/friends/index.html","hash":"6c93a352f4aa605f9acb0ebd7e7508a4c1405a0d","modified":1546941379615},{"_id":"public/2019/01/08/fancyDialog/index.html","hash":"4ba4776b4f8d87e91287b7466fe654fd7654266e","modified":1546941379615},{"_id":"public/2019/01/03/AndroidProblem/index.html","hash":"f6e9326d5d45d6526b6e76161a659e2f52179ea6","modified":1546941379615},{"_id":"public/2018/12/21/alert/index.html","hash":"e95d0f0af734fe9b3619f708e54d775e3ede462a","modified":1546941379615},{"_id":"public/2018/12/18/decoration/index.html","hash":"1f7fed3c20302597ad900a1a1b3daad0d3aafac3","modified":1546941379616},{"_id":"public/2018/10/25/eventbus/index.html","hash":"801c049a58b82e230262d39c341787ec3ad081b8","modified":1546941379616},{"_id":"public/2018/10/22/1022/index.html","hash":"6dcabce9d657dc379693dfc6f58fa8f828779b94","modified":1546941379616},{"_id":"public/2018/10/22/rxScheduler/index.html","hash":"73f79245fdb21e22c4101800e8d170b0c9ad27e9","modified":1546941379616},{"_id":"public/2018/10/16/rxoperator/index.html","hash":"b9b2ce3db5fea7b2a7d2dd42a4525fe93ce21e39","modified":1546941379616},{"_id":"public/2018/10/15/rx/index.html","hash":"0e72d1ad6a223ea6a4a407ecaf6baf1c9a4d092b","modified":1546941379616},{"_id":"public/2018/10/12/reflection/index.html","hash":"83780a9921be48f64074e47541c1f3a00cf67c12","modified":1546941379616},{"_id":"public/2018/10/11/fx/index.html","hash":"a4fc79417464eed111e95d8f8d6c01c674d43dfc","modified":1546941379616},{"_id":"public/2018/10/10/annotation/index.html","hash":"0eee24f535d223f2f977f429a952396806f22da2","modified":1546941379616},{"_id":"public/2018/10/09/Observer/index.html","hash":"9efd8038173080c2dffa1a37e97324ad2f573490","modified":1546941379616},{"_id":"public/2018/10/03/Personal-introduction/index.html","hash":"ff3fc9bc4e4feeb03c00430d70eeb72f34fe5bd9","modified":1546941379616},{"_id":"public/2018/09/27/小雨/index.html","hash":"d336d7633eb70c69d172857ea2a7b8fc4de46336","modified":1546941379616},{"_id":"public/2018/09/25/天气好好/index.html","hash":"012a078ffb6add7dc428a10ceb01a889b161bda4","modified":1546941379616},{"_id":"public/2018/09/23/有风冷了/index.html","hash":"8e6c1ea3d3dd93a7aff4393685df248011517341","modified":1546941379616},{"_id":"public/2018/09/21/2018-9-21-秋高气爽/index.html","hash":"ef9c8a5da206163bb4c0d6faf2615f0354aa4618","modified":1546941379616},{"_id":"public/2018/09/18/twitter/index.html","hash":"16ccd04fb2e21cbbec4e8499cd9f4deae1d7274e","modified":1546941379616},{"_id":"public/2018/09/17/blog/index.html","hash":"2b014644cd93d908ed1ce7817a5b1d9d6085be72","modified":1546941379616},{"_id":"public/2018/09/17/hello-world/index.html","hash":"a6cdb6a135847e549f252992ad25710d165ae22a","modified":1546941379616},{"_id":"public/archives/index.html","hash":"6db910ad7c00d6bbd56bb15b155c5c07f3efb467","modified":1546941379616},{"_id":"public/archives/page/2/index.html","hash":"6ff035ce71a274090b21f975fc495f87a2f3d118","modified":1546941379617},{"_id":"public/archives/2018/index.html","hash":"85bdf913e8f39b651675d84c6b255285dbd8a1f1","modified":1546941379617},{"_id":"public/archives/2018/page/2/index.html","hash":"d2dddca097c4bf29f6002af404737dc1b728833e","modified":1546941379617},{"_id":"public/archives/2018/09/index.html","hash":"12ef43a49d6f3af9c30f69a1e22327e5c3e9fdd9","modified":1546941379617},{"_id":"public/archives/2018/10/index.html","hash":"6cccf4186b3ed0b1f6264bb982b7f8505d895d70","modified":1546941379617},{"_id":"public/categories/Diary/index.html","hash":"e9fe086b90969eca9fc7a937f4977070b4219ab1","modified":1546941379617},{"_id":"public/categories/技术/index.html","hash":"8bb11f66542e17df8b49be91f2129969d78e2817","modified":1546941379617},{"_id":"public/categories/技术/page/2/index.html","hash":"a24f6c18d0c7ced07d70bb1e39ab6dfbbd65e59d","modified":1546941379617},{"_id":"public/index.html","hash":"f1f75fe2cfa5a710a3eebed20dd772d663810ae8","modified":1546941379617},{"_id":"public/page/2/index.html","hash":"d1dec987a814f8dc913a7b70b84f771e7547dfa9","modified":1546941379617},{"_id":"public/page/3/index.html","hash":"cb71e7e00fe930fdb7b718053db03db784f42468","modified":1546941379617},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1546941379626},{"_id":"public/fonts/Arkipelago-2.otf","hash":"13a9390452b6f6a1f1b7e20baafe1430d4a199df","modified":1546941379626},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1546941379626},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546941379626},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1546941379626},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1546941379626},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1546941379626},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1546941379626},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1546941379626},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1546941379626},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1546941379626},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546941379626},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1546941379627},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1546941379627},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546941379627},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1546941379627},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1546941379627},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546941379627},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1546941379627},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1546941379627},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546941379627},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546941379627},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546941379627},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546941379627},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546941379627},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546941379627},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1546941379627},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546941379627},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546941379627},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546941379627},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1546941379627},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546941379627},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546941379627},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1546941379628},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1546941379628},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1546941379628},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1546941379628},{"_id":"public/live2dw/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1546941379628},{"_id":"public/live2dw/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1546941379628},{"_id":"public/live2dw/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1546941379628},{"_id":"public/live2dw/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1546941379628},{"_id":"public/live2dw/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1546941379629},{"_id":"public/live2dw/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1546941379629},{"_id":"public/live2dw/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1546941379629},{"_id":"public/live2dw/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1546941379629},{"_id":"public/live2dw/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1546941379629},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1546941379629},{"_id":"public/live2dw/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1546941379629},{"_id":"public/live2dw/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1546941379629},{"_id":"public/lib/blog-encrypt.js","hash":"3956fb924b60656e47124509a007474919b7920d","modified":1546941379629},{"_id":"public/css/blog-encrypt.css","hash":"262922c3f49cb8cca7b3ea982c49b57de2af53d6","modified":1546941379629},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546941380150},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546941380152},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1546941380163},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1546941380163},{"_id":"public/js/src/dytitle.js","hash":"fa6c8817a69f5cccc27a930f7320076463187e91","modified":1546941380164},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1546941380164},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1546941380164},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1546941380164},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1546941380164},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1546941380164},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1546941380164},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1546941380164},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1546941380164},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546941380164},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1546941380164},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546941380164},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1546941380165},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1546941380165},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1546941380165},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546941380165},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546941380165},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1546941380165},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1546941380165},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1546941380165},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546941380165},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1546941380166},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1546941380166},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1546941380166},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1546941380166},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1546941380166},{"_id":"public/baidu_verify_BPEnYJt5Db.html","hash":"d87219af5f947df85b6b707815139a9228b399d6","modified":1546941380166},{"_id":"public/googlea592df6c428bfb96.html","hash":"dd195cac7528ce3d3ecd42bcf04d04a7d3eae519","modified":1546941380166},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1546941380166},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1546941380166},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1546941380166},{"_id":"public/css/main.css","hash":"1448fad9381f558a1f1edf46d6e2598b58c2bc18","modified":1546941380166},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546941380166},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546941380166},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546941380167},{"_id":"public/live2dw/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1546941380167},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1546941380167},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1546941380167},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1546941380173},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1546941380173},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1546941380173},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546941380173},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1546941380173},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1546941380174},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1546941380174},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1546941380174},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1546941380179},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1546941380179},{"_id":"public/live2dw/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1546941380179},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1546941380190},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1546941380190},{"_id":"public/lib/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1546941380192},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1546941380203},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1546941380203},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1546941380205},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1546941380205},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1546941380205},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1546941380205},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1546941380205},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1546941380214},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1546941380214},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1546941380215},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1546941380226},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1546941380226},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1546941380239},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1546941380252},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1546941380253},{"_id":"public/images/header.png","hash":"edec311371f9b81402a2f397a089b13459323488","modified":1546941380257},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1546941380260},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1546941380273},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1546941380278},{"_id":"public/images/back.jpg","hash":"fbbc3af7fc034093d5ad67e6820fd6be50158a95","modified":1546941380281}],"Category":[{"name":"Diary","_id":"cjqnkydmu0004or26ziwxmm2v"},{"name":"技术","_id":"cjqnkydn00009or26bfw6feio"},{"name":"hexo","_id":"cjqnkydnf000ror26vccgu5zn"}],"Data":[],"Page":[{"title":"好基友s","date":"2018-10-10T11:01:42.000Z","_content":"\n<hr>\n\n\n\n* [Healejean的梦想博客](http://blog.healerjean.com/)\n\n### 欢迎互换友链，敬请留言，!~\n\n#### ~✽-(ˆ▽ˆ)/✽✽\\(ˆ▽ˆ)-✽ \n","source":"friends/index.md","raw":"---\ntitle:  好基友s\ndate: 2018-10-10 19:01:42\n\n---\n\n<hr>\n\n\n\n* [Healejean的梦想博客](http://blog.healerjean.com/)\n\n### 欢迎互换友链，敬请留言，!~\n\n#### ~✽-(ˆ▽ˆ)/✽✽\\(ˆ▽ˆ)-✽ \n","updated":"2018-12-21T07:48:42.655Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cjqnkydmq0001or26a6c4lb93","content":"<hr>\n\n\n\n<ul>\n<li><a href=\"http://blog.healerjean.com/\" target=\"_blank\" rel=\"noopener\">Healejean的梦想博客</a></li>\n</ul>\n<h3 id=\"欢迎互换友链，敬请留言，\"><a href=\"#欢迎互换友链，敬请留言，\" class=\"headerlink\" title=\"欢迎互换友链，敬请留言，!~\"></a>欢迎互换友链，敬请留言，!~</h3><h4 id=\"✽-ˆ▽ˆ-✽✽-ˆ▽ˆ-✽\"><a href=\"#✽-ˆ▽ˆ-✽✽-ˆ▽ˆ-✽\" class=\"headerlink\" title=\"~✽-(ˆ▽ˆ)/✽✽(ˆ▽ˆ)-✽\"></a>~✽-(ˆ▽ˆ)/✽✽(ˆ▽ˆ)-✽</h4>","site":{"data":{}},"excerpt":"","more":"<hr>\n\n\n\n<ul>\n<li><a href=\"http://blog.healerjean.com/\" target=\"_blank\" rel=\"noopener\">Healejean的梦想博客</a></li>\n</ul>\n<h3 id=\"欢迎互换友链，敬请留言，\"><a href=\"#欢迎互换友链，敬请留言，\" class=\"headerlink\" title=\"欢迎互换友链，敬请留言，!~\"></a>欢迎互换友链，敬请留言，!~</h3><h4 id=\"✽-ˆ▽ˆ-✽✽-ˆ▽ˆ-✽\"><a href=\"#✽-ˆ▽ˆ-✽✽-ˆ▽ˆ-✽\" class=\"headerlink\" title=\"~✽-(ˆ▽ˆ)/✽✽(ˆ▽ˆ)-✽\"></a>~✽-(ˆ▽ˆ)/✽✽(ˆ▽ˆ)-✽</h4>"},{"title":"categories","date":"2018-09-18T05:30:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-18 13:30:48\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-10-09T05:48:22.000Z","path":"categories/index.html","layout":"page","_id":"cjqnkydmt0003or26spwbuhg6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言板","date":"2018-09-18T05:22:13.000Z","type":"about","comment":true,"_content":"","source":"about/index.md","raw":"---\ntitle: 留言板\ndate: 2018-09-18 13:22:13\ntype: \"about\"\ncomment: true\n---\n","updated":"2018-10-11T10:20:37.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjqnkydsh001aor261vi8qcwe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-17T08:17:08.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-17 16:17:08\ntype: \"tags\"\n---\n\n","updated":"2018-09-18T05:47:37.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjqnkydsi001cor26jshra1k2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018.9.21 秋高气爽","date":"2018-09-21T02:53:02.000Z","_content":"<blockquote class=\"blockquote-center\">\n#### 你给别人的是善意，照亮的确实你自己\n</blockquote>\n","source":"_posts/2018-9-21-秋高气爽.md","raw":"---\ntitle: 2018.9.21 秋高气爽\ndate: 2018-09-21 10:53:02\ncategories: Diary\n---\n<blockquote class=\"blockquote-center\">\n#### 你给别人的是善意，照亮的确实你自己\n</blockquote>\n","slug":"2018-9-21-秋高气爽","published":1,"updated":"2018-09-21T03:09:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydml0000or267t9ji8z9","content":"<blockquote class=\"blockquote-center\"><br>#### 你给别人的是善意，照亮的确实你自己<br></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><br>#### 你给别人的是善意，照亮的确实你自己<br></blockquote>\n"},{"title":"Android疑难问题总结","date":"2019-01-03T08:46:29.000Z","_content":"\n### Android疑难问题总结\n***\n\n使用WindowManager的时候 我们在`removeView(view)`的时候 会事先判断`view.isAttachedToWindow`  而我遇到的问题是，我再`removeView(view)`之后再去判断`view.isAttachedToWindow` 其值仍然为**true** ,这就令我很是费解。  \n##### 解决方法：\n`windowManager.removeViewImmediate(view)`之后我们再去判断`view.isAttachedToWindow` 其值就变成了**false**\n\n***\n\n持续更新...\n<!--more-->","source":"_posts/AndroidProblem.md","raw":"---\ntitle: Android疑难问题总结\ndate: 2019-01-03 16:46:29\ntags: 技术\ncategories : 技术\n---\n\n### Android疑难问题总结\n***\n\n使用WindowManager的时候 我们在`removeView(view)`的时候 会事先判断`view.isAttachedToWindow`  而我遇到的问题是，我再`removeView(view)`之后再去判断`view.isAttachedToWindow` 其值仍然为**true** ,这就令我很是费解。  \n##### 解决方法：\n`windowManager.removeViewImmediate(view)`之后我们再去判断`view.isAttachedToWindow` 其值就变成了**false**\n\n***\n\n持续更新...\n<!--more-->","slug":"AndroidProblem","published":1,"updated":"2019-01-03T08:48:45.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydmr0002or26s3dwtw3y","content":"<h3 id=\"Android疑难问题总结\"><a href=\"#Android疑难问题总结\" class=\"headerlink\" title=\"Android疑难问题总结\"></a>Android疑难问题总结</h3><hr>\n<p>使用WindowManager的时候 我们在<code>removeView(view)</code>的时候 会事先判断<code>view.isAttachedToWindow</code>  而我遇到的问题是，我再<code>removeView(view)</code>之后再去判断<code>view.isAttachedToWindow</code> 其值仍然为<strong>true</strong> ,这就令我很是费解。  </p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p><code>windowManager.removeViewImmediate(view)</code>之后我们再去判断<code>view.isAttachedToWindow</code> 其值就变成了<strong>false</strong></p>\n<hr>\n<p>持续更新…<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Android疑难问题总结\"><a href=\"#Android疑难问题总结\" class=\"headerlink\" title=\"Android疑难问题总结\"></a>Android疑难问题总结</h3><hr>\n<p>使用WindowManager的时候 我们在<code>removeView(view)</code>的时候 会事先判断<code>view.isAttachedToWindow</code>  而我遇到的问题是，我再<code>removeView(view)</code>之后再去判断<code>view.isAttachedToWindow</code> 其值仍然为<strong>true</strong> ,这就令我很是费解。  </p>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><p><code>windowManager.removeViewImmediate(view)</code>之后我们再去判断<code>view.isAttachedToWindow</code> 其值就变成了<strong>false</strong></p>\n<hr>\n<p>持续更新…<br>","more":"</p>"},{"title":"2018-10-22 随笔","date":"2018-10-22T11:07:17.000Z","_content":"\n\n人与人的差距归根结底是阶级的差距，昨天舍友对我说了一句话“我们现在干的工作与在社会上乞讨的人有什么不同啊”。这句话虽然有点偏激了，但是不得不能说明一个问题，我们俩这样工作是整个社会最基层的工作，甚至可以衍生出给人打工的这一件事情上，终归是整个公司的最底层，也许有人可以做到小主管，小总监的位置，但是本质上还是为老板打工，只不过是相较于其手下的员工稍微搞一个小层级，但是任然摆脱不了处于社会金字塔的最底层。这样我就想问了，到底怎么样才能让自己的阶级上去一层呢？我们处于社会的最底层，和古代的奴隶制也没有什么分别，可能只不过是，现在的奴隶或者说员工可以选择自己“服侍”的地主而已。我们都知道北京人有钱，这一点不可否认，但是房子这东西是祖上留下来的，大清时候天子脚下，阶级当然不同于偏远的穷乡僻壤。就靠祖上留下的房子、地产就可以在这个社会上吃喝无忧，处于金字塔的中层，虽然同在一个星球上，但是不得不说中层和底层完全就是两个世界。\n","source":"_posts/1022.md","raw":"---\ntitle: 2018-10-22 随笔\ndate: 2018-10-22 19:07:17\ncategories: Diary\n---\n\n\n人与人的差距归根结底是阶级的差距，昨天舍友对我说了一句话“我们现在干的工作与在社会上乞讨的人有什么不同啊”。这句话虽然有点偏激了，但是不得不能说明一个问题，我们俩这样工作是整个社会最基层的工作，甚至可以衍生出给人打工的这一件事情上，终归是整个公司的最底层，也许有人可以做到小主管，小总监的位置，但是本质上还是为老板打工，只不过是相较于其手下的员工稍微搞一个小层级，但是任然摆脱不了处于社会金字塔的最底层。这样我就想问了，到底怎么样才能让自己的阶级上去一层呢？我们处于社会的最底层，和古代的奴隶制也没有什么分别，可能只不过是，现在的奴隶或者说员工可以选择自己“服侍”的地主而已。我们都知道北京人有钱，这一点不可否认，但是房子这东西是祖上留下来的，大清时候天子脚下，阶级当然不同于偏远的穷乡僻壤。就靠祖上留下的房子、地产就可以在这个社会上吃喝无忧，处于金字塔的中层，虽然同在一个星球上，但是不得不说中层和底层完全就是两个世界。\n","slug":"1022","published":1,"updated":"2018-10-22T11:10:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydmw0005or26wt6jeds9","content":"<p>人与人的差距归根结底是阶级的差距，昨天舍友对我说了一句话“我们现在干的工作与在社会上乞讨的人有什么不同啊”。这句话虽然有点偏激了，但是不得不能说明一个问题，我们俩这样工作是整个社会最基层的工作，甚至可以衍生出给人打工的这一件事情上，终归是整个公司的最底层，也许有人可以做到小主管，小总监的位置，但是本质上还是为老板打工，只不过是相较于其手下的员工稍微搞一个小层级，但是任然摆脱不了处于社会金字塔的最底层。这样我就想问了，到底怎么样才能让自己的阶级上去一层呢？我们处于社会的最底层，和古代的奴隶制也没有什么分别，可能只不过是，现在的奴隶或者说员工可以选择自己“服侍”的地主而已。我们都知道北京人有钱，这一点不可否认，但是房子这东西是祖上留下来的，大清时候天子脚下，阶级当然不同于偏远的穷乡僻壤。就靠祖上留下的房子、地产就可以在这个社会上吃喝无忧，处于金字塔的中层，虽然同在一个星球上，但是不得不说中层和底层完全就是两个世界。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>人与人的差距归根结底是阶级的差距，昨天舍友对我说了一句话“我们现在干的工作与在社会上乞讨的人有什么不同啊”。这句话虽然有点偏激了，但是不得不能说明一个问题，我们俩这样工作是整个社会最基层的工作，甚至可以衍生出给人打工的这一件事情上，终归是整个公司的最底层，也许有人可以做到小主管，小总监的位置，但是本质上还是为老板打工，只不过是相较于其手下的员工稍微搞一个小层级，但是任然摆脱不了处于社会金字塔的最底层。这样我就想问了，到底怎么样才能让自己的阶级上去一层呢？我们处于社会的最底层，和古代的奴隶制也没有什么分别，可能只不过是，现在的奴隶或者说员工可以选择自己“服侍”的地主而已。我们都知道北京人有钱，这一点不可否认，但是房子这东西是祖上留下来的，大清时候天子脚下，阶级当然不同于偏远的穷乡僻壤。就靠祖上留下的房子、地产就可以在这个社会上吃喝无忧，处于金字塔的中层，虽然同在一个星球上，但是不得不说中层和底层完全就是两个世界。</p>\n"},{"title":"观察者模式简述","date":"2018-10-09T09:33:19.000Z","_content":"### 观察者模式简述\n点击查看理论知识…（⊙＿⊙；）…\n<details>\n观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。\n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n**观察者模式所涉及的角色有**  \n**抽象主题角色：**抽象主题角色吧所有对观察者对象的引用保存在一个聚集里面。每个主题都可以有任何数量的观察者。抽象主题提供一个借口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者（Observable）角色。  \n**具体主题角色**：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。  \n**抽象观察者：**为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。  \n**具体观察者：**存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。  \n</details>\n<!--more-->\n#### 简易的例子\n上面的全都是理论，读起来绕嘴都 。。。\n\n1. 创建观察者\n2. 创建被观察者\n3. 被观察者的状态改变，进而通知观察者改变状态。所以，被观察者里面有一个装有所有观察者的集合，被观察者状态改变的时候，遍历被观察者所拥有的这个集合，通知（调用）观察者中的更新状态方法。\n\n```\n/**\n* @author:       zhaochunyu\n* @description:  被观察者的抽象\n* @date:         2018/10/9\n*/\nabstract class Subject {\nprivate val list = mutableListOf<MyObserver>()\n\n\nfun attach(observer: MyObserver) {\nlist.add(observer)\nprintln(\"Attached an observer\")\n}\n\nfun detach(observer: MyObserver) {\nlist.remove(observer)\nprintln(\"detach an observer\")\n}\n\nfun notifyObservers(newState: String) {\nlist.forEach {\nit.update(newState)\n}\n}\n\n}\n```\n```\n/**\n* @author:       zhaochunyu\n* @description:  实际被观察者\n* @date:         2018/10/9\n*/\nclass ActualSubject : Subject() {\n\nfun change(newString: String) {\nprintln(\"被观察者的状态改变为：\" + newString)\nnotifyObservers(newString)\n}\n}\n```\n\n```\n/**\n* @author:       zhaochunyu\n* @description:  观察者的抽象\n* @date:         2018/10/9\n*/\ninterface MyObserver {\n\nfun update(newState: String)\n\n}\n```\n```\n/**\n* @author:       zhaochunyu\n* @description:  观察者\n* @date:         2018/10/9\n*/\nclass ActualObserver : MyObserver {\n\noverride fun update(newState: String) {\nprintln(\"观察者状态改变为：\"+ newState)\n}\n}\n```\n我们得到在创建了实际观察者与实际被观察者对象之后，进行Attach(也就是将观察者注册到被观察者的集合中)，然后改变被观察者状态。验证观察者更新状态。\n\n```\nclass MainActivity : AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n\nval actualSubject = ActualSubject()\nval actualObserver = ActualObserver()\n// 注册\nactualSubject.attach(actualObserver)\n\nactualSubject.change(\"new state\")\n\n}\n}\n```\n#### 推模型VS拉模型\n<details>\n在观察者模式中，又分为推模型和拉模型两种方式。  \n**推模型**  \n主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。  \n**拉模型**  \n主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。  \n**两种模式的比较**  \n　　■　　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。\n　　■　　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。\n</details>\n实际就是传一个具体的类型，例如String,还是传入一个被观察者对象的区别。方便使用吧o((⊙﹏⊙))o.\n","source":"_posts/Observer.md","raw":"---\ntitle: 观察者模式简述\ndate: 2018-10-09 17:33:19\ncategories: 技术\n---\n### 观察者模式简述\n点击查看理论知识…（⊙＿⊙；）…\n<details>\n观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。\n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n**观察者模式所涉及的角色有**  \n**抽象主题角色：**抽象主题角色吧所有对观察者对象的引用保存在一个聚集里面。每个主题都可以有任何数量的观察者。抽象主题提供一个借口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者（Observable）角色。  \n**具体主题角色**：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。  \n**抽象观察者：**为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。  \n**具体观察者：**存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。  \n</details>\n<!--more-->\n#### 简易的例子\n上面的全都是理论，读起来绕嘴都 。。。\n\n1. 创建观察者\n2. 创建被观察者\n3. 被观察者的状态改变，进而通知观察者改变状态。所以，被观察者里面有一个装有所有观察者的集合，被观察者状态改变的时候，遍历被观察者所拥有的这个集合，通知（调用）观察者中的更新状态方法。\n\n```\n/**\n* @author:       zhaochunyu\n* @description:  被观察者的抽象\n* @date:         2018/10/9\n*/\nabstract class Subject {\nprivate val list = mutableListOf<MyObserver>()\n\n\nfun attach(observer: MyObserver) {\nlist.add(observer)\nprintln(\"Attached an observer\")\n}\n\nfun detach(observer: MyObserver) {\nlist.remove(observer)\nprintln(\"detach an observer\")\n}\n\nfun notifyObservers(newState: String) {\nlist.forEach {\nit.update(newState)\n}\n}\n\n}\n```\n```\n/**\n* @author:       zhaochunyu\n* @description:  实际被观察者\n* @date:         2018/10/9\n*/\nclass ActualSubject : Subject() {\n\nfun change(newString: String) {\nprintln(\"被观察者的状态改变为：\" + newString)\nnotifyObservers(newString)\n}\n}\n```\n\n```\n/**\n* @author:       zhaochunyu\n* @description:  观察者的抽象\n* @date:         2018/10/9\n*/\ninterface MyObserver {\n\nfun update(newState: String)\n\n}\n```\n```\n/**\n* @author:       zhaochunyu\n* @description:  观察者\n* @date:         2018/10/9\n*/\nclass ActualObserver : MyObserver {\n\noverride fun update(newState: String) {\nprintln(\"观察者状态改变为：\"+ newState)\n}\n}\n```\n我们得到在创建了实际观察者与实际被观察者对象之后，进行Attach(也就是将观察者注册到被观察者的集合中)，然后改变被观察者状态。验证观察者更新状态。\n\n```\nclass MainActivity : AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\nsetContentView(R.layout.activity_main)\n\nval actualSubject = ActualSubject()\nval actualObserver = ActualObserver()\n// 注册\nactualSubject.attach(actualObserver)\n\nactualSubject.change(\"new state\")\n\n}\n}\n```\n#### 推模型VS拉模型\n<details>\n在观察者模式中，又分为推模型和拉模型两种方式。  \n**推模型**  \n主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。  \n**拉模型**  \n主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。  \n**两种模式的比较**  \n　　■　　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。\n　　■　　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。\n</details>\n实际就是传一个具体的类型，例如String,还是传入一个被观察者对象的区别。方便使用吧o((⊙﹏⊙))o.\n","slug":"Observer","published":1,"updated":"2018-10-09T09:41:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydmy0007or26280ln0f6","content":"<h3 id=\"观察者模式简述\"><a href=\"#观察者模式简述\" class=\"headerlink\" title=\"观察者模式简述\"></a>观察者模式简述</h3><p>点击查看理论知识…（⊙＿⊙；）…</p>\n<p><details><br>观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。<br><strong>观察者模式所涉及的角色有</strong><br><strong>抽象主题角色：</strong>抽象主题角色吧所有对观察者对象的引用保存在一个聚集里面。每个主题都可以有任何数量的观察者。抽象主题提供一个借口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者（Observable）角色。<br><strong>具体主题角色</strong>：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。<br><strong>抽象观察者：</strong>为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。<br><strong>具体观察者：</strong>存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。<br></details><br><a id=\"more\"></a></p>\n<h4 id=\"简易的例子\"><a href=\"#简易的例子\" class=\"headerlink\" title=\"简易的例子\"></a>简易的例子</h4><p>上面的全都是理论，读起来绕嘴都 。。。</p>\n<ol>\n<li>创建观察者</li>\n<li>创建被观察者</li>\n<li>被观察者的状态改变，进而通知观察者改变状态。所以，被观察者里面有一个装有所有观察者的集合，被观察者状态改变的时候，遍历被观察者所拥有的这个集合，通知（调用）观察者中的更新状态方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  被观察者的抽象</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">abstract class Subject &#123;</span><br><span class=\"line\">private val list = mutableListOf&lt;MyObserver&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun attach(observer: MyObserver) &#123;</span><br><span class=\"line\">list.add(observer)</span><br><span class=\"line\">println(&quot;Attached an observer&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun detach(observer: MyObserver) &#123;</span><br><span class=\"line\">list.remove(observer)</span><br><span class=\"line\">println(&quot;detach an observer&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun notifyObservers(newState: String) &#123;</span><br><span class=\"line\">list.forEach &#123;</span><br><span class=\"line\">it.update(newState)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  实际被观察者</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">class ActualSubject : Subject() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fun change(newString: String) &#123;</span><br><span class=\"line\">println(&quot;被观察者的状态改变为：&quot; + newString)</span><br><span class=\"line\">notifyObservers(newString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  观察者的抽象</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">interface MyObserver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fun update(newState: String)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  观察者</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">class ActualObserver : MyObserver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun update(newState: String) &#123;</span><br><span class=\"line\">println(&quot;观察者状态改变为：&quot;+ newState)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们得到在创建了实际观察者与实际被观察者对象之后，进行Attach(也就是将观察者注册到被观察者的集合中)，然后改变被观察者状态。验证观察者更新状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">super.onCreate(savedInstanceState)</span><br><span class=\"line\">setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">val actualSubject = ActualSubject()</span><br><span class=\"line\">val actualObserver = ActualObserver()</span><br><span class=\"line\">// 注册</span><br><span class=\"line\">actualSubject.attach(actualObserver)</span><br><span class=\"line\"></span><br><span class=\"line\">actualSubject.change(&quot;new state&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"推模型VS拉模型\"><a href=\"#推模型VS拉模型\" class=\"headerlink\" title=\"推模型VS拉模型\"></a>推模型VS拉模型</h4><p><details><br>在观察者模式中，又分为推模型和拉模型两种方式。<br><strong>推模型</strong><br>主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。<br><strong>拉模型</strong><br>主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。<br><strong>两种模式的比较</strong><br>　　■　　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。<br>　　■　　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。<br></details><br>实际就是传一个具体的类型，例如String,还是传入一个被观察者对象的区别。方便使用吧o((⊙﹏⊙))o.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"观察者模式简述\"><a href=\"#观察者模式简述\" class=\"headerlink\" title=\"观察者模式简述\"></a>观察者模式简述</h3><p>点击查看理论知识…（⊙＿⊙；）…</p>\n<p><details><br>观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。<br><strong>观察者模式所涉及的角色有</strong><br><strong>抽象主题角色：</strong>抽象主题角色吧所有对观察者对象的引用保存在一个聚集里面。每个主题都可以有任何数量的观察者。抽象主题提供一个借口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者（Observable）角色。<br><strong>具体主题角色</strong>：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。<br><strong>抽象观察者：</strong>为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。<br><strong>具体观察者：</strong>存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。<br></details><br>","more":"</p>\n<h4 id=\"简易的例子\"><a href=\"#简易的例子\" class=\"headerlink\" title=\"简易的例子\"></a>简易的例子</h4><p>上面的全都是理论，读起来绕嘴都 。。。</p>\n<ol>\n<li>创建观察者</li>\n<li>创建被观察者</li>\n<li>被观察者的状态改变，进而通知观察者改变状态。所以，被观察者里面有一个装有所有观察者的集合，被观察者状态改变的时候，遍历被观察者所拥有的这个集合，通知（调用）观察者中的更新状态方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  被观察者的抽象</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">abstract class Subject &#123;</span><br><span class=\"line\">private val list = mutableListOf&lt;MyObserver&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fun attach(observer: MyObserver) &#123;</span><br><span class=\"line\">list.add(observer)</span><br><span class=\"line\">println(&quot;Attached an observer&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun detach(observer: MyObserver) &#123;</span><br><span class=\"line\">list.remove(observer)</span><br><span class=\"line\">println(&quot;detach an observer&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun notifyObservers(newState: String) &#123;</span><br><span class=\"line\">list.forEach &#123;</span><br><span class=\"line\">it.update(newState)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  实际被观察者</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">class ActualSubject : Subject() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fun change(newString: String) &#123;</span><br><span class=\"line\">println(&quot;被观察者的状态改变为：&quot; + newString)</span><br><span class=\"line\">notifyObservers(newString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  观察者的抽象</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">interface MyObserver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">fun update(newState: String)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @author:       zhaochunyu</span><br><span class=\"line\">* @description:  观察者</span><br><span class=\"line\">* @date:         2018/10/9</span><br><span class=\"line\">*/</span><br><span class=\"line\">class ActualObserver : MyObserver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun update(newState: String) &#123;</span><br><span class=\"line\">println(&quot;观察者状态改变为：&quot;+ newState)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们得到在创建了实际观察者与实际被观察者对象之后，进行Attach(也就是将观察者注册到被观察者的集合中)，然后改变被观察者状态。验证观察者更新状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MainActivity : AppCompatActivity() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class=\"line\">super.onCreate(savedInstanceState)</span><br><span class=\"line\">setContentView(R.layout.activity_main)</span><br><span class=\"line\"></span><br><span class=\"line\">val actualSubject = ActualSubject()</span><br><span class=\"line\">val actualObserver = ActualObserver()</span><br><span class=\"line\">// 注册</span><br><span class=\"line\">actualSubject.attach(actualObserver)</span><br><span class=\"line\"></span><br><span class=\"line\">actualSubject.change(&quot;new state&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"推模型VS拉模型\"><a href=\"#推模型VS拉模型\" class=\"headerlink\" title=\"推模型VS拉模型\"></a>推模型VS拉模型</h4><p><details><br>在观察者模式中，又分为推模型和拉模型两种方式。<br><strong>推模型</strong><br>主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。<br><strong>拉模型</strong><br>主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。<br><strong>两种模式的比较</strong><br>　　■　　推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。<br>　　■　　推模型可能会使得观察者对象难以复用，因为观察者的update()方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的update()方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update()方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。<br></details><br>实际就是传一个具体的类型，例如String,还是传入一个被观察者对象的区别。方便使用吧o((⊙﹏⊙))o.</p>"},{"title":"Personal introduction","date":"2018-10-03T08:43:09.000Z","_content":"想要写点什么，但是不知道写点什么，反正就随便写点什么。\n<!--more-->\n就从我是一个什么样的人介绍开始吧，我出生于1994年，到2018年就是24周岁，今年是我再北京的第二个年头，没取得什么成就，反正就是勉强度日。\n我这个人性格善良，还有emmm。。。\n\n好了\n","source":"_posts/Personal-introduction.md","raw":"---\ntitle: Personal introduction\ndate: 2018-10-03 16:43:09\ncategories: Diary\n---\n想要写点什么，但是不知道写点什么，反正就随便写点什么。\n<!--more-->\n就从我是一个什么样的人介绍开始吧，我出生于1994年，到2018年就是24周岁，今年是我再北京的第二个年头，没取得什么成就，反正就是勉强度日。\n我这个人性格善良，还有emmm。。。\n\n好了\n","slug":"Personal-introduction","published":1,"updated":"2018-10-03T08:44:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydmz0008or26pbyxyhs5","content":"<p>想要写点什么，但是不知道写点什么，反正就随便写点什么。<br><a id=\"more\"></a><br>就从我是一个什么样的人介绍开始吧，我出生于1994年，到2018年就是24周岁，今年是我再北京的第二个年头，没取得什么成就，反正就是勉强度日。<br>我这个人性格善良，还有emmm。。。</p>\n<p>好了</p>\n","site":{"data":{}},"excerpt":"<p>想要写点什么，但是不知道写点什么，反正就随便写点什么。<br>","more":"<br>就从我是一个什么样的人介绍开始吧，我出生于1994年，到2018年就是24周岁，今年是我再北京的第二个年头，没取得什么成就，反正就是勉强度日。<br>我这个人性格善良，还有emmm。。。</p>\n<p>好了</p>"},{"title":"注解知识简述","date":"2018-10-10T08:22:24.000Z","_content":"### 注解知识点\n#### 概念\n注解是一种元数据形式，可以被添加到java源代码中，类、方法、变量、参数、包都可以被注解，注解对他们操作的代码没有直接的影响。\n<!--more-->\n#### 作用\n1. 标记，用于告诉编辑器一些信息\n2. 编译时动态处理，例如动态生成代码\n3. 运行时动态处理，例如得到注解信息  \n\n#### 自定义注解\n1. 通过@interface定义，注解名即为自定义注解名\n2. 注解配置参数名为注解类的方法名  \n1. 所有方法没有方法体，没有参数没有修饰符，实际只允许 public & abstract 修饰符，默认为 public，不允许抛异常  \n2. 方法返回值只能是基本类型，String, Class, annotation, enumeration 或者是他们的一维数组  \n3. 若只有一个默认属性，可直接用 value() 函数。一个属性都没有表示该 Annotation 为 Mark Annotation\n3. 可以加 default 表示默认值 \n\n```\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Inherited\npublic @interface MethodInfo {\n\nString author() default \"o0o0oo00\";\n\nString date();\n\nint version() default 1;\n}\n```\n#### 元注解\n它是一种基本注解，用于应用到定义的注解上面\n\n* @Documented 是否会保存到 Javadoc 文档中\n* @Retention 保留时间，可选值 SOURCE（源码时），CLASS（编译时），RUNTIME（运行时），默认为 CLASS，SOURCE 大都为 Mark Annotation，这类 Annotation 大都用来校验，比如 Override, SuppressWarnings\n* @Target 可以用来修饰哪些程序元素  \n\n>\nElementType.ANNOTATION_TYPE  可以给一个注解进行注解\nElementType.CONSTRUCTOR  可以给构造方法进行注解\nElementType.FIELD  可以给属性进行注解\nElementType.LOCAL_VARIABLE  可以给局部变量进行注解\nElementType.METHOD   可以给方法进行注解\nElementType.PACKAGE  可以给一个包进行注解\nElementType.PARAMETER  可以给一个方法内的参数进行注解\nElementType.TYPE  可以给一个类型进行注解，比如类、接口、枚举\n\n未标注则表示可修饰所有\n\n* @Inherited 是否可以被继承，默认为 false。意思是说，老子是富豪，那么老子的儿子虽然没有明确的指明为是富豪，但他也是富豪。\n* @Repeatable 注解会多次应用，通常是注解的值可以同时取多个\n\n```\n@interface Persons {\nPerson[]  value();\n}\n\n@Repeatable(Persons.class)\n@interface Person{\nString role default \"goodman\";\n}\n\n@Person(role=\"motherfucker\")\n@Person(role=\"asshole\")\n@Person(role=\"bitch\")\npublic class SuperMan{\n\n}\n\n```\n**Attention!**  \n\n1. 如果只有一个名为value的属性时，在使用的时候可以省略命名参数直接填入\n2. 如果定义的时候一个属性都没有那么在使用的时候连括号都可以省略\n\n#### 运行时注解解析\n运行时 Annotation 指 @Retention 为 RUNTIME 的 Annotation，可手动调用下面常用 API 解析  \n> method.getAnnotation(AnnotationName.class);\nmethod.getAnnotations();  \nmethod.isAnnotationPresent(AnnotationName.class);是否应用了某个注解   \n\n```\npublic static void main (String[] args){\ntry {\nClass cls = Class.forName(\"com.zcy.nidavellir.javaworld.java.App\");\nfor (Method method : cls.getMethods()) {\nMethodInfo methodInfo = method.getAnnotation(MethodInfo.class);\nif (methodInfo != null) {\nSystem.out.println(\"method name:\" + method.getName());\nSystem.out.println(\"method author:\" + methodInfo.author());\nSystem.out.println(\"method version:\" + methodInfo.version());\nSystem.out.println(\"method date:\" + methodInfo.date());\n}\n}\n} catch (ClassNotFoundException e) {\ne.printStackTrace();\n}\n}\n```\n#### 编译时注解解析\n编译时 Annotation 指 @Retention 为 CLASS 的 Annotation，由编译器自动解析\n\n1. 自定义类集成自 AbstractProcessor\n2. 重写其中的 process 函数  \n\n实际是编译器在编译时自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法去处理\n\n","source":"_posts/annotation.md","raw":"---\ntitle: 注解知识简述\ndate: 2018-10-10 16:22:24\ncategories: 技术\n---\n### 注解知识点\n#### 概念\n注解是一种元数据形式，可以被添加到java源代码中，类、方法、变量、参数、包都可以被注解，注解对他们操作的代码没有直接的影响。\n<!--more-->\n#### 作用\n1. 标记，用于告诉编辑器一些信息\n2. 编译时动态处理，例如动态生成代码\n3. 运行时动态处理，例如得到注解信息  \n\n#### 自定义注解\n1. 通过@interface定义，注解名即为自定义注解名\n2. 注解配置参数名为注解类的方法名  \n1. 所有方法没有方法体，没有参数没有修饰符，实际只允许 public & abstract 修饰符，默认为 public，不允许抛异常  \n2. 方法返回值只能是基本类型，String, Class, annotation, enumeration 或者是他们的一维数组  \n3. 若只有一个默认属性，可直接用 value() 函数。一个属性都没有表示该 Annotation 为 Mark Annotation\n3. 可以加 default 表示默认值 \n\n```\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Inherited\npublic @interface MethodInfo {\n\nString author() default \"o0o0oo00\";\n\nString date();\n\nint version() default 1;\n}\n```\n#### 元注解\n它是一种基本注解，用于应用到定义的注解上面\n\n* @Documented 是否会保存到 Javadoc 文档中\n* @Retention 保留时间，可选值 SOURCE（源码时），CLASS（编译时），RUNTIME（运行时），默认为 CLASS，SOURCE 大都为 Mark Annotation，这类 Annotation 大都用来校验，比如 Override, SuppressWarnings\n* @Target 可以用来修饰哪些程序元素  \n\n>\nElementType.ANNOTATION_TYPE  可以给一个注解进行注解\nElementType.CONSTRUCTOR  可以给构造方法进行注解\nElementType.FIELD  可以给属性进行注解\nElementType.LOCAL_VARIABLE  可以给局部变量进行注解\nElementType.METHOD   可以给方法进行注解\nElementType.PACKAGE  可以给一个包进行注解\nElementType.PARAMETER  可以给一个方法内的参数进行注解\nElementType.TYPE  可以给一个类型进行注解，比如类、接口、枚举\n\n未标注则表示可修饰所有\n\n* @Inherited 是否可以被继承，默认为 false。意思是说，老子是富豪，那么老子的儿子虽然没有明确的指明为是富豪，但他也是富豪。\n* @Repeatable 注解会多次应用，通常是注解的值可以同时取多个\n\n```\n@interface Persons {\nPerson[]  value();\n}\n\n@Repeatable(Persons.class)\n@interface Person{\nString role default \"goodman\";\n}\n\n@Person(role=\"motherfucker\")\n@Person(role=\"asshole\")\n@Person(role=\"bitch\")\npublic class SuperMan{\n\n}\n\n```\n**Attention!**  \n\n1. 如果只有一个名为value的属性时，在使用的时候可以省略命名参数直接填入\n2. 如果定义的时候一个属性都没有那么在使用的时候连括号都可以省略\n\n#### 运行时注解解析\n运行时 Annotation 指 @Retention 为 RUNTIME 的 Annotation，可手动调用下面常用 API 解析  \n> method.getAnnotation(AnnotationName.class);\nmethod.getAnnotations();  \nmethod.isAnnotationPresent(AnnotationName.class);是否应用了某个注解   \n\n```\npublic static void main (String[] args){\ntry {\nClass cls = Class.forName(\"com.zcy.nidavellir.javaworld.java.App\");\nfor (Method method : cls.getMethods()) {\nMethodInfo methodInfo = method.getAnnotation(MethodInfo.class);\nif (methodInfo != null) {\nSystem.out.println(\"method name:\" + method.getName());\nSystem.out.println(\"method author:\" + methodInfo.author());\nSystem.out.println(\"method version:\" + methodInfo.version());\nSystem.out.println(\"method date:\" + methodInfo.date());\n}\n}\n} catch (ClassNotFoundException e) {\ne.printStackTrace();\n}\n}\n```\n#### 编译时注解解析\n编译时 Annotation 指 @Retention 为 CLASS 的 Annotation，由编译器自动解析\n\n1. 自定义类集成自 AbstractProcessor\n2. 重写其中的 process 函数  \n\n实际是编译器在编译时自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法去处理\n\n","slug":"annotation","published":1,"updated":"2018-10-10T08:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydn1000aor26wa28t8jn","content":"<h3 id=\"注解知识点\"><a href=\"#注解知识点\" class=\"headerlink\" title=\"注解知识点\"></a>注解知识点</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>注解是一种元数据形式，可以被添加到java源代码中，类、方法、变量、参数、包都可以被注解，注解对他们操作的代码没有直接的影响。<br><a id=\"more\"></a></p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol>\n<li>标记，用于告诉编辑器一些信息</li>\n<li>编译时动态处理，例如动态生成代码</li>\n<li>运行时动态处理，例如得到注解信息  </li>\n</ol>\n<h4 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h4><ol>\n<li>通过@interface定义，注解名即为自定义注解名</li>\n<li>注解配置参数名为注解类的方法名  </li>\n<li>所有方法没有方法体，没有参数没有修饰符，实际只允许 public &amp; abstract 修饰符，默认为 public，不允许抛异常  </li>\n<li>方法返回值只能是基本类型，String, Class, annotation, enumeration 或者是他们的一维数组  </li>\n<li>若只有一个默认属性，可直接用 value() 函数。一个属性都没有表示该 Annotation 为 Mark Annotation</li>\n<li>可以加 default 表示默认值 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Inherited</span><br><span class=\"line\">public @interface MethodInfo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">String author() default &quot;o0o0oo00&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">String date();</span><br><span class=\"line\"></span><br><span class=\"line\">int version() default 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>它是一种基本注解，用于应用到定义的注解上面</p>\n<ul>\n<li>@Documented 是否会保存到 Javadoc 文档中</li>\n<li>@Retention 保留时间，可选值 SOURCE（源码时），CLASS（编译时），RUNTIME（运行时），默认为 CLASS，SOURCE 大都为 Mark Annotation，这类 Annotation 大都用来校验，比如 Override, SuppressWarnings</li>\n<li>@Target 可以用来修饰哪些程序元素  </li>\n</ul>\n<blockquote>\n</blockquote>\n<p>ElementType.ANNOTATION_TYPE  可以给一个注解进行注解<br>ElementType.CONSTRUCTOR  可以给构造方法进行注解<br>ElementType.FIELD  可以给属性进行注解<br>ElementType.LOCAL_VARIABLE  可以给局部变量进行注解<br>ElementType.METHOD   可以给方法进行注解<br>ElementType.PACKAGE  可以给一个包进行注解<br>ElementType.PARAMETER  可以给一个方法内的参数进行注解<br>ElementType.TYPE  可以给一个类型进行注解，比如类、接口、枚举</p>\n<p>未标注则表示可修饰所有</p>\n<ul>\n<li>@Inherited 是否可以被继承，默认为 false。意思是说，老子是富豪，那么老子的儿子虽然没有明确的指明为是富豪，但他也是富豪。</li>\n<li>@Repeatable 注解会多次应用，通常是注解的值可以同时取多个</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Persons &#123;</span><br><span class=\"line\">Person[]  value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repeatable(Persons.class)</span><br><span class=\"line\">@interface Person&#123;</span><br><span class=\"line\">String role default &quot;goodman&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Person(role=&quot;motherfucker&quot;)</span><br><span class=\"line\">@Person(role=&quot;asshole&quot;)</span><br><span class=\"line\">@Person(role=&quot;bitch&quot;)</span><br><span class=\"line\">public class SuperMan&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Attention!</strong>  </p>\n<ol>\n<li>如果只有一个名为value的属性时，在使用的时候可以省略命名参数直接填入</li>\n<li>如果定义的时候一个属性都没有那么在使用的时候连括号都可以省略</li>\n</ol>\n<h4 id=\"运行时注解解析\"><a href=\"#运行时注解解析\" class=\"headerlink\" title=\"运行时注解解析\"></a>运行时注解解析</h4><p>运行时 Annotation 指 @Retention 为 RUNTIME 的 Annotation，可手动调用下面常用 API 解析  </p>\n<blockquote>\n<p>method.getAnnotation(AnnotationName.class);<br>method.getAnnotations();<br>method.isAnnotationPresent(AnnotationName.class);是否应用了某个注解   </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main (String[] args)&#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">Class cls = Class.forName(&quot;com.zcy.nidavellir.javaworld.java.App&quot;);</span><br><span class=\"line\">for (Method method : cls.getMethods()) &#123;</span><br><span class=\"line\">MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);</span><br><span class=\"line\">if (methodInfo != null) &#123;</span><br><span class=\"line\">System.out.println(&quot;method name:&quot; + method.getName());</span><br><span class=\"line\">System.out.println(&quot;method author:&quot; + methodInfo.author());</span><br><span class=\"line\">System.out.println(&quot;method version:&quot; + methodInfo.version());</span><br><span class=\"line\">System.out.println(&quot;method date:&quot; + methodInfo.date());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译时注解解析\"><a href=\"#编译时注解解析\" class=\"headerlink\" title=\"编译时注解解析\"></a>编译时注解解析</h4><p>编译时 Annotation 指 @Retention 为 CLASS 的 Annotation，由编译器自动解析</p>\n<ol>\n<li>自定义类集成自 AbstractProcessor</li>\n<li>重写其中的 process 函数  </li>\n</ol>\n<p>实际是编译器在编译时自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法去处理</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"注解知识点\"><a href=\"#注解知识点\" class=\"headerlink\" title=\"注解知识点\"></a>注解知识点</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>注解是一种元数据形式，可以被添加到java源代码中，类、方法、变量、参数、包都可以被注解，注解对他们操作的代码没有直接的影响。<br>","more":"</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ol>\n<li>标记，用于告诉编辑器一些信息</li>\n<li>编译时动态处理，例如动态生成代码</li>\n<li>运行时动态处理，例如得到注解信息  </li>\n</ol>\n<h4 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h4><ol>\n<li>通过@interface定义，注解名即为自定义注解名</li>\n<li>注解配置参数名为注解类的方法名  </li>\n<li>所有方法没有方法体，没有参数没有修饰符，实际只允许 public &amp; abstract 修饰符，默认为 public，不允许抛异常  </li>\n<li>方法返回值只能是基本类型，String, Class, annotation, enumeration 或者是他们的一维数组  </li>\n<li>若只有一个默认属性，可直接用 value() 函数。一个属性都没有表示该 Annotation 为 Mark Annotation</li>\n<li>可以加 default 表示默认值 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Documented</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Inherited</span><br><span class=\"line\">public @interface MethodInfo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">String author() default &quot;o0o0oo00&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">String date();</span><br><span class=\"line\"></span><br><span class=\"line\">int version() default 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>它是一种基本注解，用于应用到定义的注解上面</p>\n<ul>\n<li>@Documented 是否会保存到 Javadoc 文档中</li>\n<li>@Retention 保留时间，可选值 SOURCE（源码时），CLASS（编译时），RUNTIME（运行时），默认为 CLASS，SOURCE 大都为 Mark Annotation，这类 Annotation 大都用来校验，比如 Override, SuppressWarnings</li>\n<li>@Target 可以用来修饰哪些程序元素  </li>\n</ul>\n<blockquote>\n</blockquote>\n<p>ElementType.ANNOTATION_TYPE  可以给一个注解进行注解<br>ElementType.CONSTRUCTOR  可以给构造方法进行注解<br>ElementType.FIELD  可以给属性进行注解<br>ElementType.LOCAL_VARIABLE  可以给局部变量进行注解<br>ElementType.METHOD   可以给方法进行注解<br>ElementType.PACKAGE  可以给一个包进行注解<br>ElementType.PARAMETER  可以给一个方法内的参数进行注解<br>ElementType.TYPE  可以给一个类型进行注解，比如类、接口、枚举</p>\n<p>未标注则表示可修饰所有</p>\n<ul>\n<li>@Inherited 是否可以被继承，默认为 false。意思是说，老子是富豪，那么老子的儿子虽然没有明确的指明为是富豪，但他也是富豪。</li>\n<li>@Repeatable 注解会多次应用，通常是注解的值可以同时取多个</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Persons &#123;</span><br><span class=\"line\">Person[]  value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repeatable(Persons.class)</span><br><span class=\"line\">@interface Person&#123;</span><br><span class=\"line\">String role default &quot;goodman&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Person(role=&quot;motherfucker&quot;)</span><br><span class=\"line\">@Person(role=&quot;asshole&quot;)</span><br><span class=\"line\">@Person(role=&quot;bitch&quot;)</span><br><span class=\"line\">public class SuperMan&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Attention!</strong>  </p>\n<ol>\n<li>如果只有一个名为value的属性时，在使用的时候可以省略命名参数直接填入</li>\n<li>如果定义的时候一个属性都没有那么在使用的时候连括号都可以省略</li>\n</ol>\n<h4 id=\"运行时注解解析\"><a href=\"#运行时注解解析\" class=\"headerlink\" title=\"运行时注解解析\"></a>运行时注解解析</h4><p>运行时 Annotation 指 @Retention 为 RUNTIME 的 Annotation，可手动调用下面常用 API 解析  </p>\n<blockquote>\n<p>method.getAnnotation(AnnotationName.class);<br>method.getAnnotations();<br>method.isAnnotationPresent(AnnotationName.class);是否应用了某个注解   </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main (String[] args)&#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">Class cls = Class.forName(&quot;com.zcy.nidavellir.javaworld.java.App&quot;);</span><br><span class=\"line\">for (Method method : cls.getMethods()) &#123;</span><br><span class=\"line\">MethodInfo methodInfo = method.getAnnotation(MethodInfo.class);</span><br><span class=\"line\">if (methodInfo != null) &#123;</span><br><span class=\"line\">System.out.println(&quot;method name:&quot; + method.getName());</span><br><span class=\"line\">System.out.println(&quot;method author:&quot; + methodInfo.author());</span><br><span class=\"line\">System.out.println(&quot;method version:&quot; + methodInfo.version());</span><br><span class=\"line\">System.out.println(&quot;method date:&quot; + methodInfo.date());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译时注解解析\"><a href=\"#编译时注解解析\" class=\"headerlink\" title=\"编译时注解解析\"></a>编译时注解解析</h4><p>编译时 Annotation 指 @Retention 为 CLASS 的 Annotation，由编译器自动解析</p>\n<ol>\n<li>自定义类集成自 AbstractProcessor</li>\n<li>重写其中的 process 函数  </li>\n</ol>\n<p>实际是编译器在编译时自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法去处理</p>"},{"title":"Android上的弹窗及其层级关系协调","date":"2018-12-21T07:25:19.000Z","_content":"\n## Alert弹窗 的一种解决方案\n需求：在屏幕的最上方弹出一个横条Alert（警告框） 居于StateBar（状态栏）之下\n\n初始的解决方案是直接修改系统的Toast，可以通过反射字段来达到Toast可以交互的目的。但是在Android8.0以上的手机，Toast 的Animation被固定为了淡入淡出，不可以是上滑下滑的动画效果，所以PASS。  \n\nAndroid上的**Alert**（警告）弹窗，**本质上**就是一个**View**。 既然是一个View那么我们完全可以自定义与它的交互效果。  \n\n下面说几种我想到的解决方案\n<!--more-->\n### 1. 普通Alerta\n此时只有Activity一个Window，所以不存在层级之间的覆盖关系。  \n直接在**Activity的DecorView上添加AlertView**\n\n### 2. Activity中存在Dialog的时候\n如果用上面的方法的话，会出现一个问题，Dialog的阴影把我们的Alert弹窗覆盖上了，针对这个问题我们分析一下   \n\n由于Dialog所属的Window层级为System级别，所以显示优先级高于Activity的Window层级Application\n\n### 3. 直男解决办法\n经过观察发现，可以通过`dialog.window.decorView`来获取到dialog的DecorView，那么我们是不是可以将我们的AlertView添加到这个decorView之上呢？\n事实证明是可以的，不过Dialog的Window大小需要调整，此时就遇到了另一个问题。如何将Dialog全屏，以便于Alert可以显示在屏幕的最上方。\n\n下面粘贴了关键代码（详见`BaseFullScreenDialog`） + XML布局 双match_parent\n\n```\nwindow?.requestFeature(Window.FEATURE_NO_TITLE)\nwindow?.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT)\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\n}\n\ndialog = newDialog()// 创建出dialog对象\ndialog.setContentView(view, ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))\ndialog.window.setBackgroundDrawableResource(android.R.color.transparent)\n```\n这样Dialog全屏的时候我们的Alert果然就显示在了屏幕的最上方！\n\n不过 **又双叒叕** 引申出另一个问题，如果Dialog中存在输入框，需要弹出输入法，我们知道，默认的dialog在输入法弹出的时候会自动被推上去一段距离，可是我们的dialog已经全屏了啊，此时我又写了一个通用扩展方法`dialog.pushDialogAboveSoftInput(root, content)`其中计算了输入法高度以及NavigationBar高度，来将Dialog xml布局中的**内容view**手动的推上去一段距离。这才勉强算是完成了需求。擦汗...... \n\n又双叒叕引申出一些关于NavigationBar的坑就不太好处理了\n\n### 4 奇技淫巧解决办法\n我们回归问题的原始，又回到最初的起点......   \n\n是因为dialog的阴影挡住了我们的Alert所以才要将Alert添加到Dialog的Window上去。那么我们可不可以将Dialog的阴影去掉，换成改变Activity的透明度。岂不是绕过了上面的所有问题。☆´∀｀☆\n\n首先应该设置dialog弹出时候背景不变黑\n\n```\n dialog.window.setDimAmount(0F)\n```\n\n分别在dialog的show 和 dismiss方法中去改变Activity的透明度。\n\n```\n// 黑暗 0.0F ~ 1.0F 透明\nfun Context.setBackgroundAlpha(alpha: Float) {\n    val act = this as? Activity ?: return\n    val attributes = act.window.attributes\n    attributes.alpha = alpha\n    act.window.attributes = attributes\n}\n```\n这样就把问题控制在了AlertView的层级上了，只需要配合WindowManager，就可以实现Alert不会被背景阴影挡住了。\n\n### 5. WindowManager 设置Alert层级\n(╥﹏╥...) \n  \n我们知道Window的显示是有层级顺序的，层级高的覆盖在层级低的Window之上。  \nActivity的层级为 `TYPE_APPLICATION`\nPopupWindow的层级为`TYPE_APPLICATION_PANEL`\n而我们只需要添加一个层级为`TYPE_APPLICATION_SUB_PANEL`的View到Window上面即可\n\n> These windows are displayed on top their attached window and any{@link #TYPE_APPLICATION_PANEL} panels.\n\n关于层级顺序详见SDK WindowManager.java\n\n**注!!!**  \n使用WindowManager如果是在**层级为2000`FIRST_SYSTEM_WINDOW`**以下的是**不需要**申请弹窗权限的。\n\n而这种创建出来的Window是依附于Activity的，如果界面被销毁，或者还没有初始化就去使用WindowManager来`addView`或者`removeView`会报异常`view not attached to window`\n\n针对这个问题，做如下控制\n\n```\nif ((act as? Activity)?.isFinishing == true) {\n    return\n}\n\nwindowManager.addView(root, layoutParams)\n```\n```\nHandler().postDelayed({\n    if (root.isAttachedToWindow && act?.isFinishing != true) {\n        windowManager.removeView(root)\n    }\n}, DURATION_ANIM)\n\n```\n以及关联Application 的 `registerActivityLifecycleCallbacks`生命周期\n\n```\noverride fun onActivityDestroyed(activity: Activity?) {\n    if (root.isAttachedToWindow) {\n        windowManager.removeView(root)\n    }\n}\n```\n\n### 6 特殊问题\n在one plus 的 9.0 系统上面 windowManager添加顶部Alert会**被statebar遮挡一部分**  \n\n解决办法：给WindowManager.LayoutParams添加如下FLAG\n\n```\nlayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or // 不获取焦点，以便于在弹出的时候 下层界面仍然可以进行操作\n        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or\n        WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR // 确保你的内容不会被装饰物(如状态栏)掩盖.\n\n```\n\n### 干脆Dialog都不用了直接用PopupWindow\n我们知道popWindow是与Activity共用同一个Window的，这一点上来讲，非常好控制，配合WindowManager 完全可以实现需求。\n\n[代码](https://github.com/o0o0oo00/NewToast)","source":"_posts/alert.md","raw":"---\ntitle: Android上的弹窗及其层级关系协调\ndate: 2018-12-21 15:25:19\ntags: \ncategories: 技术\n---\n\n## Alert弹窗 的一种解决方案\n需求：在屏幕的最上方弹出一个横条Alert（警告框） 居于StateBar（状态栏）之下\n\n初始的解决方案是直接修改系统的Toast，可以通过反射字段来达到Toast可以交互的目的。但是在Android8.0以上的手机，Toast 的Animation被固定为了淡入淡出，不可以是上滑下滑的动画效果，所以PASS。  \n\nAndroid上的**Alert**（警告）弹窗，**本质上**就是一个**View**。 既然是一个View那么我们完全可以自定义与它的交互效果。  \n\n下面说几种我想到的解决方案\n<!--more-->\n### 1. 普通Alerta\n此时只有Activity一个Window，所以不存在层级之间的覆盖关系。  \n直接在**Activity的DecorView上添加AlertView**\n\n### 2. Activity中存在Dialog的时候\n如果用上面的方法的话，会出现一个问题，Dialog的阴影把我们的Alert弹窗覆盖上了，针对这个问题我们分析一下   \n\n由于Dialog所属的Window层级为System级别，所以显示优先级高于Activity的Window层级Application\n\n### 3. 直男解决办法\n经过观察发现，可以通过`dialog.window.decorView`来获取到dialog的DecorView，那么我们是不是可以将我们的AlertView添加到这个decorView之上呢？\n事实证明是可以的，不过Dialog的Window大小需要调整，此时就遇到了另一个问题。如何将Dialog全屏，以便于Alert可以显示在屏幕的最上方。\n\n下面粘贴了关键代码（详见`BaseFullScreenDialog`） + XML布局 双match_parent\n\n```\nwindow?.requestFeature(Window.FEATURE_NO_TITLE)\nwindow?.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT)\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\n}\n\ndialog = newDialog()// 创建出dialog对象\ndialog.setContentView(view, ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))\ndialog.window.setBackgroundDrawableResource(android.R.color.transparent)\n```\n这样Dialog全屏的时候我们的Alert果然就显示在了屏幕的最上方！\n\n不过 **又双叒叕** 引申出另一个问题，如果Dialog中存在输入框，需要弹出输入法，我们知道，默认的dialog在输入法弹出的时候会自动被推上去一段距离，可是我们的dialog已经全屏了啊，此时我又写了一个通用扩展方法`dialog.pushDialogAboveSoftInput(root, content)`其中计算了输入法高度以及NavigationBar高度，来将Dialog xml布局中的**内容view**手动的推上去一段距离。这才勉强算是完成了需求。擦汗...... \n\n又双叒叕引申出一些关于NavigationBar的坑就不太好处理了\n\n### 4 奇技淫巧解决办法\n我们回归问题的原始，又回到最初的起点......   \n\n是因为dialog的阴影挡住了我们的Alert所以才要将Alert添加到Dialog的Window上去。那么我们可不可以将Dialog的阴影去掉，换成改变Activity的透明度。岂不是绕过了上面的所有问题。☆´∀｀☆\n\n首先应该设置dialog弹出时候背景不变黑\n\n```\n dialog.window.setDimAmount(0F)\n```\n\n分别在dialog的show 和 dismiss方法中去改变Activity的透明度。\n\n```\n// 黑暗 0.0F ~ 1.0F 透明\nfun Context.setBackgroundAlpha(alpha: Float) {\n    val act = this as? Activity ?: return\n    val attributes = act.window.attributes\n    attributes.alpha = alpha\n    act.window.attributes = attributes\n}\n```\n这样就把问题控制在了AlertView的层级上了，只需要配合WindowManager，就可以实现Alert不会被背景阴影挡住了。\n\n### 5. WindowManager 设置Alert层级\n(╥﹏╥...) \n  \n我们知道Window的显示是有层级顺序的，层级高的覆盖在层级低的Window之上。  \nActivity的层级为 `TYPE_APPLICATION`\nPopupWindow的层级为`TYPE_APPLICATION_PANEL`\n而我们只需要添加一个层级为`TYPE_APPLICATION_SUB_PANEL`的View到Window上面即可\n\n> These windows are displayed on top their attached window and any{@link #TYPE_APPLICATION_PANEL} panels.\n\n关于层级顺序详见SDK WindowManager.java\n\n**注!!!**  \n使用WindowManager如果是在**层级为2000`FIRST_SYSTEM_WINDOW`**以下的是**不需要**申请弹窗权限的。\n\n而这种创建出来的Window是依附于Activity的，如果界面被销毁，或者还没有初始化就去使用WindowManager来`addView`或者`removeView`会报异常`view not attached to window`\n\n针对这个问题，做如下控制\n\n```\nif ((act as? Activity)?.isFinishing == true) {\n    return\n}\n\nwindowManager.addView(root, layoutParams)\n```\n```\nHandler().postDelayed({\n    if (root.isAttachedToWindow && act?.isFinishing != true) {\n        windowManager.removeView(root)\n    }\n}, DURATION_ANIM)\n\n```\n以及关联Application 的 `registerActivityLifecycleCallbacks`生命周期\n\n```\noverride fun onActivityDestroyed(activity: Activity?) {\n    if (root.isAttachedToWindow) {\n        windowManager.removeView(root)\n    }\n}\n```\n\n### 6 特殊问题\n在one plus 的 9.0 系统上面 windowManager添加顶部Alert会**被statebar遮挡一部分**  \n\n解决办法：给WindowManager.LayoutParams添加如下FLAG\n\n```\nlayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or // 不获取焦点，以便于在弹出的时候 下层界面仍然可以进行操作\n        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or\n        WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR // 确保你的内容不会被装饰物(如状态栏)掩盖.\n\n```\n\n### 干脆Dialog都不用了直接用PopupWindow\n我们知道popWindow是与Activity共用同一个Window的，这一点上来讲，非常好控制，配合WindowManager 完全可以实现需求。\n\n[代码](https://github.com/o0o0oo00/NewToast)","slug":"alert","published":1,"updated":"2018-12-21T07:27:50.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydn2000cor26jzkvlir4","content":"<h2 id=\"Alert弹窗-的一种解决方案\"><a href=\"#Alert弹窗-的一种解决方案\" class=\"headerlink\" title=\"Alert弹窗 的一种解决方案\"></a>Alert弹窗 的一种解决方案</h2><p>需求：在屏幕的最上方弹出一个横条Alert（警告框） 居于StateBar（状态栏）之下</p>\n<p>初始的解决方案是直接修改系统的Toast，可以通过反射字段来达到Toast可以交互的目的。但是在Android8.0以上的手机，Toast 的Animation被固定为了淡入淡出，不可以是上滑下滑的动画效果，所以PASS。  </p>\n<p>Android上的<strong>Alert</strong>（警告）弹窗，<strong>本质上</strong>就是一个<strong>View</strong>。 既然是一个View那么我们完全可以自定义与它的交互效果。  </p>\n<p>下面说几种我想到的解决方案<br><a id=\"more\"></a></p>\n<h3 id=\"1-普通Alerta\"><a href=\"#1-普通Alerta\" class=\"headerlink\" title=\"1. 普通Alerta\"></a>1. 普通Alerta</h3><p>此时只有Activity一个Window，所以不存在层级之间的覆盖关系。<br>直接在<strong>Activity的DecorView上添加AlertView</strong></p>\n<h3 id=\"2-Activity中存在Dialog的时候\"><a href=\"#2-Activity中存在Dialog的时候\" class=\"headerlink\" title=\"2. Activity中存在Dialog的时候\"></a>2. Activity中存在Dialog的时候</h3><p>如果用上面的方法的话，会出现一个问题，Dialog的阴影把我们的Alert弹窗覆盖上了，针对这个问题我们分析一下   </p>\n<p>由于Dialog所属的Window层级为System级别，所以显示优先级高于Activity的Window层级Application</p>\n<h3 id=\"3-直男解决办法\"><a href=\"#3-直男解决办法\" class=\"headerlink\" title=\"3. 直男解决办法\"></a>3. 直男解决办法</h3><p>经过观察发现，可以通过<code>dialog.window.decorView</code>来获取到dialog的DecorView，那么我们是不是可以将我们的AlertView添加到这个decorView之上呢？<br>事实证明是可以的，不过Dialog的Window大小需要调整，此时就遇到了另一个问题。如何将Dialog全屏，以便于Alert可以显示在屏幕的最上方。</p>\n<p>下面粘贴了关键代码（详见<code>BaseFullScreenDialog</code>） + XML布局 双match_parent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window?.requestFeature(Window.FEATURE_NO_TITLE)</span><br><span class=\"line\">window?.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT)</span><br><span class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dialog = newDialog()// 创建出dialog对象</span><br><span class=\"line\">dialog.setContentView(view, ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))</span><br><span class=\"line\">dialog.window.setBackgroundDrawableResource(android.R.color.transparent)</span><br></pre></td></tr></table></figure>\n<p>这样Dialog全屏的时候我们的Alert果然就显示在了屏幕的最上方！</p>\n<p>不过 <strong>又双叒叕</strong> 引申出另一个问题，如果Dialog中存在输入框，需要弹出输入法，我们知道，默认的dialog在输入法弹出的时候会自动被推上去一段距离，可是我们的dialog已经全屏了啊，此时我又写了一个通用扩展方法<code>dialog.pushDialogAboveSoftInput(root, content)</code>其中计算了输入法高度以及NavigationBar高度，来将Dialog xml布局中的<strong>内容view</strong>手动的推上去一段距离。这才勉强算是完成了需求。擦汗…… </p>\n<p>又双叒叕引申出一些关于NavigationBar的坑就不太好处理了</p>\n<h3 id=\"4-奇技淫巧解决办法\"><a href=\"#4-奇技淫巧解决办法\" class=\"headerlink\" title=\"4 奇技淫巧解决办法\"></a>4 奇技淫巧解决办法</h3><p>我们回归问题的原始，又回到最初的起点……   </p>\n<p>是因为dialog的阴影挡住了我们的Alert所以才要将Alert添加到Dialog的Window上去。那么我们可不可以将Dialog的阴影去掉，换成改变Activity的透明度。岂不是绕过了上面的所有问题。☆´∀｀☆</p>\n<p>首先应该设置dialog弹出时候背景不变黑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dialog.window.setDimAmount(0F)</span><br></pre></td></tr></table></figure>\n<p>分别在dialog的show 和 dismiss方法中去改变Activity的透明度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 黑暗 0.0F ~ 1.0F 透明</span><br><span class=\"line\">fun Context.setBackgroundAlpha(alpha: Float) &#123;</span><br><span class=\"line\">    val act = this as? Activity ?: return</span><br><span class=\"line\">    val attributes = act.window.attributes</span><br><span class=\"line\">    attributes.alpha = alpha</span><br><span class=\"line\">    act.window.attributes = attributes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就把问题控制在了AlertView的层级上了，只需要配合WindowManager，就可以实现Alert不会被背景阴影挡住了。</p>\n<h3 id=\"5-WindowManager-设置Alert层级\"><a href=\"#5-WindowManager-设置Alert层级\" class=\"headerlink\" title=\"5. WindowManager 设置Alert层级\"></a>5. WindowManager 设置Alert层级</h3><p>(╥﹏╥…) </p>\n<p>我们知道Window的显示是有层级顺序的，层级高的覆盖在层级低的Window之上。<br>Activity的层级为 <code>TYPE_APPLICATION</code><br>PopupWindow的层级为<code>TYPE_APPLICATION_PANEL</code><br>而我们只需要添加一个层级为<code>TYPE_APPLICATION_SUB_PANEL</code>的View到Window上面即可</p>\n<blockquote>\n<p>These windows are displayed on top their attached window and any{@link #TYPE_APPLICATION_PANEL} panels.</p>\n</blockquote>\n<p>关于层级顺序详见SDK WindowManager.java</p>\n<p><strong>注!!!</strong><br>使用WindowManager如果是在<strong>层级为2000<code>FIRST_SYSTEM_WINDOW</code></strong>以下的是<strong>不需要</strong>申请弹窗权限的。</p>\n<p>而这种创建出来的Window是依附于Activity的，如果界面被销毁，或者还没有初始化就去使用WindowManager来<code>addView</code>或者<code>removeView</code>会报异常<code>view not attached to window</code></p>\n<p>针对这个问题，做如下控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ((act as? Activity)?.isFinishing == true) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">windowManager.addView(root, layoutParams)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler().postDelayed(&#123;</span><br><span class=\"line\">    if (root.isAttachedToWindow &amp;&amp; act?.isFinishing != true) &#123;</span><br><span class=\"line\">        windowManager.removeView(root)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, DURATION_ANIM)</span><br></pre></td></tr></table></figure>\n<p>以及关联Application 的 <code>registerActivityLifecycleCallbacks</code>生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onActivityDestroyed(activity: Activity?) &#123;</span><br><span class=\"line\">    if (root.isAttachedToWindow) &#123;</span><br><span class=\"line\">        windowManager.removeView(root)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-特殊问题\"><a href=\"#6-特殊问题\" class=\"headerlink\" title=\"6 特殊问题\"></a>6 特殊问题</h3><p>在one plus 的 9.0 系统上面 windowManager添加顶部Alert会<strong>被statebar遮挡一部分</strong>  </p>\n<p>解决办法：给WindowManager.LayoutParams添加如下FLAG</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or // 不获取焦点，以便于在弹出的时候 下层界面仍然可以进行操作</span><br><span class=\"line\">        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or</span><br><span class=\"line\">        WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR // 确保你的内容不会被装饰物(如状态栏)掩盖.</span><br></pre></td></tr></table></figure>\n<h3 id=\"干脆Dialog都不用了直接用PopupWindow\"><a href=\"#干脆Dialog都不用了直接用PopupWindow\" class=\"headerlink\" title=\"干脆Dialog都不用了直接用PopupWindow\"></a>干脆Dialog都不用了直接用PopupWindow</h3><p>我们知道popWindow是与Activity共用同一个Window的，这一点上来讲，非常好控制，配合WindowManager 完全可以实现需求。</p>\n<p><a href=\"https://github.com/o0o0oo00/NewToast\" target=\"_blank\" rel=\"noopener\">代码</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Alert弹窗-的一种解决方案\"><a href=\"#Alert弹窗-的一种解决方案\" class=\"headerlink\" title=\"Alert弹窗 的一种解决方案\"></a>Alert弹窗 的一种解决方案</h2><p>需求：在屏幕的最上方弹出一个横条Alert（警告框） 居于StateBar（状态栏）之下</p>\n<p>初始的解决方案是直接修改系统的Toast，可以通过反射字段来达到Toast可以交互的目的。但是在Android8.0以上的手机，Toast 的Animation被固定为了淡入淡出，不可以是上滑下滑的动画效果，所以PASS。  </p>\n<p>Android上的<strong>Alert</strong>（警告）弹窗，<strong>本质上</strong>就是一个<strong>View</strong>。 既然是一个View那么我们完全可以自定义与它的交互效果。  </p>\n<p>下面说几种我想到的解决方案<br>","more":"</p>\n<h3 id=\"1-普通Alerta\"><a href=\"#1-普通Alerta\" class=\"headerlink\" title=\"1. 普通Alerta\"></a>1. 普通Alerta</h3><p>此时只有Activity一个Window，所以不存在层级之间的覆盖关系。<br>直接在<strong>Activity的DecorView上添加AlertView</strong></p>\n<h3 id=\"2-Activity中存在Dialog的时候\"><a href=\"#2-Activity中存在Dialog的时候\" class=\"headerlink\" title=\"2. Activity中存在Dialog的时候\"></a>2. Activity中存在Dialog的时候</h3><p>如果用上面的方法的话，会出现一个问题，Dialog的阴影把我们的Alert弹窗覆盖上了，针对这个问题我们分析一下   </p>\n<p>由于Dialog所属的Window层级为System级别，所以显示优先级高于Activity的Window层级Application</p>\n<h3 id=\"3-直男解决办法\"><a href=\"#3-直男解决办法\" class=\"headerlink\" title=\"3. 直男解决办法\"></a>3. 直男解决办法</h3><p>经过观察发现，可以通过<code>dialog.window.decorView</code>来获取到dialog的DecorView，那么我们是不是可以将我们的AlertView添加到这个decorView之上呢？<br>事实证明是可以的，不过Dialog的Window大小需要调整，此时就遇到了另一个问题。如何将Dialog全屏，以便于Alert可以显示在屏幕的最上方。</p>\n<p>下面粘贴了关键代码（详见<code>BaseFullScreenDialog</code>） + XML布局 双match_parent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window?.requestFeature(Window.FEATURE_NO_TITLE)</span><br><span class=\"line\">window?.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT)</span><br><span class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dialog = newDialog()// 创建出dialog对象</span><br><span class=\"line\">dialog.setContentView(view, ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))</span><br><span class=\"line\">dialog.window.setBackgroundDrawableResource(android.R.color.transparent)</span><br></pre></td></tr></table></figure>\n<p>这样Dialog全屏的时候我们的Alert果然就显示在了屏幕的最上方！</p>\n<p>不过 <strong>又双叒叕</strong> 引申出另一个问题，如果Dialog中存在输入框，需要弹出输入法，我们知道，默认的dialog在输入法弹出的时候会自动被推上去一段距离，可是我们的dialog已经全屏了啊，此时我又写了一个通用扩展方法<code>dialog.pushDialogAboveSoftInput(root, content)</code>其中计算了输入法高度以及NavigationBar高度，来将Dialog xml布局中的<strong>内容view</strong>手动的推上去一段距离。这才勉强算是完成了需求。擦汗…… </p>\n<p>又双叒叕引申出一些关于NavigationBar的坑就不太好处理了</p>\n<h3 id=\"4-奇技淫巧解决办法\"><a href=\"#4-奇技淫巧解决办法\" class=\"headerlink\" title=\"4 奇技淫巧解决办法\"></a>4 奇技淫巧解决办法</h3><p>我们回归问题的原始，又回到最初的起点……   </p>\n<p>是因为dialog的阴影挡住了我们的Alert所以才要将Alert添加到Dialog的Window上去。那么我们可不可以将Dialog的阴影去掉，换成改变Activity的透明度。岂不是绕过了上面的所有问题。☆´∀｀☆</p>\n<p>首先应该设置dialog弹出时候背景不变黑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dialog.window.setDimAmount(0F)</span><br></pre></td></tr></table></figure>\n<p>分别在dialog的show 和 dismiss方法中去改变Activity的透明度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 黑暗 0.0F ~ 1.0F 透明</span><br><span class=\"line\">fun Context.setBackgroundAlpha(alpha: Float) &#123;</span><br><span class=\"line\">    val act = this as? Activity ?: return</span><br><span class=\"line\">    val attributes = act.window.attributes</span><br><span class=\"line\">    attributes.alpha = alpha</span><br><span class=\"line\">    act.window.attributes = attributes</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就把问题控制在了AlertView的层级上了，只需要配合WindowManager，就可以实现Alert不会被背景阴影挡住了。</p>\n<h3 id=\"5-WindowManager-设置Alert层级\"><a href=\"#5-WindowManager-设置Alert层级\" class=\"headerlink\" title=\"5. WindowManager 设置Alert层级\"></a>5. WindowManager 设置Alert层级</h3><p>(╥﹏╥…) </p>\n<p>我们知道Window的显示是有层级顺序的，层级高的覆盖在层级低的Window之上。<br>Activity的层级为 <code>TYPE_APPLICATION</code><br>PopupWindow的层级为<code>TYPE_APPLICATION_PANEL</code><br>而我们只需要添加一个层级为<code>TYPE_APPLICATION_SUB_PANEL</code>的View到Window上面即可</p>\n<blockquote>\n<p>These windows are displayed on top their attached window and any{@link #TYPE_APPLICATION_PANEL} panels.</p>\n</blockquote>\n<p>关于层级顺序详见SDK WindowManager.java</p>\n<p><strong>注!!!</strong><br>使用WindowManager如果是在<strong>层级为2000<code>FIRST_SYSTEM_WINDOW</code></strong>以下的是<strong>不需要</strong>申请弹窗权限的。</p>\n<p>而这种创建出来的Window是依附于Activity的，如果界面被销毁，或者还没有初始化就去使用WindowManager来<code>addView</code>或者<code>removeView</code>会报异常<code>view not attached to window</code></p>\n<p>针对这个问题，做如下控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ((act as? Activity)?.isFinishing == true) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">windowManager.addView(root, layoutParams)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Handler().postDelayed(&#123;</span><br><span class=\"line\">    if (root.isAttachedToWindow &amp;&amp; act?.isFinishing != true) &#123;</span><br><span class=\"line\">        windowManager.removeView(root)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, DURATION_ANIM)</span><br></pre></td></tr></table></figure>\n<p>以及关联Application 的 <code>registerActivityLifecycleCallbacks</code>生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onActivityDestroyed(activity: Activity?) &#123;</span><br><span class=\"line\">    if (root.isAttachedToWindow) &#123;</span><br><span class=\"line\">        windowManager.removeView(root)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-特殊问题\"><a href=\"#6-特殊问题\" class=\"headerlink\" title=\"6 特殊问题\"></a>6 特殊问题</h3><p>在one plus 的 9.0 系统上面 windowManager添加顶部Alert会<strong>被statebar遮挡一部分</strong>  </p>\n<p>解决办法：给WindowManager.LayoutParams添加如下FLAG</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or // 不获取焦点，以便于在弹出的时候 下层界面仍然可以进行操作</span><br><span class=\"line\">        WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or</span><br><span class=\"line\">        WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR // 确保你的内容不会被装饰物(如状态栏)掩盖.</span><br></pre></td></tr></table></figure>\n<h3 id=\"干脆Dialog都不用了直接用PopupWindow\"><a href=\"#干脆Dialog都不用了直接用PopupWindow\" class=\"headerlink\" title=\"干脆Dialog都不用了直接用PopupWindow\"></a>干脆Dialog都不用了直接用PopupWindow</h3><p>我们知道popWindow是与Activity共用同一个Window的，这一点上来讲，非常好控制，配合WindowManager 完全可以实现需求。</p>\n<p><a href=\"https://github.com/o0o0oo00/NewToast\" target=\"_blank\" rel=\"noopener\">代码</a></p>"},{"title":"DSL风格代替Builder模式 fancyDialog","date":"2019-01-08T09:47:15.000Z","_content":"\n# FancyDialog\n## DSL风格代替Builder模式\n\n### 什么是DSL\ndomain specific language / DSL  \nJava使用Builder来构建复杂对象。  \n而Kotlin配合lambad 使用DSL风格 将使复杂对象的构建更加可读，更清晰，更简洁\n\n首先我们要明白`lambda`的几个特性\n\n* 如果`lambda`是函数的最后一个参数，可以放在**括号外面**\n* 如果`lambda`是函数的唯一参数，它可以放在**括号外面**并且**省略括号**\n* 指定接收者的`lambda`\n\n通过`apply(block)` 来配置dialog所需要的参数。而不需要通过不断的`.setXXX`来设置\n\n例如\n\n```\n//  DSL style\ninline fun askDialog(fragmentManager: FragmentManager, dsl: AskDialog.() -> Unit) {\n    AskDialog.newInstance().apply(dsl).show(fragmentManager, \"dialog\")\n}\n```\n使用姿势\n\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"内容\"\n}\n```\n下面提供几种常见的dialog使用形式\n\n<!--more-->\n\n### askDialog\n#### normal\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    sureClick {\n        Toast.makeText(this@MainActivity, \"sure\", Toast.LENGTH_SHORT).show()\n    }\n    cancelClick {\n        Toast.makeText(this@MainActivity, \"cancel\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163051.jpg\" width=\"20%\" height=\"20%\">\n\n#### onlySure\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"摘要vv摘要摘要摘要摘要摘要\"\n    mGravity = Gravity.TOP\n    onlySure = true\n    sureClick {\n        Toast.makeText(this@MainActivity, \"sure\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163103.jpg\" width=\"20%\" height=\"20%\">\n\n### askMoreDialog\n```\naskMoreDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"摘要vv摘要摘要摘要摘要摘要摘要vv摘要摘要摘要摘要摘要\"\n    mColor = Color.RED\n    sureClick(key = \"第一个\") {\n        Toast.makeText(this@MainActivity, \"第一个\", Toast.LENGTH_SHORT).show()\n    }\n    cancelClick(key = \"第二个\") {\n        Toast.makeText(this@MainActivity, \"第二个\", Toast.LENGTH_SHORT).show()\n    }\n    button3Clicks(key = \"第三个\", color = Color.GRAY) {\n        Toast.makeText(this@MainActivity, \"第三个\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163121.jpg\" width=\"20%\" height=\"20%\">\n\n### editDialog\n```\neditDialog(supportFragmentManager) {\n    rightClick {\n        Toast.makeText(this@MainActivity, it, Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163127.jpg\" width=\"20%\" height=\"20%\">\n\n### listDialog\n```\nlateinit var dialog: ListDialog\nval listener = object : ClickListener {\n    override fun onItemLongClick(position: Int, v: View) {\n\n    }\n\n    override fun onItemClick(position: Int, v: View) {\n        dialog.dismiss()\n        Toast.makeText(this@MainActivity, (v.tag as String), Toast.LENGTH_SHORT).show()\n    }\n\n}\ndialog = listDialog {\n    listSetting(listener) {\n        add(\"第一头条\")\n        add(\"第二头条\")\n        add(\"_(:з」∠)_\")\n    }\n}\ndialog.show(supportFragmentManager,\"dialog\")\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90108-153438.jpg\" width=\"20%\" height=\"20%\">\n### customDialog\n待续...\n","source":"_posts/fancyDialog.md","raw":"---\ntitle: DSL风格代替Builder模式 fancyDialog\ndate: 2019-01-08 17:47:15\ntags: 技术\ncategory: 技术\n---\n\n# FancyDialog\n## DSL风格代替Builder模式\n\n### 什么是DSL\ndomain specific language / DSL  \nJava使用Builder来构建复杂对象。  \n而Kotlin配合lambad 使用DSL风格 将使复杂对象的构建更加可读，更清晰，更简洁\n\n首先我们要明白`lambda`的几个特性\n\n* 如果`lambda`是函数的最后一个参数，可以放在**括号外面**\n* 如果`lambda`是函数的唯一参数，它可以放在**括号外面**并且**省略括号**\n* 指定接收者的`lambda`\n\n通过`apply(block)` 来配置dialog所需要的参数。而不需要通过不断的`.setXXX`来设置\n\n例如\n\n```\n//  DSL style\ninline fun askDialog(fragmentManager: FragmentManager, dsl: AskDialog.() -> Unit) {\n    AskDialog.newInstance().apply(dsl).show(fragmentManager, \"dialog\")\n}\n```\n使用姿势\n\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"内容\"\n}\n```\n下面提供几种常见的dialog使用形式\n\n<!--more-->\n\n### askDialog\n#### normal\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    sureClick {\n        Toast.makeText(this@MainActivity, \"sure\", Toast.LENGTH_SHORT).show()\n    }\n    cancelClick {\n        Toast.makeText(this@MainActivity, \"cancel\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163051.jpg\" width=\"20%\" height=\"20%\">\n\n#### onlySure\n```\naskDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"摘要vv摘要摘要摘要摘要摘要\"\n    mGravity = Gravity.TOP\n    onlySure = true\n    sureClick {\n        Toast.makeText(this@MainActivity, \"sure\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163103.jpg\" width=\"20%\" height=\"20%\">\n\n### askMoreDialog\n```\naskMoreDialog(supportFragmentManager) {\n    mTitle = \"标题\"\n    mMessage = \"摘要vv摘要摘要摘要摘要摘要摘要vv摘要摘要摘要摘要摘要\"\n    mColor = Color.RED\n    sureClick(key = \"第一个\") {\n        Toast.makeText(this@MainActivity, \"第一个\", Toast.LENGTH_SHORT).show()\n    }\n    cancelClick(key = \"第二个\") {\n        Toast.makeText(this@MainActivity, \"第二个\", Toast.LENGTH_SHORT).show()\n    }\n    button3Clicks(key = \"第三个\", color = Color.GRAY) {\n        Toast.makeText(this@MainActivity, \"第三个\", Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163121.jpg\" width=\"20%\" height=\"20%\">\n\n### editDialog\n```\neditDialog(supportFragmentManager) {\n    rightClick {\n        Toast.makeText(this@MainActivity, it, Toast.LENGTH_SHORT).show()\n    }\n}\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163127.jpg\" width=\"20%\" height=\"20%\">\n\n### listDialog\n```\nlateinit var dialog: ListDialog\nval listener = object : ClickListener {\n    override fun onItemLongClick(position: Int, v: View) {\n\n    }\n\n    override fun onItemClick(position: Int, v: View) {\n        dialog.dismiss()\n        Toast.makeText(this@MainActivity, (v.tag as String), Toast.LENGTH_SHORT).show()\n    }\n\n}\ndialog = listDialog {\n    listSetting(listener) {\n        add(\"第一头条\")\n        add(\"第二头条\")\n        add(\"_(:з」∠)_\")\n    }\n}\ndialog.show(supportFragmentManager,\"dialog\")\n```\n<img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90108-153438.jpg\" width=\"20%\" height=\"20%\">\n### customDialog\n待续...\n","slug":"fancyDialog","published":1,"updated":"2019-01-08T09:55:00.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydn7000for26fe0dh9xz","content":"<h1 id=\"FancyDialog\"><a href=\"#FancyDialog\" class=\"headerlink\" title=\"FancyDialog\"></a>FancyDialog</h1><h2 id=\"DSL风格代替Builder模式\"><a href=\"#DSL风格代替Builder模式\" class=\"headerlink\" title=\"DSL风格代替Builder模式\"></a>DSL风格代替Builder模式</h2><h3 id=\"什么是DSL\"><a href=\"#什么是DSL\" class=\"headerlink\" title=\"什么是DSL\"></a>什么是DSL</h3><p>domain specific language / DSL<br>Java使用Builder来构建复杂对象。<br>而Kotlin配合lambad 使用DSL风格 将使复杂对象的构建更加可读，更清晰，更简洁</p>\n<p>首先我们要明白<code>lambda</code>的几个特性</p>\n<ul>\n<li>如果<code>lambda</code>是函数的最后一个参数，可以放在<strong>括号外面</strong></li>\n<li>如果<code>lambda</code>是函数的唯一参数，它可以放在<strong>括号外面</strong>并且<strong>省略括号</strong></li>\n<li>指定接收者的<code>lambda</code></li>\n</ul>\n<p>通过<code>apply(block)</code> 来配置dialog所需要的参数。而不需要通过不断的<code>.setXXX</code>来设置</p>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  DSL style</span><br><span class=\"line\">inline fun askDialog(fragmentManager: FragmentManager, dsl: AskDialog.() -&gt; Unit) &#123;</span><br><span class=\"line\">    AskDialog.newInstance().apply(dsl).show(fragmentManager, &quot;dialog&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用姿势</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;内容&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面提供几种常见的dialog使用形式</p>\n<a id=\"more\"></a>\n<h3 id=\"askDialog\"><a href=\"#askDialog\" class=\"headerlink\" title=\"askDialog\"></a>askDialog</h3><h4 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    sureClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;sure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cancelClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;cancel&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163051.jpg\" width=\"20%\" height=\"20%\"></p>\n<h4 id=\"onlySure\"><a href=\"#onlySure\" class=\"headerlink\" title=\"onlySure\"></a>onlySure</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;摘要vv摘要摘要摘要摘要摘要&quot;</span><br><span class=\"line\">    mGravity = Gravity.TOP</span><br><span class=\"line\">    onlySure = true</span><br><span class=\"line\">    sureClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;sure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163103.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"askMoreDialog\"><a href=\"#askMoreDialog\" class=\"headerlink\" title=\"askMoreDialog\"></a>askMoreDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askMoreDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;摘要vv摘要摘要摘要摘要摘要摘要vv摘要摘要摘要摘要摘要&quot;</span><br><span class=\"line\">    mColor = Color.RED</span><br><span class=\"line\">    sureClick(key = &quot;第一个&quot;) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第一个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cancelClick(key = &quot;第二个&quot;) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第二个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    button3Clicks(key = &quot;第三个&quot;, color = Color.GRAY) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第三个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163121.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"editDialog\"><a href=\"#editDialog\" class=\"headerlink\" title=\"editDialog\"></a>editDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">editDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    rightClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163127.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"listDialog\"><a href=\"#listDialog\" class=\"headerlink\" title=\"listDialog\"></a>listDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var dialog: ListDialog</span><br><span class=\"line\">val listener = object : ClickListener &#123;</span><br><span class=\"line\">    override fun onItemLongClick(position: Int, v: View) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onItemClick(position: Int, v: View) &#123;</span><br><span class=\"line\">        dialog.dismiss()</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, (v.tag as String), Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dialog = listDialog &#123;</span><br><span class=\"line\">    listSetting(listener) &#123;</span><br><span class=\"line\">        add(&quot;第一头条&quot;)</span><br><span class=\"line\">        add(&quot;第二头条&quot;)</span><br><span class=\"line\">        add(&quot;_(:з」∠)_&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dialog.show(supportFragmentManager,&quot;dialog&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90108-153438.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"customDialog\"><a href=\"#customDialog\" class=\"headerlink\" title=\"customDialog\"></a>customDialog</h3><p>待续…</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"FancyDialog\"><a href=\"#FancyDialog\" class=\"headerlink\" title=\"FancyDialog\"></a>FancyDialog</h1><h2 id=\"DSL风格代替Builder模式\"><a href=\"#DSL风格代替Builder模式\" class=\"headerlink\" title=\"DSL风格代替Builder模式\"></a>DSL风格代替Builder模式</h2><h3 id=\"什么是DSL\"><a href=\"#什么是DSL\" class=\"headerlink\" title=\"什么是DSL\"></a>什么是DSL</h3><p>domain specific language / DSL<br>Java使用Builder来构建复杂对象。<br>而Kotlin配合lambad 使用DSL风格 将使复杂对象的构建更加可读，更清晰，更简洁</p>\n<p>首先我们要明白<code>lambda</code>的几个特性</p>\n<ul>\n<li>如果<code>lambda</code>是函数的最后一个参数，可以放在<strong>括号外面</strong></li>\n<li>如果<code>lambda</code>是函数的唯一参数，它可以放在<strong>括号外面</strong>并且<strong>省略括号</strong></li>\n<li>指定接收者的<code>lambda</code></li>\n</ul>\n<p>通过<code>apply(block)</code> 来配置dialog所需要的参数。而不需要通过不断的<code>.setXXX</code>来设置</p>\n<p>例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  DSL style</span><br><span class=\"line\">inline fun askDialog(fragmentManager: FragmentManager, dsl: AskDialog.() -&gt; Unit) &#123;</span><br><span class=\"line\">    AskDialog.newInstance().apply(dsl).show(fragmentManager, &quot;dialog&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用姿势</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;内容&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面提供几种常见的dialog使用形式</p>","more":"<h3 id=\"askDialog\"><a href=\"#askDialog\" class=\"headerlink\" title=\"askDialog\"></a>askDialog</h3><h4 id=\"normal\"><a href=\"#normal\" class=\"headerlink\" title=\"normal\"></a>normal</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    sureClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;sure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cancelClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;cancel&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163051.jpg\" width=\"20%\" height=\"20%\"></p>\n<h4 id=\"onlySure\"><a href=\"#onlySure\" class=\"headerlink\" title=\"onlySure\"></a>onlySure</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;摘要vv摘要摘要摘要摘要摘要&quot;</span><br><span class=\"line\">    mGravity = Gravity.TOP</span><br><span class=\"line\">    onlySure = true</span><br><span class=\"line\">    sureClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;sure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163103.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"askMoreDialog\"><a href=\"#askMoreDialog\" class=\"headerlink\" title=\"askMoreDialog\"></a>askMoreDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">askMoreDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    mTitle = &quot;标题&quot;</span><br><span class=\"line\">    mMessage = &quot;摘要vv摘要摘要摘要摘要摘要摘要vv摘要摘要摘要摘要摘要&quot;</span><br><span class=\"line\">    mColor = Color.RED</span><br><span class=\"line\">    sureClick(key = &quot;第一个&quot;) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第一个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cancelClick(key = &quot;第二个&quot;) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第二个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    button3Clicks(key = &quot;第三个&quot;, color = Color.GRAY) &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, &quot;第三个&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163121.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"editDialog\"><a href=\"#editDialog\" class=\"headerlink\" title=\"editDialog\"></a>editDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">editDialog(supportFragmentManager) &#123;</span><br><span class=\"line\">    rightClick &#123;</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, it, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90102-163127.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"listDialog\"><a href=\"#listDialog\" class=\"headerlink\" title=\"listDialog\"></a>listDialog</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lateinit var dialog: ListDialog</span><br><span class=\"line\">val listener = object : ClickListener &#123;</span><br><span class=\"line\">    override fun onItemLongClick(position: Int, v: View) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun onItemClick(position: Int, v: View) &#123;</span><br><span class=\"line\">        dialog.dismiss()</span><br><span class=\"line\">        Toast.makeText(this@MainActivity, (v.tag as String), Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dialog = listDialog &#123;</span><br><span class=\"line\">    listSetting(listener) &#123;</span><br><span class=\"line\">        add(&quot;第一头条&quot;)</span><br><span class=\"line\">        add(&quot;第二头条&quot;)</span><br><span class=\"line\">        add(&quot;_(:з」∠)_&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dialog.show(supportFragmentManager,&quot;dialog&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/o0o0oo00/FancyDialog/master/mdimage/S90108-153438.jpg\" width=\"20%\" height=\"20%\"></p>\n<h3 id=\"customDialog\"><a href=\"#customDialog\" class=\"headerlink\" title=\"customDialog\"></a>customDialog</h3><p>待续…</p>"},{"title":"RecyclerView.ItemDecoration() 的用法与技巧","date":"2018-12-18T10:06:32.000Z","_content":"## ItemDecoration\n\nAs we all know but how to use\n\n#### 主要明白其中**重写的三个方法**\n分别是：  \n`getItemOffsets`只负责规定绘制区域  \n`onDrawOver`负责绘制，显示在Item视图之上  \n`onDraw`负责绘制，显示在Item视图之下  \n\n<!--more-->\n\n```\nNo.1\n通过设置outRect 来实现Item分割线的绘制范围\n\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {\n    super.getItemOffsets(outRect, view, parent, state)\n    outRect.set(Rect(0, margin, 0, 0))\n}\n\n```\n设置Item的偏移量 也就是绘制的分割线范围[在这里](https://juejin.im/post/59099fe844d904006942a983)  \n\n\n#### 参数解析\n\n```\n* @param outRect Rect to receive the output.\n* @param view    The child view to decorate\n* @param parent  RecyclerView this ItemDecoration is decorating\n* @param state   The current state of RecyclerView.\n```\n#### 如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\n\n```\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {\n\tsuper.getItemOffsets(outRect, view, parent, state)\n\tval childAdapterPosition = parent.getChildAdapterPosition(view)\n\twhen (childAdapterPosition) {\n\t    0 -> outRect.set(Rect(0, margin, 0, 0))\n\t    1 -> outRect.set(Rect(0, 0, 0, margin))\n\t    else -> outRect.set(Rect())\n\t}\n}\n```\n\n**注意!!**，如果想在这个方法中通过`parent.childCount`来获取到子view的数量，是**不可以**的，我觉得是因为addView的时候就已经走到了`getItemOffsets `这个方法，所以结果就是**第一次**走到这个方法的时候`parent.childCount`就是**1**，**第二次**走到这个方法的时候`parent.childCount`就是**2**。\n\n\n```\nNo.2 会被Item视图覆盖掉\n\noverride fun onDraw(c: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) {\n    super.onDraw(c, parent, state)\n}\n```\n \n#### 参数解析 下同\n```\n* @param c Canvas to draw into\n* @param parent RecyclerView this ItemDecoration is drawing into\n* @param state The current state of RecyclerView\n```\n\n这样就**仅仅是**在第二个Item上画了一个底部分割线 \n\n```\nNo.3 将覆盖Item视图\n\noverride fun onDrawOver(canvas: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) {\n    if (parent == null || null == canvas) {\n        return\n    }\n    val index = parent.childCount - 2\n    val child = parent.getChildAt(index)\n    val left = 0f\n    val right = child.right.toFloat()\n    val top = (child.bottom - offset).toFloat()\n    val bottom = child.bottom.toFloat()\n    val rect = RectF(left, top, right, bottom)\n    canvas.drawRect(rect, paint.apply { color = color })\n}\n```","source":"_posts/decoration.md","raw":"---\ntitle: RecyclerView.ItemDecoration() 的用法与技巧\ndate: 2018-12-18 18:06:32\ncategory: 技术\ntags:\n---\n## ItemDecoration\n\nAs we all know but how to use\n\n#### 主要明白其中**重写的三个方法**\n分别是：  \n`getItemOffsets`只负责规定绘制区域  \n`onDrawOver`负责绘制，显示在Item视图之上  \n`onDraw`负责绘制，显示在Item视图之下  \n\n<!--more-->\n\n```\nNo.1\n通过设置outRect 来实现Item分割线的绘制范围\n\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {\n    super.getItemOffsets(outRect, view, parent, state)\n    outRect.set(Rect(0, margin, 0, 0))\n}\n\n```\n设置Item的偏移量 也就是绘制的分割线范围[在这里](https://juejin.im/post/59099fe844d904006942a983)  \n\n\n#### 参数解析\n\n```\n* @param outRect Rect to receive the output.\n* @param view    The child view to decorate\n* @param parent  RecyclerView this ItemDecoration is decorating\n* @param state   The current state of RecyclerView.\n```\n#### 如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\n\n```\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) {\n\tsuper.getItemOffsets(outRect, view, parent, state)\n\tval childAdapterPosition = parent.getChildAdapterPosition(view)\n\twhen (childAdapterPosition) {\n\t    0 -> outRect.set(Rect(0, margin, 0, 0))\n\t    1 -> outRect.set(Rect(0, 0, 0, margin))\n\t    else -> outRect.set(Rect())\n\t}\n}\n```\n\n**注意!!**，如果想在这个方法中通过`parent.childCount`来获取到子view的数量，是**不可以**的，我觉得是因为addView的时候就已经走到了`getItemOffsets `这个方法，所以结果就是**第一次**走到这个方法的时候`parent.childCount`就是**1**，**第二次**走到这个方法的时候`parent.childCount`就是**2**。\n\n\n```\nNo.2 会被Item视图覆盖掉\n\noverride fun onDraw(c: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) {\n    super.onDraw(c, parent, state)\n}\n```\n \n#### 参数解析 下同\n```\n* @param c Canvas to draw into\n* @param parent RecyclerView this ItemDecoration is drawing into\n* @param state The current state of RecyclerView\n```\n\n这样就**仅仅是**在第二个Item上画了一个底部分割线 \n\n```\nNo.3 将覆盖Item视图\n\noverride fun onDrawOver(canvas: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) {\n    if (parent == null || null == canvas) {\n        return\n    }\n    val index = parent.childCount - 2\n    val child = parent.getChildAt(index)\n    val left = 0f\n    val right = child.right.toFloat()\n    val top = (child.bottom - offset).toFloat()\n    val bottom = child.bottom.toFloat()\n    val rect = RectF(left, top, right, bottom)\n    canvas.drawRect(rect, paint.apply { color = color })\n}\n```","slug":"decoration","published":1,"updated":"2018-12-18T10:16:03.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydn9000hor26uxgsm23i","content":"<h2 id=\"ItemDecoration\"><a href=\"#ItemDecoration\" class=\"headerlink\" title=\"ItemDecoration\"></a>ItemDecoration</h2><p>As we all know but how to use</p>\n<h4 id=\"主要明白其中重写的三个方法\"><a href=\"#主要明白其中重写的三个方法\" class=\"headerlink\" title=\"主要明白其中重写的三个方法\"></a>主要明白其中<strong>重写的三个方法</strong></h4><p>分别是：<br><code>getItemOffsets</code>只负责规定绘制区域<br><code>onDrawOver</code>负责绘制，显示在Item视图之上<br><code>onDraw</code>负责绘制，显示在Item视图之下  </p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.1</span><br><span class=\"line\">通过设置outRect 来实现Item分割线的绘制范围</span><br><span class=\"line\"></span><br><span class=\"line\">override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    super.getItemOffsets(outRect, view, parent, state)</span><br><span class=\"line\">    outRect.set(Rect(0, margin, 0, 0))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置Item的偏移量 也就是绘制的分割线范围<a href=\"https://juejin.im/post/59099fe844d904006942a983\" target=\"_blank\" rel=\"noopener\">在这里</a>  </p>\n<h4 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @param outRect Rect to receive the output.</span><br><span class=\"line\">* @param view    The child view to decorate</span><br><span class=\"line\">* @param parent  RecyclerView this ItemDecoration is decorating</span><br><span class=\"line\">* @param state   The current state of RecyclerView.</span><br></pre></td></tr></table></figure>\n<h4 id=\"如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\"><a href=\"#如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\" class=\"headerlink\" title=\"如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\"></a>如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">\tsuper.getItemOffsets(outRect, view, parent, state)</span><br><span class=\"line\">\tval childAdapterPosition = parent.getChildAdapterPosition(view)</span><br><span class=\"line\">\twhen (childAdapterPosition) &#123;</span><br><span class=\"line\">\t    0 -&gt; outRect.set(Rect(0, margin, 0, 0))</span><br><span class=\"line\">\t    1 -&gt; outRect.set(Rect(0, 0, 0, margin))</span><br><span class=\"line\">\t    else -&gt; outRect.set(Rect())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意!!</strong>，如果想在这个方法中通过<code>parent.childCount</code>来获取到子view的数量，是<strong>不可以</strong>的，我觉得是因为addView的时候就已经走到了<code>getItemOffsets</code>这个方法，所以结果就是<strong>第一次</strong>走到这个方法的时候<code>parent.childCount</code>就是<strong>1</strong>，<strong>第二次</strong>走到这个方法的时候<code>parent.childCount</code>就是<strong>2</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.2 会被Item视图覆盖掉</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDraw(c: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    super.onDraw(c, parent, state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参数解析-下同\"><a href=\"#参数解析-下同\" class=\"headerlink\" title=\"参数解析 下同\"></a>参数解析 下同</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @param c Canvas to draw into</span><br><span class=\"line\">* @param parent RecyclerView this ItemDecoration is drawing into</span><br><span class=\"line\">* @param state The current state of RecyclerView</span><br></pre></td></tr></table></figure>\n<p>这样就<strong>仅仅是</strong>在第二个Item上画了一个底部分割线 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.3 将覆盖Item视图</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDrawOver(canvas: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    if (parent == null || null == canvas) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val index = parent.childCount - 2</span><br><span class=\"line\">    val child = parent.getChildAt(index)</span><br><span class=\"line\">    val left = 0f</span><br><span class=\"line\">    val right = child.right.toFloat()</span><br><span class=\"line\">    val top = (child.bottom - offset).toFloat()</span><br><span class=\"line\">    val bottom = child.bottom.toFloat()</span><br><span class=\"line\">    val rect = RectF(left, top, right, bottom)</span><br><span class=\"line\">    canvas.drawRect(rect, paint.apply &#123; color = color &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"ItemDecoration\"><a href=\"#ItemDecoration\" class=\"headerlink\" title=\"ItemDecoration\"></a>ItemDecoration</h2><p>As we all know but how to use</p>\n<h4 id=\"主要明白其中重写的三个方法\"><a href=\"#主要明白其中重写的三个方法\" class=\"headerlink\" title=\"主要明白其中重写的三个方法\"></a>主要明白其中<strong>重写的三个方法</strong></h4><p>分别是：<br><code>getItemOffsets</code>只负责规定绘制区域<br><code>onDrawOver</code>负责绘制，显示在Item视图之上<br><code>onDraw</code>负责绘制，显示在Item视图之下  </p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.1</span><br><span class=\"line\">通过设置outRect 来实现Item分割线的绘制范围</span><br><span class=\"line\"></span><br><span class=\"line\">override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    super.getItemOffsets(outRect, view, parent, state)</span><br><span class=\"line\">    outRect.set(Rect(0, margin, 0, 0))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置Item的偏移量 也就是绘制的分割线范围<a href=\"https://juejin.im/post/59099fe844d904006942a983\" target=\"_blank\" rel=\"noopener\">在这里</a>  </p>\n<h4 id=\"参数解析\"><a href=\"#参数解析\" class=\"headerlink\" title=\"参数解析\"></a>参数解析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @param outRect Rect to receive the output.</span><br><span class=\"line\">* @param view    The child view to decorate</span><br><span class=\"line\">* @param parent  RecyclerView this ItemDecoration is decorating</span><br><span class=\"line\">* @param state   The current state of RecyclerView.</span><br></pre></td></tr></table></figure>\n<h4 id=\"如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\"><a href=\"#如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\" class=\"headerlink\" title=\"如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制\"></a>如果我想指定分割线在第一个Item的上面绘制，第二个Item的下面绘制，其他的Item不绘制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">\tsuper.getItemOffsets(outRect, view, parent, state)</span><br><span class=\"line\">\tval childAdapterPosition = parent.getChildAdapterPosition(view)</span><br><span class=\"line\">\twhen (childAdapterPosition) &#123;</span><br><span class=\"line\">\t    0 -&gt; outRect.set(Rect(0, margin, 0, 0))</span><br><span class=\"line\">\t    1 -&gt; outRect.set(Rect(0, 0, 0, margin))</span><br><span class=\"line\">\t    else -&gt; outRect.set(Rect())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意!!</strong>，如果想在这个方法中通过<code>parent.childCount</code>来获取到子view的数量，是<strong>不可以</strong>的，我觉得是因为addView的时候就已经走到了<code>getItemOffsets</code>这个方法，所以结果就是<strong>第一次</strong>走到这个方法的时候<code>parent.childCount</code>就是<strong>1</strong>，<strong>第二次</strong>走到这个方法的时候<code>parent.childCount</code>就是<strong>2</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.2 会被Item视图覆盖掉</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDraw(c: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    super.onDraw(c, parent, state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参数解析-下同\"><a href=\"#参数解析-下同\" class=\"headerlink\" title=\"参数解析 下同\"></a>参数解析 下同</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* @param c Canvas to draw into</span><br><span class=\"line\">* @param parent RecyclerView this ItemDecoration is drawing into</span><br><span class=\"line\">* @param state The current state of RecyclerView</span><br></pre></td></tr></table></figure>\n<p>这样就<strong>仅仅是</strong>在第二个Item上画了一个底部分割线 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No.3 将覆盖Item视图</span><br><span class=\"line\"></span><br><span class=\"line\">override fun onDrawOver(canvas: Canvas?, parent: RecyclerView?, state: RecyclerView.State?) &#123;</span><br><span class=\"line\">    if (parent == null || null == canvas) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val index = parent.childCount - 2</span><br><span class=\"line\">    val child = parent.getChildAt(index)</span><br><span class=\"line\">    val left = 0f</span><br><span class=\"line\">    val right = child.right.toFloat()</span><br><span class=\"line\">    val top = (child.bottom - offset).toFloat()</span><br><span class=\"line\">    val bottom = child.bottom.toFloat()</span><br><span class=\"line\">    val rect = RectF(left, top, right, bottom)</span><br><span class=\"line\">    canvas.drawRect(rect, paint.apply &#123; color = color &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"泛型简述","date":"2018-10-11T08:48:12.000Z","_content":"### 泛型\n泛型还有一种较为准确的说法就是为了参数化类型，或者说可以将类型当作参数传递给一个类或者是方法。  \n看一个例子，证明为什么要有泛型\n<!--more-->\n\n``` \nclass Cache {\nvar value: Any? = null\n}\n```\n\n我们操作数据的时候是酱紫的\n\n```        \nCache cache = new Cache();\ncache.setValue(\"123\");\nString str = (String) cache.getValue();\n\n```\n显然需要一个强制类型转换才能取出理想的数据。\n我们来看使用泛型的情况\n\n```\nclass Cache<T> {\nvar value: T? = null\n}\n\nCache<String> cache = new Cache<String>();\ncache.setValue(\"123\");\nString str =cache.getValue();\n```\n你看，不用强制类型转换了吧~而且泛型可以传入任何一种想要的类型\n泛型可以将类型参数化，但是参数一旦确定好，如果类似不匹配，编译器就不通过。  \n**好处：**  \n1. 它提供了一种扩展能力  \n2. 它是一种类型安全检测机制  \n3. 泛型提高了程序代码的可读性  \n\n#### 按照使用方式\n1. 泛型类。 \n2. 泛型方法。 \n3. 泛型接口。\n\n**定义一个泛型类,理论上这个ZCY可以是任何**\n\n```\nclass Cache<ZCY> {\nvar value: ZCY? = null\n}\n```\n\n```\nclass Cache<ZCY1,ZCY2> {\nvar value: ZCY1? = null\nvar value2: ZCY2? = null\n}\n```\n\n但出于规范的目的，Java 还是建议我们用单个大写字母来代表类型参数。常见的如：\n\n1. T 代表一般的任何类。 \n2. E 代表 Element 的意思，或者 Exception 异常的意思。 \n3. K 代表 Key 的意思。 \n4. V 代表 Value 的意思，通常与 K 一起配合使用。 \n5. S 代表 Subtype 的意思\n\n**泛型方法**  \n泛型方法所定义的泛型与其所在类的泛型互相不冲突，类的ZCY可以是String类型，而方法的ZCY可以是Int类型，它只是一泛泛的类型而已\n\n```\nfun someThing(some: ZCY2): ZCY1? {\nreturn null\n}\n\n或者\n@Throws(IllegalAccessException::class, InstantiationException::class)\nfun <T> fun1(t: Class<T>): T {\nreturn t.newInstance()\n}\n\n```\n#### 通配符\n除了用` <T> `表示泛型外，还有 `<?>` 这种形式。`？` 被称为通配符。  \n有需求说希望泛型可以处理某一范围内的数据类型，比如某个类和他的子类  \n##### 三种形式的通配符\n\n如果存在了通配符，那么它就丧失了“写”的能力，因为它属于未知类型。\n下面的编译是不会通过的\n\n```\nList<?> test1 = new ArrayList<>();\ntest1.add(\"123\"));\ntest1.add(123);\n\n```\n于是乎，通配符用来指明泛型**范围**、**边界**\n\n1. <?> 被称作无限定的通配符。\n2. <? extends T> 被称作有上限的通配符。\n3. <? super T> 被称作有下限的通配符。 \n\n时常（哦不，应该是一直）搞不懂他俩的区别  \nFor Example:\n\n```\nPlate<Fruit> plate = new Plate<Apple>(new Apple());\n```\n这样子是不能通过编译的，**因为一个装苹果的盘子不能变成一个装水果的盘子**。沙雕玩意 ┐(ﾟ～ﾟ)┌ \n就算容器里装的东西之间有继承关系，但容器之间是没有继承关系的。所以我们不能像`Fruit fruit = new Apple();`这么样写。\n\n**有上限通配符**：   \n`Plate<？ extends Fruit>`\n就是说水果以及水果的子类可以放进盘子里面。\n\n```\nPlate<? extends Fruit> plate = new Plate<Apple>(new Apple());\n```\n此时我们发现set方法失效了，原因是编辑器只知道可以set进去Fruit和它的子类，但是具体的类型不知道，可能是Apple，可能是Banana、Orange。所以就不允许。（可是为什么构造方法可以啊？摊手┑(￣Д ￣)┍）  \n**那么我们就可以得出结论 `？`代表我知道它是一个东西，具体是什么我不知道**  \n\n**有下限通配符**：  \n`Plate<? super Fruit>`就是水果以及水果的父类（食物）可以放进盘子里面\n\n```\nPlate<? super Fruit> plate = new Plate<Fruit>(new Fruit());\nplate.set(new Apple());\nplate.set(new Fruit());\nplate.set(new Food());//报错\nObject o = plate.get();\n```\n我们可以看到，水果（Apple 或者 Fruit）可以放进盘子里面，但是Food这一行会报错的，**因为食物Food不一定是水果**，也可能是肉、蔬菜，所以它不能放盘子里面。  \n下限通配符，放开了存储，但是取出来的话就会失效一部分，因为取出来的不知道到底是什么类型，Apple? Fruit? Banana? 不确定 **所以只能用Object来接收**，这样就把元素的类型信息丢掉了。 (●ﾟωﾟ●)\n\n##### PECS:  \n\n* 频繁往外读取内容的，适合用上界Extends。\n* 经常往里插入的，适合用下界Super。\n\n#### 类型擦除\n\njava中的泛型，是相对于**编辑器**阶段的，在**编译**期间java的字节码中是不包含泛型信息的。\n\n看一段代码，这段代码的结果是true，是因为在进入JVM之前，与泛型相关的信息，T 会被类型擦除，无论 T 是String，还是Integer都被替换成了Object，如果指定了上限<? extends String>那么就会被擦除成上限String。\n\n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n\n**Attention**  \n泛型类或者泛型方法中，不接受 8 种基本数据类型。要接受也是他们的包装类。  \n","source":"_posts/fx.md","raw":"---\ntitle: 泛型简述\ndate: 2018-10-11 16:48:12\ncategories: 技术\n---\n### 泛型\n泛型还有一种较为准确的说法就是为了参数化类型，或者说可以将类型当作参数传递给一个类或者是方法。  \n看一个例子，证明为什么要有泛型\n<!--more-->\n\n``` \nclass Cache {\nvar value: Any? = null\n}\n```\n\n我们操作数据的时候是酱紫的\n\n```        \nCache cache = new Cache();\ncache.setValue(\"123\");\nString str = (String) cache.getValue();\n\n```\n显然需要一个强制类型转换才能取出理想的数据。\n我们来看使用泛型的情况\n\n```\nclass Cache<T> {\nvar value: T? = null\n}\n\nCache<String> cache = new Cache<String>();\ncache.setValue(\"123\");\nString str =cache.getValue();\n```\n你看，不用强制类型转换了吧~而且泛型可以传入任何一种想要的类型\n泛型可以将类型参数化，但是参数一旦确定好，如果类似不匹配，编译器就不通过。  \n**好处：**  \n1. 它提供了一种扩展能力  \n2. 它是一种类型安全检测机制  \n3. 泛型提高了程序代码的可读性  \n\n#### 按照使用方式\n1. 泛型类。 \n2. 泛型方法。 \n3. 泛型接口。\n\n**定义一个泛型类,理论上这个ZCY可以是任何**\n\n```\nclass Cache<ZCY> {\nvar value: ZCY? = null\n}\n```\n\n```\nclass Cache<ZCY1,ZCY2> {\nvar value: ZCY1? = null\nvar value2: ZCY2? = null\n}\n```\n\n但出于规范的目的，Java 还是建议我们用单个大写字母来代表类型参数。常见的如：\n\n1. T 代表一般的任何类。 \n2. E 代表 Element 的意思，或者 Exception 异常的意思。 \n3. K 代表 Key 的意思。 \n4. V 代表 Value 的意思，通常与 K 一起配合使用。 \n5. S 代表 Subtype 的意思\n\n**泛型方法**  \n泛型方法所定义的泛型与其所在类的泛型互相不冲突，类的ZCY可以是String类型，而方法的ZCY可以是Int类型，它只是一泛泛的类型而已\n\n```\nfun someThing(some: ZCY2): ZCY1? {\nreturn null\n}\n\n或者\n@Throws(IllegalAccessException::class, InstantiationException::class)\nfun <T> fun1(t: Class<T>): T {\nreturn t.newInstance()\n}\n\n```\n#### 通配符\n除了用` <T> `表示泛型外，还有 `<?>` 这种形式。`？` 被称为通配符。  \n有需求说希望泛型可以处理某一范围内的数据类型，比如某个类和他的子类  \n##### 三种形式的通配符\n\n如果存在了通配符，那么它就丧失了“写”的能力，因为它属于未知类型。\n下面的编译是不会通过的\n\n```\nList<?> test1 = new ArrayList<>();\ntest1.add(\"123\"));\ntest1.add(123);\n\n```\n于是乎，通配符用来指明泛型**范围**、**边界**\n\n1. <?> 被称作无限定的通配符。\n2. <? extends T> 被称作有上限的通配符。\n3. <? super T> 被称作有下限的通配符。 \n\n时常（哦不，应该是一直）搞不懂他俩的区别  \nFor Example:\n\n```\nPlate<Fruit> plate = new Plate<Apple>(new Apple());\n```\n这样子是不能通过编译的，**因为一个装苹果的盘子不能变成一个装水果的盘子**。沙雕玩意 ┐(ﾟ～ﾟ)┌ \n就算容器里装的东西之间有继承关系，但容器之间是没有继承关系的。所以我们不能像`Fruit fruit = new Apple();`这么样写。\n\n**有上限通配符**：   \n`Plate<？ extends Fruit>`\n就是说水果以及水果的子类可以放进盘子里面。\n\n```\nPlate<? extends Fruit> plate = new Plate<Apple>(new Apple());\n```\n此时我们发现set方法失效了，原因是编辑器只知道可以set进去Fruit和它的子类，但是具体的类型不知道，可能是Apple，可能是Banana、Orange。所以就不允许。（可是为什么构造方法可以啊？摊手┑(￣Д ￣)┍）  \n**那么我们就可以得出结论 `？`代表我知道它是一个东西，具体是什么我不知道**  \n\n**有下限通配符**：  \n`Plate<? super Fruit>`就是水果以及水果的父类（食物）可以放进盘子里面\n\n```\nPlate<? super Fruit> plate = new Plate<Fruit>(new Fruit());\nplate.set(new Apple());\nplate.set(new Fruit());\nplate.set(new Food());//报错\nObject o = plate.get();\n```\n我们可以看到，水果（Apple 或者 Fruit）可以放进盘子里面，但是Food这一行会报错的，**因为食物Food不一定是水果**，也可能是肉、蔬菜，所以它不能放盘子里面。  \n下限通配符，放开了存储，但是取出来的话就会失效一部分，因为取出来的不知道到底是什么类型，Apple? Fruit? Banana? 不确定 **所以只能用Object来接收**，这样就把元素的类型信息丢掉了。 (●ﾟωﾟ●)\n\n##### PECS:  \n\n* 频繁往外读取内容的，适合用上界Extends。\n* 经常往里插入的，适合用下界Super。\n\n#### 类型擦除\n\njava中的泛型，是相对于**编辑器**阶段的，在**编译**期间java的字节码中是不包含泛型信息的。\n\n看一段代码，这段代码的结果是true，是因为在进入JVM之前，与泛型相关的信息，T 会被类型擦除，无论 T 是String，还是Integer都被替换成了Object，如果指定了上限<? extends String>那么就会被擦除成上限String。\n\n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n\n**Attention**  \n泛型类或者泛型方法中，不接受 8 种基本数据类型。要接受也是他们的包装类。  \n","slug":"fx","published":1,"updated":"2018-10-11T08:50:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydnb000lor26hfg1d15k","content":"<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>泛型还有一种较为准确的说法就是为了参数化类型，或者说可以将类型当作参数传递给一个类或者是方法。<br>看一个例子，证明为什么要有泛型<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache &#123;</span><br><span class=\"line\">var value: Any? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们操作数据的时候是酱紫的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache cache = new Cache();</span><br><span class=\"line\">cache.setValue(&quot;123&quot;);</span><br><span class=\"line\">String str = (String) cache.getValue();</span><br></pre></td></tr></table></figure>\n<p>显然需要一个强制类型转换才能取出理想的数据。<br>我们来看使用泛型的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;T&gt; &#123;</span><br><span class=\"line\">var value: T? = null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cache&lt;String&gt; cache = new Cache&lt;String&gt;();</span><br><span class=\"line\">cache.setValue(&quot;123&quot;);</span><br><span class=\"line\">String str =cache.getValue();</span><br></pre></td></tr></table></figure>\n<p>你看，不用强制类型转换了吧~而且泛型可以传入任何一种想要的类型<br>泛型可以将类型参数化，但是参数一旦确定好，如果类似不匹配，编译器就不通过。<br><strong>好处：</strong>  </p>\n<ol>\n<li>它提供了一种扩展能力  </li>\n<li>它是一种类型安全检测机制  </li>\n<li>泛型提高了程序代码的可读性  </li>\n</ol>\n<h4 id=\"按照使用方式\"><a href=\"#按照使用方式\" class=\"headerlink\" title=\"按照使用方式\"></a>按照使用方式</h4><ol>\n<li>泛型类。 </li>\n<li>泛型方法。 </li>\n<li>泛型接口。</li>\n</ol>\n<p><strong>定义一个泛型类,理论上这个ZCY可以是任何</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;ZCY&gt; &#123;</span><br><span class=\"line\">var value: ZCY? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;ZCY1,ZCY2&gt; &#123;</span><br><span class=\"line\">var value: ZCY1? = null</span><br><span class=\"line\">var value2: ZCY2? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但出于规范的目的，Java 还是建议我们用单个大写字母来代表类型参数。常见的如：</p>\n<ol>\n<li>T 代表一般的任何类。 </li>\n<li>E 代表 Element 的意思，或者 Exception 异常的意思。 </li>\n<li>K 代表 Key 的意思。 </li>\n<li>V 代表 Value 的意思，通常与 K 一起配合使用。 </li>\n<li>S 代表 Subtype 的意思</li>\n</ol>\n<p><strong>泛型方法</strong><br>泛型方法所定义的泛型与其所在类的泛型互相不冲突，类的ZCY可以是String类型，而方法的ZCY可以是Int类型，它只是一泛泛的类型而已</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun someThing(some: ZCY2): ZCY1? &#123;</span><br><span class=\"line\">return null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">@Throws(IllegalAccessException::class, InstantiationException::class)</span><br><span class=\"line\">fun &lt;T&gt; fun1(t: Class&lt;T&gt;): T &#123;</span><br><span class=\"line\">return t.newInstance()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h4><p>除了用<code>&lt;T&gt;</code>表示泛型外，还有 <code>&lt;?&gt;</code> 这种形式。<code>？</code> 被称为通配符。<br>有需求说希望泛型可以处理某一范围内的数据类型，比如某个类和他的子类  </p>\n<h5 id=\"三种形式的通配符\"><a href=\"#三种形式的通配符\" class=\"headerlink\" title=\"三种形式的通配符\"></a>三种形式的通配符</h5><p>如果存在了通配符，那么它就丧失了“写”的能力，因为它属于未知类型。<br>下面的编译是不会通过的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt; test1 = new ArrayList&lt;&gt;();</span><br><span class=\"line\">test1.add(&quot;123&quot;));</span><br><span class=\"line\">test1.add(123);</span><br></pre></td></tr></table></figure>\n<p>于是乎，通配符用来指明泛型<strong>范围</strong>、<strong>边界</strong></p>\n<ol>\n<li>&lt;?&gt; 被称作无限定的通配符。</li>\n<li>&lt;? extends T&gt; 被称作有上限的通配符。</li>\n<li>&lt;? super T&gt; 被称作有下限的通配符。 </li>\n</ol>\n<p>时常（哦不，应该是一直）搞不懂他俩的区别<br>For Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;Fruit&gt; plate = new Plate&lt;Apple&gt;(new Apple());</span><br></pre></td></tr></table></figure>\n<p>这样子是不能通过编译的，<strong>因为一个装苹果的盘子不能变成一个装水果的盘子</strong>。沙雕玩意 ┐(ﾟ～ﾟ)┌<br>就算容器里装的东西之间有继承关系，但容器之间是没有继承关系的。所以我们不能像<code>Fruit fruit = new Apple();</code>这么样写。</p>\n<p><strong>有上限通配符</strong>：<br><code>Plate&lt;？ extends Fruit&gt;</code><br>就是说水果以及水果的子类可以放进盘子里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;? extends Fruit&gt; plate = new Plate&lt;Apple&gt;(new Apple());</span><br></pre></td></tr></table></figure>\n<p>此时我们发现set方法失效了，原因是编辑器只知道可以set进去Fruit和它的子类，但是具体的类型不知道，可能是Apple，可能是Banana、Orange。所以就不允许。（可是为什么构造方法可以啊？摊手┑(￣Д ￣)┍）<br><strong>那么我们就可以得出结论 <code>？</code>代表我知道它是一个东西，具体是什么我不知道</strong>  </p>\n<p><strong>有下限通配符</strong>：<br><code>Plate&lt;? super Fruit&gt;</code>就是水果以及水果的父类（食物）可以放进盘子里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;? super Fruit&gt; plate = new Plate&lt;Fruit&gt;(new Fruit());</span><br><span class=\"line\">plate.set(new Apple());</span><br><span class=\"line\">plate.set(new Fruit());</span><br><span class=\"line\">plate.set(new Food());//报错</span><br><span class=\"line\">Object o = plate.get();</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，水果（Apple 或者 Fruit）可以放进盘子里面，但是Food这一行会报错的，<strong>因为食物Food不一定是水果</strong>，也可能是肉、蔬菜，所以它不能放盘子里面。<br>下限通配符，放开了存储，但是取出来的话就会失效一部分，因为取出来的不知道到底是什么类型，Apple? Fruit? Banana? 不确定 <strong>所以只能用Object来接收</strong>，这样就把元素的类型信息丢掉了。 (●ﾟωﾟ●)</p>\n<h5 id=\"PECS\"><a href=\"#PECS\" class=\"headerlink\" title=\"PECS:\"></a>PECS:</h5><ul>\n<li>频繁往外读取内容的，适合用上界Extends。</li>\n<li>经常往里插入的，适合用下界Super。</li>\n</ul>\n<h4 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h4><p>java中的泛型，是相对于<strong>编辑器</strong>阶段的，在<strong>编译</strong>期间java的字节码中是不包含泛型信息的。</p>\n<p>看一段代码，这段代码的结果是true，是因为在进入JVM之前，与泛型相关的信息，T 会被类型擦除，无论 T 是String，还是Integer都被替换成了Object，如果指定了上限&lt;? extends String&gt;那么就会被擦除成上限String。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; l1 = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; l2 = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(l1.getClass() == l2.getClass());</span><br></pre></td></tr></table></figure>\n<p><strong>Attention</strong><br>泛型类或者泛型方法中，不接受 8 种基本数据类型。要接受也是他们的包装类。  </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>泛型还有一种较为准确的说法就是为了参数化类型，或者说可以将类型当作参数传递给一个类或者是方法。<br>看一个例子，证明为什么要有泛型<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache &#123;</span><br><span class=\"line\">var value: Any? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们操作数据的时候是酱紫的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache cache = new Cache();</span><br><span class=\"line\">cache.setValue(&quot;123&quot;);</span><br><span class=\"line\">String str = (String) cache.getValue();</span><br></pre></td></tr></table></figure>\n<p>显然需要一个强制类型转换才能取出理想的数据。<br>我们来看使用泛型的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;T&gt; &#123;</span><br><span class=\"line\">var value: T? = null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cache&lt;String&gt; cache = new Cache&lt;String&gt;();</span><br><span class=\"line\">cache.setValue(&quot;123&quot;);</span><br><span class=\"line\">String str =cache.getValue();</span><br></pre></td></tr></table></figure>\n<p>你看，不用强制类型转换了吧~而且泛型可以传入任何一种想要的类型<br>泛型可以将类型参数化，但是参数一旦确定好，如果类似不匹配，编译器就不通过。<br><strong>好处：</strong>  </p>\n<ol>\n<li>它提供了一种扩展能力  </li>\n<li>它是一种类型安全检测机制  </li>\n<li>泛型提高了程序代码的可读性  </li>\n</ol>\n<h4 id=\"按照使用方式\"><a href=\"#按照使用方式\" class=\"headerlink\" title=\"按照使用方式\"></a>按照使用方式</h4><ol>\n<li>泛型类。 </li>\n<li>泛型方法。 </li>\n<li>泛型接口。</li>\n</ol>\n<p><strong>定义一个泛型类,理论上这个ZCY可以是任何</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;ZCY&gt; &#123;</span><br><span class=\"line\">var value: ZCY? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Cache&lt;ZCY1,ZCY2&gt; &#123;</span><br><span class=\"line\">var value: ZCY1? = null</span><br><span class=\"line\">var value2: ZCY2? = null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但出于规范的目的，Java 还是建议我们用单个大写字母来代表类型参数。常见的如：</p>\n<ol>\n<li>T 代表一般的任何类。 </li>\n<li>E 代表 Element 的意思，或者 Exception 异常的意思。 </li>\n<li>K 代表 Key 的意思。 </li>\n<li>V 代表 Value 的意思，通常与 K 一起配合使用。 </li>\n<li>S 代表 Subtype 的意思</li>\n</ol>\n<p><strong>泛型方法</strong><br>泛型方法所定义的泛型与其所在类的泛型互相不冲突，类的ZCY可以是String类型，而方法的ZCY可以是Int类型，它只是一泛泛的类型而已</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun someThing(some: ZCY2): ZCY1? &#123;</span><br><span class=\"line\">return null</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">@Throws(IllegalAccessException::class, InstantiationException::class)</span><br><span class=\"line\">fun &lt;T&gt; fun1(t: Class&lt;T&gt;): T &#123;</span><br><span class=\"line\">return t.newInstance()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h4><p>除了用<code>&lt;T&gt;</code>表示泛型外，还有 <code>&lt;?&gt;</code> 这种形式。<code>？</code> 被称为通配符。<br>有需求说希望泛型可以处理某一范围内的数据类型，比如某个类和他的子类  </p>\n<h5 id=\"三种形式的通配符\"><a href=\"#三种形式的通配符\" class=\"headerlink\" title=\"三种形式的通配符\"></a>三种形式的通配符</h5><p>如果存在了通配符，那么它就丧失了“写”的能力，因为它属于未知类型。<br>下面的编译是不会通过的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt; test1 = new ArrayList&lt;&gt;();</span><br><span class=\"line\">test1.add(&quot;123&quot;));</span><br><span class=\"line\">test1.add(123);</span><br></pre></td></tr></table></figure>\n<p>于是乎，通配符用来指明泛型<strong>范围</strong>、<strong>边界</strong></p>\n<ol>\n<li>&lt;?&gt; 被称作无限定的通配符。</li>\n<li>&lt;? extends T&gt; 被称作有上限的通配符。</li>\n<li>&lt;? super T&gt; 被称作有下限的通配符。 </li>\n</ol>\n<p>时常（哦不，应该是一直）搞不懂他俩的区别<br>For Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;Fruit&gt; plate = new Plate&lt;Apple&gt;(new Apple());</span><br></pre></td></tr></table></figure>\n<p>这样子是不能通过编译的，<strong>因为一个装苹果的盘子不能变成一个装水果的盘子</strong>。沙雕玩意 ┐(ﾟ～ﾟ)┌<br>就算容器里装的东西之间有继承关系，但容器之间是没有继承关系的。所以我们不能像<code>Fruit fruit = new Apple();</code>这么样写。</p>\n<p><strong>有上限通配符</strong>：<br><code>Plate&lt;？ extends Fruit&gt;</code><br>就是说水果以及水果的子类可以放进盘子里面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;? extends Fruit&gt; plate = new Plate&lt;Apple&gt;(new Apple());</span><br></pre></td></tr></table></figure>\n<p>此时我们发现set方法失效了，原因是编辑器只知道可以set进去Fruit和它的子类，但是具体的类型不知道，可能是Apple，可能是Banana、Orange。所以就不允许。（可是为什么构造方法可以啊？摊手┑(￣Д ￣)┍）<br><strong>那么我们就可以得出结论 <code>？</code>代表我知道它是一个东西，具体是什么我不知道</strong>  </p>\n<p><strong>有下限通配符</strong>：<br><code>Plate&lt;? super Fruit&gt;</code>就是水果以及水果的父类（食物）可以放进盘子里面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Plate&lt;? super Fruit&gt; plate = new Plate&lt;Fruit&gt;(new Fruit());</span><br><span class=\"line\">plate.set(new Apple());</span><br><span class=\"line\">plate.set(new Fruit());</span><br><span class=\"line\">plate.set(new Food());//报错</span><br><span class=\"line\">Object o = plate.get();</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，水果（Apple 或者 Fruit）可以放进盘子里面，但是Food这一行会报错的，<strong>因为食物Food不一定是水果</strong>，也可能是肉、蔬菜，所以它不能放盘子里面。<br>下限通配符，放开了存储，但是取出来的话就会失效一部分，因为取出来的不知道到底是什么类型，Apple? Fruit? Banana? 不确定 <strong>所以只能用Object来接收</strong>，这样就把元素的类型信息丢掉了。 (●ﾟωﾟ●)</p>\n<h5 id=\"PECS\"><a href=\"#PECS\" class=\"headerlink\" title=\"PECS:\"></a>PECS:</h5><ul>\n<li>频繁往外读取内容的，适合用上界Extends。</li>\n<li>经常往里插入的，适合用下界Super。</li>\n</ul>\n<h4 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h4><p>java中的泛型，是相对于<strong>编辑器</strong>阶段的，在<strong>编译</strong>期间java的字节码中是不包含泛型信息的。</p>\n<p>看一段代码，这段代码的结果是true，是因为在进入JVM之前，与泛型相关的信息，T 会被类型擦除，无论 T 是String，还是Integer都被替换成了Object，如果指定了上限&lt;? extends String&gt;那么就会被擦除成上限String。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; l1 = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; l2 = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(l1.getClass() == l2.getClass());</span><br></pre></td></tr></table></figure>\n<p><strong>Attention</strong><br>泛型类或者泛型方法中，不接受 8 种基本数据类型。要接受也是他们的包装类。  </p>"},{"title":"Hello World","comments":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n### 关于网站的一些配置\n<!--more-->\n打开Mac壁纸：  \nFinder 前往文件夹 输入/Library/Desktop Pictures/ \n更改网站主题颜色：\nopen  hexoSpace\\themes\\next\\source\\css\\_custom\\custom.styl\n\n\n```\nbody{\nbackground:url(/images/FloatingIce.jpg);\nbackground-size:cover;\nbackground-repeat:no-repeat;\nbackground-attachment:fixed;\nbackground-position:center;\n}\n\n背景透明：  \n.post-block {\nbackground:rgba(255, 255, 255, 0.75) none repeat scroll !important;\n}\n\n\n$body-bg-color = rgba(255, 255, 255, 0.85);\n$my-color = rgb(113, 189, 229)\n// 修改网站头部颜色\n.headband {\nheight: 3px;\nbackground: $my-color;\n}\n.site-meta {\npadding: 20px 0;\ncolor: #fff;\nbackground: $my-color;\n}\n.site-subtitle {\nmargin-top: 10px;\nfont-size: 13px;\ncolor: #ffffff;\n}\n// 修改按键（button）样式\n.btn {\ncolor: $my-color;\nbackground: #fff;\nborder: 2px solid $my-color;\n}\n// 按键（button）点击时样式\n.btn:hover {\nborder-color: $my-color;\ncolor: #fff;\nbackground: $my-color;\n}\n```\n\n\n\n#### fork me on github\n\nopen hexoSpace/themes/next/layout/_layout.swig\n\nfind this\n\n```\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n<div class=\"headband\"></div>\n```\n\nadd this below\n\n```\n<a href=\"https://o0o0oo00.github.io\" class=\"github-corner\" aria-label=\"View source on GitHub\"><svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path><path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>\n```\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncomments: true #是否可评论\ncategories: hexo #分类\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n### 关于网站的一些配置\n<!--more-->\n打开Mac壁纸：  \nFinder 前往文件夹 输入/Library/Desktop Pictures/ \n更改网站主题颜色：\nopen  hexoSpace\\themes\\next\\source\\css\\_custom\\custom.styl\n\n\n```\nbody{\nbackground:url(/images/FloatingIce.jpg);\nbackground-size:cover;\nbackground-repeat:no-repeat;\nbackground-attachment:fixed;\nbackground-position:center;\n}\n\n背景透明：  \n.post-block {\nbackground:rgba(255, 255, 255, 0.75) none repeat scroll !important;\n}\n\n\n$body-bg-color = rgba(255, 255, 255, 0.85);\n$my-color = rgb(113, 189, 229)\n// 修改网站头部颜色\n.headband {\nheight: 3px;\nbackground: $my-color;\n}\n.site-meta {\npadding: 20px 0;\ncolor: #fff;\nbackground: $my-color;\n}\n.site-subtitle {\nmargin-top: 10px;\nfont-size: 13px;\ncolor: #ffffff;\n}\n// 修改按键（button）样式\n.btn {\ncolor: $my-color;\nbackground: #fff;\nborder: 2px solid $my-color;\n}\n// 按键（button）点击时样式\n.btn:hover {\nborder-color: $my-color;\ncolor: #fff;\nbackground: $my-color;\n}\n```\n\n\n\n#### fork me on github\n\nopen hexoSpace/themes/next/layout/_layout.swig\n\nfind this\n\n```\n<div class=\"{{ container_class }} {% block page_class %}{% endblock %} \">\n<div class=\"headband\"></div>\n```\n\nadd this below\n\n```\n<a href=\"https://o0o0oo00.github.io\" class=\"github-corner\" aria-label=\"View source on GitHub\"><svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path><path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>\n```\n\n\n","slug":"hello-world","published":1,"date":"2018-09-17T06:39:09.000Z","updated":"2018-10-23T01:57:12.000Z","layout":"post","photos":[],"link":"","_id":"cjqnkydnc000nor26v7a7cxvc","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h3 id=\"关于网站的一些配置\"><a href=\"#关于网站的一些配置\" class=\"headerlink\" title=\"关于网站的一些配置\"></a>关于网站的一些配置</h3><a id=\"more\"></a>\n<p>打开Mac壁纸：<br>Finder 前往文件夹 输入/Library/Desktop Pictures/<br>更改网站主题颜色：<br>open  hexoSpace\\themes\\next\\source\\css_custom\\custom.styl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">background:url(/images/FloatingIce.jpg);</span><br><span class=\"line\">background-size:cover;</span><br><span class=\"line\">background-repeat:no-repeat;</span><br><span class=\"line\">background-attachment:fixed;</span><br><span class=\"line\">background-position:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">背景透明：  </span><br><span class=\"line\">.post-block &#123;</span><br><span class=\"line\">background:rgba(255, 255, 255, 0.75) none repeat scroll !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$body-bg-color = rgba(255, 255, 255, 0.85);</span><br><span class=\"line\">$my-color = rgb(113, 189, 229)</span><br><span class=\"line\">// 修改网站头部颜色</span><br><span class=\"line\">.headband &#123;</span><br><span class=\"line\">height: 3px;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-meta &#123;</span><br><span class=\"line\">padding: 20px 0;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-subtitle &#123;</span><br><span class=\"line\">margin-top: 10px;</span><br><span class=\"line\">font-size: 13px;</span><br><span class=\"line\">color: #ffffff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 修改按键（button）样式</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">color: $my-color;</span><br><span class=\"line\">background: #fff;</span><br><span class=\"line\">border: 2px solid $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 按键（button）点击时样式</span><br><span class=\"line\">.btn:hover &#123;</span><br><span class=\"line\">border-color: $my-color;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fork-me-on-github\"><a href=\"#fork-me-on-github\" class=\"headerlink\" title=\"fork me on github\"></a>fork me on github</h4><p>open hexoSpace/themes/next/layout/_layout.swig</p>\n<p>find this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; &quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>add this below</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;https://o0o0oo00.github.io&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h3 id=\"关于网站的一些配置\"><a href=\"#关于网站的一些配置\" class=\"headerlink\" title=\"关于网站的一些配置\"></a>关于网站的一些配置</h3>","more":"<p>打开Mac壁纸：<br>Finder 前往文件夹 输入/Library/Desktop Pictures/<br>更改网站主题颜色：<br>open  hexoSpace\\themes\\next\\source\\css_custom\\custom.styl</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">background:url(/images/FloatingIce.jpg);</span><br><span class=\"line\">background-size:cover;</span><br><span class=\"line\">background-repeat:no-repeat;</span><br><span class=\"line\">background-attachment:fixed;</span><br><span class=\"line\">background-position:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">背景透明：  </span><br><span class=\"line\">.post-block &#123;</span><br><span class=\"line\">background:rgba(255, 255, 255, 0.75) none repeat scroll !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$body-bg-color = rgba(255, 255, 255, 0.85);</span><br><span class=\"line\">$my-color = rgb(113, 189, 229)</span><br><span class=\"line\">// 修改网站头部颜色</span><br><span class=\"line\">.headband &#123;</span><br><span class=\"line\">height: 3px;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-meta &#123;</span><br><span class=\"line\">padding: 20px 0;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-subtitle &#123;</span><br><span class=\"line\">margin-top: 10px;</span><br><span class=\"line\">font-size: 13px;</span><br><span class=\"line\">color: #ffffff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 修改按键（button）样式</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">color: $my-color;</span><br><span class=\"line\">background: #fff;</span><br><span class=\"line\">border: 2px solid $my-color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 按键（button）点击时样式</span><br><span class=\"line\">.btn:hover &#123;</span><br><span class=\"line\">border-color: $my-color;</span><br><span class=\"line\">color: #fff;</span><br><span class=\"line\">background: $my-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fork-me-on-github\"><a href=\"#fork-me-on-github\" class=\"headerlink\" title=\"fork me on github\"></a>fork me on github</h4><p>open hexoSpace/themes/next/layout/_layout.swig</p>\n<p>find this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125; &quot;&gt;</span><br><span class=\"line\">&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>add this below</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;https://o0o0oo00.github.io&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure>"},{"title":"RxJava2 线程调度","date":"2018-10-22T08:08:04.000Z","_content":"### RxJava2 线程调度\n既然是异步就要涉及到线程控制  \n#### RxJava提供的线程\n\n1. `Schedulers.trampoline()`当前线程\n2. `Schedulers.newThread()`启动新的线程，在新的线程中执行操作\n3. `Schedulers.io()`io读写线程，区别于`newThread`在于`io`内部的是用一个无数量上限的线程池，可以重用空闲线程，推荐使用。\n4. `Schedulers.computation()`这个Sheduler使用的固定的线程池，大小为cpu核数，有些操作符或者涉及到运算的情况下使用。\n5. `Schedulers.single()`任务都在这个单例线程中执行，按**队列**顺序\n<!--more-->\n\n#### 指定线程\n指定**观察者**线程：`observerOn(Schedulers)`  \n指定**被观察者**线程：`subScribeOn(Schedulers)`  \n\n恕老衲直言，这个名字起的是真的瘪嘴。\n\n看例子：\n\n```\nprivate fun testThreadWhere() {\n    Observable.create(ObservableOnSubscribe<Long>() {\n        Log.e(TAG, \"发射 线程为：${Thread.currentThread().name} \")\n        it.onNext(12L)\n    })\n        .filter {\n            Log.e(TAG, \"filter 线程为：${Thread.currentThread().name} $it \")\n            return@filter it > 10\n        }\n        .subscribeOn(Schedulers.io())// 1 指定filter线程 \n        .observeOn(Schedulers.newThread()) // 2 指定map线程\n        .map(Function<Long, String>() {\n            Log.e(TAG, \"map 线程为：${Thread.currentThread().name} $it \")\n            return@Function it.toString()\n        })\n        .observeOn(AndroidSchedulers.mainThread())// 3\n        .subscribe {\n            Log.e(TAG, \"处理 线程为：${Thread.currentThread().name} $it \")\n        }\n}\n```\n看一下结果：\n其中  \n`RxCachedThreadScheduler `为`io`线程因为其内部采用的是线程池处理机制。  \n`RxNewThreadScheduler `为`newThread`线程。\n\n```\n10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: 发射 线程为：RxCachedThreadScheduler-1 \n10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: filter 线程为：RxCachedThreadScheduler-1 12 \n10-22 16:02:16.200 17797-17856/com.zcy.nidavellir.javaworld E/MainActivity: map 线程为：RxNewThreadScheduler-1 12 \n10-22 16:02:16.251 17797-17797/com.zcy.nidavellir.javaworld E/MainActivity: 处理 线程为：main 12 \n```\n\n* 如果注释掉 注释中的1 相当于是不指定**被观察者**线程，那么**被观察者**会在当前的**默认线程**也就是**主线程**执行任务。\n* 如果注释掉 注释中的2 那么filter 和 map 都会在`io`线程中执行，直到遇到了`observerOn`\n* observerOn的下游也就是**观察者**因为指定了`AndroidSchedulers.mainThread()`所以在`mainThread`中运行。\n* 多次指定`subscribeOn`不生效，以最先指定的线程为准。多次`observerOn`生效，指定一次对下游直到下一个`observerOn`中间生效。\n\n\n\n\n","source":"_posts/rxScheduler.md","raw":"---\ntitle: RxJava2 线程调度\ndate: 2018-10-22 16:08:04\ncategories: 技术\n---\n### RxJava2 线程调度\n既然是异步就要涉及到线程控制  \n#### RxJava提供的线程\n\n1. `Schedulers.trampoline()`当前线程\n2. `Schedulers.newThread()`启动新的线程，在新的线程中执行操作\n3. `Schedulers.io()`io读写线程，区别于`newThread`在于`io`内部的是用一个无数量上限的线程池，可以重用空闲线程，推荐使用。\n4. `Schedulers.computation()`这个Sheduler使用的固定的线程池，大小为cpu核数，有些操作符或者涉及到运算的情况下使用。\n5. `Schedulers.single()`任务都在这个单例线程中执行，按**队列**顺序\n<!--more-->\n\n#### 指定线程\n指定**观察者**线程：`observerOn(Schedulers)`  \n指定**被观察者**线程：`subScribeOn(Schedulers)`  \n\n恕老衲直言，这个名字起的是真的瘪嘴。\n\n看例子：\n\n```\nprivate fun testThreadWhere() {\n    Observable.create(ObservableOnSubscribe<Long>() {\n        Log.e(TAG, \"发射 线程为：${Thread.currentThread().name} \")\n        it.onNext(12L)\n    })\n        .filter {\n            Log.e(TAG, \"filter 线程为：${Thread.currentThread().name} $it \")\n            return@filter it > 10\n        }\n        .subscribeOn(Schedulers.io())// 1 指定filter线程 \n        .observeOn(Schedulers.newThread()) // 2 指定map线程\n        .map(Function<Long, String>() {\n            Log.e(TAG, \"map 线程为：${Thread.currentThread().name} $it \")\n            return@Function it.toString()\n        })\n        .observeOn(AndroidSchedulers.mainThread())// 3\n        .subscribe {\n            Log.e(TAG, \"处理 线程为：${Thread.currentThread().name} $it \")\n        }\n}\n```\n看一下结果：\n其中  \n`RxCachedThreadScheduler `为`io`线程因为其内部采用的是线程池处理机制。  \n`RxNewThreadScheduler `为`newThread`线程。\n\n```\n10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: 发射 线程为：RxCachedThreadScheduler-1 \n10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: filter 线程为：RxCachedThreadScheduler-1 12 \n10-22 16:02:16.200 17797-17856/com.zcy.nidavellir.javaworld E/MainActivity: map 线程为：RxNewThreadScheduler-1 12 \n10-22 16:02:16.251 17797-17797/com.zcy.nidavellir.javaworld E/MainActivity: 处理 线程为：main 12 \n```\n\n* 如果注释掉 注释中的1 相当于是不指定**被观察者**线程，那么**被观察者**会在当前的**默认线程**也就是**主线程**执行任务。\n* 如果注释掉 注释中的2 那么filter 和 map 都会在`io`线程中执行，直到遇到了`observerOn`\n* observerOn的下游也就是**观察者**因为指定了`AndroidSchedulers.mainThread()`所以在`mainThread`中运行。\n* 多次指定`subscribeOn`不生效，以最先指定的线程为准。多次`observerOn`生效，指定一次对下游直到下一个`observerOn`中间生效。\n\n\n\n\n","slug":"rxScheduler","published":1,"updated":"2018-10-22T08:11:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydne000por26i95cma3x","content":"<h3 id=\"RxJava2-线程调度\"><a href=\"#RxJava2-线程调度\" class=\"headerlink\" title=\"RxJava2 线程调度\"></a>RxJava2 线程调度</h3><p>既然是异步就要涉及到线程控制  </p>\n<h4 id=\"RxJava提供的线程\"><a href=\"#RxJava提供的线程\" class=\"headerlink\" title=\"RxJava提供的线程\"></a>RxJava提供的线程</h4><ol>\n<li><code>Schedulers.trampoline()</code>当前线程</li>\n<li><code>Schedulers.newThread()</code>启动新的线程，在新的线程中执行操作</li>\n<li><code>Schedulers.io()</code>io读写线程，区别于<code>newThread</code>在于<code>io</code>内部的是用一个无数量上限的线程池，可以重用空闲线程，推荐使用。</li>\n<li><code>Schedulers.computation()</code>这个Sheduler使用的固定的线程池，大小为cpu核数，有些操作符或者涉及到运算的情况下使用。</li>\n<li><code>Schedulers.single()</code>任务都在这个单例线程中执行，按<strong>队列</strong>顺序<a id=\"more\"></a>\n</li>\n</ol>\n<h4 id=\"指定线程\"><a href=\"#指定线程\" class=\"headerlink\" title=\"指定线程\"></a>指定线程</h4><p>指定<strong>观察者</strong>线程：<code>observerOn(Schedulers)</code><br>指定<strong>被观察者</strong>线程：<code>subScribeOn(Schedulers)</code>  </p>\n<p>恕老衲直言，这个名字起的是真的瘪嘴。</p>\n<p>看例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private fun testThreadWhere() &#123;</span><br><span class=\"line\">    Observable.create(ObservableOnSubscribe&lt;Long&gt;() &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;发射 线程为：$&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class=\"line\">        it.onNext(12L)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .filter &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;filter 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">            return@filter it &gt; 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())// 1 指定filter线程 </span><br><span class=\"line\">        .observeOn(Schedulers.newThread()) // 2 指定map线程</span><br><span class=\"line\">        .map(Function&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;map 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">            return@Function it.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())// 3</span><br><span class=\"line\">        .subscribe &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;处理 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下结果：<br>其中<br><code>RxCachedThreadScheduler</code>为<code>io</code>线程因为其内部采用的是线程池处理机制。<br><code>RxNewThreadScheduler</code>为<code>newThread</code>线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: 发射 线程为：RxCachedThreadScheduler-1 </span><br><span class=\"line\">10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: filter 线程为：RxCachedThreadScheduler-1 12 </span><br><span class=\"line\">10-22 16:02:16.200 17797-17856/com.zcy.nidavellir.javaworld E/MainActivity: map 线程为：RxNewThreadScheduler-1 12 </span><br><span class=\"line\">10-22 16:02:16.251 17797-17797/com.zcy.nidavellir.javaworld E/MainActivity: 处理 线程为：main 12</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果注释掉 注释中的1 相当于是不指定<strong>被观察者</strong>线程，那么<strong>被观察者</strong>会在当前的<strong>默认线程</strong>也就是<strong>主线程</strong>执行任务。</li>\n<li>如果注释掉 注释中的2 那么filter 和 map 都会在<code>io</code>线程中执行，直到遇到了<code>observerOn</code></li>\n<li>observerOn的下游也就是<strong>观察者</strong>因为指定了<code>AndroidSchedulers.mainThread()</code>所以在<code>mainThread</code>中运行。</li>\n<li>多次指定<code>subscribeOn</code>不生效，以最先指定的线程为准。多次<code>observerOn</code>生效，指定一次对下游直到下一个<code>observerOn</code>中间生效。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"RxJava2-线程调度\"><a href=\"#RxJava2-线程调度\" class=\"headerlink\" title=\"RxJava2 线程调度\"></a>RxJava2 线程调度</h3><p>既然是异步就要涉及到线程控制  </p>\n<h4 id=\"RxJava提供的线程\"><a href=\"#RxJava提供的线程\" class=\"headerlink\" title=\"RxJava提供的线程\"></a>RxJava提供的线程</h4><ol>\n<li><code>Schedulers.trampoline()</code>当前线程</li>\n<li><code>Schedulers.newThread()</code>启动新的线程，在新的线程中执行操作</li>\n<li><code>Schedulers.io()</code>io读写线程，区别于<code>newThread</code>在于<code>io</code>内部的是用一个无数量上限的线程池，可以重用空闲线程，推荐使用。</li>\n<li><code>Schedulers.computation()</code>这个Sheduler使用的固定的线程池，大小为cpu核数，有些操作符或者涉及到运算的情况下使用。</li>\n<li><code>Schedulers.single()</code>任务都在这个单例线程中执行，按<strong>队列</strong>顺序","more":"</li>\n</ol>\n<h4 id=\"指定线程\"><a href=\"#指定线程\" class=\"headerlink\" title=\"指定线程\"></a>指定线程</h4><p>指定<strong>观察者</strong>线程：<code>observerOn(Schedulers)</code><br>指定<strong>被观察者</strong>线程：<code>subScribeOn(Schedulers)</code>  </p>\n<p>恕老衲直言，这个名字起的是真的瘪嘴。</p>\n<p>看例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private fun testThreadWhere() &#123;</span><br><span class=\"line\">    Observable.create(ObservableOnSubscribe&lt;Long&gt;() &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;发射 线程为：$&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class=\"line\">        it.onNext(12L)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">        .filter &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;filter 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">            return@filter it &gt; 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())// 1 指定filter线程 </span><br><span class=\"line\">        .observeOn(Schedulers.newThread()) // 2 指定map线程</span><br><span class=\"line\">        .map(Function&lt;Long, String&gt;() &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;map 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">            return@Function it.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())// 3</span><br><span class=\"line\">        .subscribe &#123;</span><br><span class=\"line\">            Log.e(TAG, &quot;处理 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下结果：<br>其中<br><code>RxCachedThreadScheduler</code>为<code>io</code>线程因为其内部采用的是线程池处理机制。<br><code>RxNewThreadScheduler</code>为<code>newThread</code>线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: 发射 线程为：RxCachedThreadScheduler-1 </span><br><span class=\"line\">10-22 16:02:16.199 17797-17855/com.zcy.nidavellir.javaworld E/MainActivity: filter 线程为：RxCachedThreadScheduler-1 12 </span><br><span class=\"line\">10-22 16:02:16.200 17797-17856/com.zcy.nidavellir.javaworld E/MainActivity: map 线程为：RxNewThreadScheduler-1 12 </span><br><span class=\"line\">10-22 16:02:16.251 17797-17797/com.zcy.nidavellir.javaworld E/MainActivity: 处理 线程为：main 12</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果注释掉 注释中的1 相当于是不指定<strong>被观察者</strong>线程，那么<strong>被观察者</strong>会在当前的<strong>默认线程</strong>也就是<strong>主线程</strong>执行任务。</li>\n<li>如果注释掉 注释中的2 那么filter 和 map 都会在<code>io</code>线程中执行，直到遇到了<code>observerOn</code></li>\n<li>observerOn的下游也就是<strong>观察者</strong>因为指定了<code>AndroidSchedulers.mainThread()</code>所以在<code>mainThread</code>中运行。</li>\n<li>多次指定<code>subscribeOn</code>不生效，以最先指定的线程为准。多次<code>observerOn</code>生效，指定一次对下游直到下一个<code>observerOn</code>中间生效。</li>\n</ul>"},{"title":"RxJava - 异步","date":"2018-10-15T09:27:52.000Z","_content":"# RxJava - 异步\n\n### Observable(被观察者)的创建\n它没有公开的构造方法，是通过内部的Create方法来创建一个\n\n```\nObservable<String> observable = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {}\n});\n```\n<!--more-->\n### Subscriber/Observer(观察者)的创建\n\nSubscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的\n\n```\nSubscriber<String> subscriber = new Subscriber<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"subscriber\" + s);\n}\n};\n\nObserver<String> observer = new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"observer\"+s);\n}\n};\n```\n### 观察者响应被观察者\n我们知道[观察者模式](https://o0o0oo00.github.io/2018/10/09/Observer/#more)，是**被观察者持有观察者**的引用，进而遍历所有观察者，调用（通知）其方法来达到响应的目的。\n所以我们看RxJava中的关联方式是通过**被观察者订阅被观察者**observable.subscribe(observer/subscriber)来实现的。这个地方可能与概念有些不贴切，因为概念是观察者要响应的是被观察者，所以这里通过**被观察者订阅被观察者**来达到**观察者响应被观察者**的目的\n\n1. 创建被观察者`Observable`与观察者`Observer`对象\n2. 观察者订阅被观察者，实际是**观察者**当做参数传入**被观察者** `observable.subscribe(observer);`\n3. **被观察者**`Observable`的重写方法`call()`中调用**观察者**`Observer`的`onNext`方法。然后`Observer`**重写**的`onNext`进行相应的处理\n\n### Observable的其他创建方式\n#### Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\n\n例如：相当于执行`call`方法中的`subscriber.``onNext(\"123\")``onNext(\"234\")``onCompleted()`\n\n```\nObservable.just(\"123\",\"234\").subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n\n```\n#### Observable.from(Iterable<? extends T> iterable)\n\n`from(Iterable<? extends T> iterable)`**支持从数组或者是实现了Iterator接口的集合中接收参数**  \n例如：这两种方式\n\n```\nObservable.from(new String[]{\"345\",\"456\"}).subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n```\n```\nList<String> list = new ArrayList<>();\nlist.add(\"567\");\nlist.add(\"678\");\nObservable.from(list).subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\nSystem.out.println(\"onCompleted\");\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n```\n**PostScript**：当just参数在2个以上时，实际上内部调用的也是from(T[] array)方法。\n\n#### `Action0`、`Action1<T>` ... `Action9<T1, T2, T3, T4, T5, T6, T7, T8, T9> `\n0个参数的Action,1个参数的Action  \nAction0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。\n\n```\nObservable<String> observable = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nsubscriber.onNext(\"123\");\nsubscriber.onNext(\"234\");\nsubscriber.onCompleted();\n}\n});\n\nobservable.subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(\"onNext\"+s);\n}\n}, new Action1<Throwable>() {\n@Override\npublic void call(Throwable throwable) {\nSystem.out.println(\"onError\");\n}\n}, new Action0() {\n@Override\npublic void call() {\nSystem.out.println(\"onComplete\");\n}\n});\n```\n\n来看看源码中定义的使用方式\n\n```\npublic final Subscription subscribe(final Action1<? super T> onNext) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\n\nAction1<Throwable> onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;\nAction0 onCompleted = Actions.empty();\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n\npublic final Subscription subscribe(final Action1<? super T> onNext, final Action1<Throwable> onError) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\nif (onError == null) {\nthrow new IllegalArgumentException(\"onError can not be null\");\n}\n\nAction0 onCompleted = Actions.empty();\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n\npublic final Subscription subscribe(final Action1<? super T> onNext, final Action1<Throwable> onError, final Action0 onCompleted) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\nif (onError == null) {\nthrow new IllegalArgumentException(\"onError can not be null\");\n\nif (onCompleted == null) {\nthrow new IllegalArgumentException(\"onComplete can not be null\");\n}\n\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n```\n\n无论传入几个Action，最后都会返回`subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));`  \n哎呀，听人家讲不如自己去看看源码，也没几行 (●ﾟωﾟ●)\n\n\n上面这些都只是皮毛啦，RxJava真正的意义在于**异步**，『后台处理，前台回调』，而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。\n\n### 线程控制Scheduler\n用于指定每一段代码运行在什么样的线程之中。RxJava内置的Scheduler：\n\n* `Schedulers.immediate()`: 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。\n* `Schedulers.newThread()`: 总是启用新线程，并在新线程执行操作。\n* `Schedulers.io()`: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n* 另外， Android 还有一个专用的 `AndroidSchedulers.mainThread()`，它指定的操作将在 Android 主线程运行。\n\n有了这些个SchedulerJ就可以用`subscribeOn ``observeOn `这两个方法来对线程进行控制了。分别指定**观察者在主线程**用于更新UI，**被观察者位于io线程**执行以下耗时的操作。  \n例子：\n\n```\nObservable.just(123, 123, 123)\n.subscribeOn(AndroidSchedulers.mainThread())\n.observeOn(Schedulers.io())\n.subscribe { integer -> println(integer!!.toString()) }\n\n```\n\n\n","source":"_posts/rx.md","raw":"---\ntitle: RxJava - 异步\ndate: 2018-10-15 17:27:52\ncategories: 技术\n---\n# RxJava - 异步\n\n### Observable(被观察者)的创建\n它没有公开的构造方法，是通过内部的Create方法来创建一个\n\n```\nObservable<String> observable = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {}\n});\n```\n<!--more-->\n### Subscriber/Observer(观察者)的创建\n\nSubscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的\n\n```\nSubscriber<String> subscriber = new Subscriber<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"subscriber\" + s);\n}\n};\n\nObserver<String> observer = new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"observer\"+s);\n}\n};\n```\n### 观察者响应被观察者\n我们知道[观察者模式](https://o0o0oo00.github.io/2018/10/09/Observer/#more)，是**被观察者持有观察者**的引用，进而遍历所有观察者，调用（通知）其方法来达到响应的目的。\n所以我们看RxJava中的关联方式是通过**被观察者订阅被观察者**observable.subscribe(observer/subscriber)来实现的。这个地方可能与概念有些不贴切，因为概念是观察者要响应的是被观察者，所以这里通过**被观察者订阅被观察者**来达到**观察者响应被观察者**的目的\n\n1. 创建被观察者`Observable`与观察者`Observer`对象\n2. 观察者订阅被观察者，实际是**观察者**当做参数传入**被观察者** `observable.subscribe(observer);`\n3. **被观察者**`Observable`的重写方法`call()`中调用**观察者**`Observer`的`onNext`方法。然后`Observer`**重写**的`onNext`进行相应的处理\n\n### Observable的其他创建方式\n#### Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\n\n例如：相当于执行`call`方法中的`subscriber.``onNext(\"123\")``onNext(\"234\")``onCompleted()`\n\n```\nObservable.just(\"123\",\"234\").subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n\n```\n#### Observable.from(Iterable<? extends T> iterable)\n\n`from(Iterable<? extends T> iterable)`**支持从数组或者是实现了Iterator接口的集合中接收参数**  \n例如：这两种方式\n\n```\nObservable.from(new String[]{\"345\",\"456\"}).subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\n\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n```\n```\nList<String> list = new ArrayList<>();\nlist.add(\"567\");\nlist.add(\"678\");\nObservable.from(list).subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\nSystem.out.println(\"onCompleted\");\n}\n\n@Override\npublic void onError(Throwable e) {\n\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(s);\n}\n});\n```\n**PostScript**：当just参数在2个以上时，实际上内部调用的也是from(T[] array)方法。\n\n#### `Action0`、`Action1<T>` ... `Action9<T1, T2, T3, T4, T5, T6, T7, T8, T9> `\n0个参数的Action,1个参数的Action  \nAction0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。\n\n```\nObservable<String> observable = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nsubscriber.onNext(\"123\");\nsubscriber.onNext(\"234\");\nsubscriber.onCompleted();\n}\n});\n\nobservable.subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(\"onNext\"+s);\n}\n}, new Action1<Throwable>() {\n@Override\npublic void call(Throwable throwable) {\nSystem.out.println(\"onError\");\n}\n}, new Action0() {\n@Override\npublic void call() {\nSystem.out.println(\"onComplete\");\n}\n});\n```\n\n来看看源码中定义的使用方式\n\n```\npublic final Subscription subscribe(final Action1<? super T> onNext) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\n\nAction1<Throwable> onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;\nAction0 onCompleted = Actions.empty();\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n\npublic final Subscription subscribe(final Action1<? super T> onNext, final Action1<Throwable> onError) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\nif (onError == null) {\nthrow new IllegalArgumentException(\"onError can not be null\");\n}\n\nAction0 onCompleted = Actions.empty();\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n\npublic final Subscription subscribe(final Action1<? super T> onNext, final Action1<Throwable> onError, final Action0 onCompleted) {\nif (onNext == null) {\nthrow new IllegalArgumentException(\"onNext can not be null\");\n}\nif (onError == null) {\nthrow new IllegalArgumentException(\"onError can not be null\");\n\nif (onCompleted == null) {\nthrow new IllegalArgumentException(\"onComplete can not be null\");\n}\n\nreturn subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));\n}\n```\n\n无论传入几个Action，最后都会返回`subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));`  \n哎呀，听人家讲不如自己去看看源码，也没几行 (●ﾟωﾟ●)\n\n\n上面这些都只是皮毛啦，RxJava真正的意义在于**异步**，『后台处理，前台回调』，而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。\n\n### 线程控制Scheduler\n用于指定每一段代码运行在什么样的线程之中。RxJava内置的Scheduler：\n\n* `Schedulers.immediate()`: 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。\n* `Schedulers.newThread()`: 总是启用新线程，并在新线程执行操作。\n* `Schedulers.io()`: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。\n* 另外， Android 还有一个专用的 `AndroidSchedulers.mainThread()`，它指定的操作将在 Android 主线程运行。\n\n有了这些个SchedulerJ就可以用`subscribeOn ``observeOn `这两个方法来对线程进行控制了。分别指定**观察者在主线程**用于更新UI，**被观察者位于io线程**执行以下耗时的操作。  \n例子：\n\n```\nObservable.just(123, 123, 123)\n.subscribeOn(AndroidSchedulers.mainThread())\n.observeOn(Schedulers.io())\n.subscribe { integer -> println(integer!!.toString()) }\n\n```\n\n\n","slug":"rx","published":1,"updated":"2018-10-17T08:02:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydnf000sor269buwnj5h","content":"<h1 id=\"RxJava-异步\"><a href=\"#RxJava-异步\" class=\"headerlink\" title=\"RxJava - 异步\"></a>RxJava - 异步</h1><h3 id=\"Observable-被观察者-的创建\"><a href=\"#Observable-被观察者-的创建\" class=\"headerlink\" title=\"Observable(被观察者)的创建\"></a>Observable(被观察者)的创建</h3><p>它没有公开的构造方法，是通过内部的Create方法来创建一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Subscriber-Observer-观察者-的创建\"><a href=\"#Subscriber-Observer-观察者-的创建\" class=\"headerlink\" title=\"Subscriber/Observer(观察者)的创建\"></a>Subscriber/Observer(观察者)的创建</h3><p>Subscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subscriber&lt;String&gt; subscriber = new Subscriber&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;subscriber&quot; + s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Observer&lt;String&gt; observer = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;observer&quot;+s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"观察者响应被观察者\"><a href=\"#观察者响应被观察者\" class=\"headerlink\" title=\"观察者响应被观察者\"></a>观察者响应被观察者</h3><p>我们知道<a href=\"https://o0o0oo00.github.io/2018/10/09/Observer/#more\">观察者模式</a>，是<strong>被观察者持有观察者</strong>的引用，进而遍历所有观察者，调用（通知）其方法来达到响应的目的。<br>所以我们看RxJava中的关联方式是通过<strong>被观察者订阅被观察者</strong>observable.subscribe(observer/subscriber)来实现的。这个地方可能与概念有些不贴切，因为概念是观察者要响应的是被观察者，所以这里通过<strong>被观察者订阅被观察者</strong>来达到<strong>观察者响应被观察者</strong>的目的</p>\n<ol>\n<li>创建被观察者<code>Observable</code>与观察者<code>Observer</code>对象</li>\n<li>观察者订阅被观察者，实际是<strong>观察者</strong>当做参数传入<strong>被观察者</strong> <code>observable.subscribe(observer);</code></li>\n<li><strong>被观察者</strong><code>Observable</code>的重写方法<code>call()</code>中调用<strong>观察者</strong><code>Observer</code>的<code>onNext</code>方法。然后<code>Observer</code><strong>重写</strong>的<code>onNext</code>进行相应的处理</li>\n</ol>\n<h3 id=\"Observable的其他创建方式\"><a href=\"#Observable的其他创建方式\" class=\"headerlink\" title=\"Observable的其他创建方式\"></a>Observable的其他创建方式</h3><h4 id=\"Observable-just-t-T-具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\"><a href=\"#Observable-just-t-T-具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\" class=\"headerlink\" title=\"Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\"></a>Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。</h4><p>例如：相当于执行<code>call</code>方法中的<code>subscriber.`</code>onNext(“123”)<code>onNext(&quot;234&quot;)</code>onCompleted()`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(&quot;123&quot;,&quot;234&quot;).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Observable-from-Iterable-lt-extends-T-gt-iterable\"><a href=\"#Observable-from-Iterable-lt-extends-T-gt-iterable\" class=\"headerlink\" title=\"Observable.from(Iterable&lt;? extends T&gt; iterable)\"></a>Observable.from(Iterable&lt;? extends T&gt; iterable)</h4><p><code>from(Iterable&lt;? extends T&gt; iterable)</code><strong>支持从数组或者是实现了Iterator接口的集合中接收参数</strong><br>例如：这两种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.from(new String[]&#123;&quot;345&quot;,&quot;456&quot;&#125;).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(&quot;567&quot;);</span><br><span class=\"line\">list.add(&quot;678&quot;);</span><br><span class=\"line\">Observable.from(list).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\">System.out.println(&quot;onCompleted&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>PostScript</strong>：当just参数在2个以上时，实际上内部调用的也是from(T[] array)方法。</p>\n<h4 id=\"Action0、Action1-lt-T-gt-…-Action9-lt-T1-T2-T3-T4-T5-T6-T7-T8-T9-gt\"><a href=\"#Action0、Action1-lt-T-gt-…-Action9-lt-T1-T2-T3-T4-T5-T6-T7-T8-T9-gt\" class=\"headerlink\" title=\"Action0、Action1&lt;T&gt; … Action9&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;\"></a><code>Action0</code>、<code>Action1&lt;T&gt;</code> … <code>Action9&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;</code></h4><p>0个参数的Action,1个参数的Action<br>Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">subscriber.onNext(&quot;123&quot;);</span><br><span class=\"line\">subscriber.onNext(&quot;234&quot;);</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;onNext&quot;+s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action1&lt;Throwable&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Throwable throwable) &#123;</span><br><span class=\"line\">System.out.println(&quot;onError&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action0() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">System.out.println(&quot;onComplete&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>来看看源码中定义的使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Action1&lt;Throwable&gt; onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;</span><br><span class=\"line\">Action0 onCompleted = Actions.empty();</span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext, final Action1&lt;Throwable&gt; onError) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (onError == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onError can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Action0 onCompleted = Actions.empty();</span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext, final Action1&lt;Throwable&gt; onError, final Action0 onCompleted) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (onError == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onError can not be null&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (onCompleted == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onComplete can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论传入几个Action，最后都会返回<code>subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</code><br>哎呀，听人家讲不如自己去看看源码，也没几行 (●ﾟωﾟ●)</p>\n<p>上面这些都只是皮毛啦，RxJava真正的意义在于<strong>异步</strong>，『后台处理，前台回调』，而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。</p>\n<h3 id=\"线程控制Scheduler\"><a href=\"#线程控制Scheduler\" class=\"headerlink\" title=\"线程控制Scheduler\"></a>线程控制Scheduler</h3><p>用于指定每一段代码运行在什么样的线程之中。RxJava内置的Scheduler：</p>\n<ul>\n<li><code>Schedulers.immediate()</code>: 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>\n<li><code>Schedulers.newThread()</code>: 总是启用新线程，并在新线程执行操作。</li>\n<li><code>Schedulers.io()</code>: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>\n<li>另外， Android 还有一个专用的 <code>AndroidSchedulers.mainThread()</code>，它指定的操作将在 Android 主线程运行。</li>\n</ul>\n<p>有了这些个SchedulerJ就可以用<code>subscribeOn `</code>observeOn `这两个方法来对线程进行控制了。分别指定<strong>观察者在主线程</strong>用于更新UI，<strong>被观察者位于io线程</strong>执行以下耗时的操作。<br>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(123, 123, 123)</span><br><span class=\"line\">.subscribeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">.observeOn(Schedulers.io())</span><br><span class=\"line\">.subscribe &#123; integer -&gt; println(integer!!.toString()) &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"RxJava-异步\"><a href=\"#RxJava-异步\" class=\"headerlink\" title=\"RxJava - 异步\"></a>RxJava - 异步</h1><h3 id=\"Observable-被观察者-的创建\"><a href=\"#Observable-被观察者-的创建\" class=\"headerlink\" title=\"Observable(被观察者)的创建\"></a>Observable(被观察者)的创建</h3><p>它没有公开的构造方法，是通过内部的Create方法来创建一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Subscriber-Observer-观察者-的创建\"><a href=\"#Subscriber-Observer-观察者-的创建\" class=\"headerlink\" title=\"Subscriber/Observer(观察者)的创建\"></a>Subscriber/Observer(观察者)的创建</h3><p>Subscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subscriber&lt;String&gt; subscriber = new Subscriber&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;subscriber&quot; + s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Observer&lt;String&gt; observer = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;observer&quot;+s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"观察者响应被观察者\"><a href=\"#观察者响应被观察者\" class=\"headerlink\" title=\"观察者响应被观察者\"></a>观察者响应被观察者</h3><p>我们知道<a href=\"https://o0o0oo00.github.io/2018/10/09/Observer/#more\">观察者模式</a>，是<strong>被观察者持有观察者</strong>的引用，进而遍历所有观察者，调用（通知）其方法来达到响应的目的。<br>所以我们看RxJava中的关联方式是通过<strong>被观察者订阅被观察者</strong>observable.subscribe(observer/subscriber)来实现的。这个地方可能与概念有些不贴切，因为概念是观察者要响应的是被观察者，所以这里通过<strong>被观察者订阅被观察者</strong>来达到<strong>观察者响应被观察者</strong>的目的</p>\n<ol>\n<li>创建被观察者<code>Observable</code>与观察者<code>Observer</code>对象</li>\n<li>观察者订阅被观察者，实际是<strong>观察者</strong>当做参数传入<strong>被观察者</strong> <code>observable.subscribe(observer);</code></li>\n<li><strong>被观察者</strong><code>Observable</code>的重写方法<code>call()</code>中调用<strong>观察者</strong><code>Observer</code>的<code>onNext</code>方法。然后<code>Observer</code><strong>重写</strong>的<code>onNext</code>进行相应的处理</li>\n</ol>\n<h3 id=\"Observable的其他创建方式\"><a href=\"#Observable的其他创建方式\" class=\"headerlink\" title=\"Observable的其他创建方式\"></a>Observable的其他创建方式</h3><h4 id=\"Observable-just-t-T-具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\"><a href=\"#Observable-just-t-T-具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\" class=\"headerlink\" title=\"Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。\"></a>Observable.just(t : T) 具有多个参数的重载方法，源码中就有多达10个参数的重载方法。</h4><p>例如：相当于执行<code>call</code>方法中的<code>subscriber.`</code>onNext(“123”)<code>onNext(&quot;234&quot;)</code>onCompleted()`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(&quot;123&quot;,&quot;234&quot;).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Observable-from-Iterable-lt-extends-T-gt-iterable\"><a href=\"#Observable-from-Iterable-lt-extends-T-gt-iterable\" class=\"headerlink\" title=\"Observable.from(Iterable&lt;? extends T&gt; iterable)\"></a>Observable.from(Iterable&lt;? extends T&gt; iterable)</h4><p><code>from(Iterable&lt;? extends T&gt; iterable)</code><strong>支持从数组或者是实现了Iterator接口的集合中接收参数</strong><br>例如：这两种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.from(new String[]&#123;&quot;345&quot;,&quot;456&quot;&#125;).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(&quot;567&quot;);</span><br><span class=\"line\">list.add(&quot;678&quot;);</span><br><span class=\"line\">Observable.from(list).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\">System.out.println(&quot;onCompleted&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>PostScript</strong>：当just参数在2个以上时，实际上内部调用的也是from(T[] array)方法。</p>\n<h4 id=\"Action0、Action1-lt-T-gt-…-Action9-lt-T1-T2-T3-T4-T5-T6-T7-T8-T9-gt\"><a href=\"#Action0、Action1-lt-T-gt-…-Action9-lt-T1-T2-T3-T4-T5-T6-T7-T8-T9-gt\" class=\"headerlink\" title=\"Action0、Action1&lt;T&gt; … Action9&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;\"></a><code>Action0</code>、<code>Action1&lt;T&gt;</code> … <code>Action9&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;</code></h4><p>0个参数的Action,1个参数的Action<br>Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;String&gt; observable = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">subscriber.onNext(&quot;123&quot;);</span><br><span class=\"line\">subscriber.onNext(&quot;234&quot;);</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;onNext&quot;+s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action1&lt;Throwable&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Throwable throwable) &#123;</span><br><span class=\"line\">System.out.println(&quot;onError&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action0() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">System.out.println(&quot;onComplete&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>来看看源码中定义的使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Action1&lt;Throwable&gt; onError = InternalObservableUtils.ERROR_NOT_IMPLEMENTED;</span><br><span class=\"line\">Action0 onCompleted = Actions.empty();</span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext, final Action1&lt;Throwable&gt; onError) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (onError == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onError can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Action0 onCompleted = Actions.empty();</span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final Subscription subscribe(final Action1&lt;? super T&gt; onNext, final Action1&lt;Throwable&gt; onError, final Action0 onCompleted) &#123;</span><br><span class=\"line\">if (onNext == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onNext can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (onError == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onError can not be null&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (onCompleted == null) &#123;</span><br><span class=\"line\">throw new IllegalArgumentException(&quot;onComplete can not be null&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论传入几个Action，最后都会返回<code>subscribe(new ActionSubscriber&lt;T&gt;(onNext, onError, onCompleted));</code><br>哎呀，听人家讲不如自己去看看源码，也没几行 (●ﾟωﾟ●)</p>\n<p>上面这些都只是皮毛啦，RxJava真正的意义在于<strong>异步</strong>，『后台处理，前台回调』，而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。</p>\n<h3 id=\"线程控制Scheduler\"><a href=\"#线程控制Scheduler\" class=\"headerlink\" title=\"线程控制Scheduler\"></a>线程控制Scheduler</h3><p>用于指定每一段代码运行在什么样的线程之中。RxJava内置的Scheduler：</p>\n<ul>\n<li><code>Schedulers.immediate()</code>: 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>\n<li><code>Schedulers.newThread()</code>: 总是启用新线程，并在新线程执行操作。</li>\n<li><code>Schedulers.io()</code>: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>\n<li>另外， Android 还有一个专用的 <code>AndroidSchedulers.mainThread()</code>，它指定的操作将在 Android 主线程运行。</li>\n</ul>\n<p>有了这些个SchedulerJ就可以用<code>subscribeOn `</code>observeOn `这两个方法来对线程进行控制了。分别指定<strong>观察者在主线程</strong>用于更新UI，<strong>被观察者位于io线程</strong>执行以下耗时的操作。<br>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(123, 123, 123)</span><br><span class=\"line\">.subscribeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">.observeOn(Schedulers.io())</span><br><span class=\"line\">.subscribe &#123; integer -&gt; println(integer!!.toString()) &#125;</span><br></pre></td></tr></table></figure>"},{"title":"RxJava操作符举例","date":"2018-10-16T07:59:39.000Z","_content":"### 变换与操作符\n**所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。**\n\n#### map()操作符\nfunc1有两个泛型，一个是输入泛型，一个是输出泛型，可以看到下面这个例子，输入的是Integer类型，在map的重写方法中进行一系列操作例如`integer.toString()`来将输入类型转换为输出类型。于是观察者收到的类型就变成了String\n\n```\nobservable.map(new Func1<Integer, String>() {\n@Override\npublic String call(Integer integer) {\nreturn integer.toString();\n}\n}).subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n```\n<!--more-->\n### 操作符举例\n#### first()/last()\n只发射第一个数据项，或者是满足条件的第一个数据项。 \n附带一个`onCompleted`  \n\n```\nObservable.just(1,2,3,4,5)\n.first()\n.subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer.toString());\n}\n});\n}\n```\n结果 1\n#### merge()\n合并多个Observeable的发射数据。 可能交错发送\n\n```\nObservable<Integer> just = Observable.just(1, 2, 3);\nObservable<Integer> just1 = Observable.just(4, 5, 6);\nObservable.merge(just1, just).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer.toString());\n}\n});\n```\n结果 456123\n#### concat()\n不同于merge,他是有序发送的\n#### zip()\n将两个发射项合并一起\n\n```\nObservable<Integer> just = Observable.just(1, 2, 3);\nObservable<String> just1 = Observable.just(\"a\", \"b\", \"c\");\nObservable.zip(just1, just, new Func2<String, Integer, String>() {\n@Override\npublic String call(String s, Integer integer) {\nreturn s + integer;//合并操作\n}\n}).subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n```\n\n结果：a1 b2 c3\n\n#### repeat(times)\n#### range(start , count)\n\n```\nObservable.range(10,2).repeat(2).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer);\n}\n});\n```\n结果为： 10 11 10 11\n\n#### flatMap(Func1)\n不同于map的一对一。他是一对多的关系。  \nA中有一个list，我们现在要发送一个A，但是观察者接收的要是其中的list,\n\n```\nclass A {\nList<String> list = new ArrayList<>();\npublic A() {\nfor (int i = 0; i < 10; i++) {\nlist.add(\"index \" + i);\n}\n}\n}\nObservable\n.just(new A())\n.flatMap(new Func1<A, Observable<String>>() {\n@Override\npublic Observable<String> call(A a) {\nreturn Observable.from(a.list);\n}\n})\n.subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n\n```\n\n结果为：  \nindex 0 index 1 index 2 index 3 index 4 index 5 index 6 index 7 index 8 index 9\n\n#### timer / interval\ntimer():  \ndelay延迟后发送一个值为 long型的0 内部通过onSubscribeTimerOnce工作\n\n```\nObservable.timer(2, TimeUnit.SECONDS)\n.subscribe(new Action1<Long>() {\n@Override\npublic void call(Long aLong) {\nSystem.out.println(\"收到一个为\" + aLong + \"的值\");\n}\n});\n```\n\ninterval():\n间隔interval的时间发送一个从0开始的递增,内部通过OnSubscribeTimerPeriodically工作。\n\n```\nObservable.interval(2, TimeUnit.SECONDS).subscribe(new Action1<Long>() {\n@Override\npublic void call(Long aLong) {\nSystem.out.println(\"收到一个\" + aLong + \"的值\");\n}\n});\n```\n#### startWith\nstartWith： 在数据序列的开头增加一项数据。startWith的内部也是调用了concat\n#### ofType\n`ofType(final Class<R> klass)`\n与filter类似\n#### take(N) / takeLast(N)\n只发射前/后N个数据\n#### skip（N）/ skipLast\n跳过前/后N项\n#### ignoreElements\n丢弃所有数据，只发射错误或正常终止的通知。内部通过OperatorIgnoreElements实现。\n#### distinct / distinctUntilChanged\n过滤重复数据 / 过滤掉连续重复的数据\n#### reduce \n对数据进行聚合操作，只返回最终结果\n\n```\nObservable.just(1, 2, 3, 4, 5)\n.reduce(new Func2<Integer, Integer, Integer>() {\n@Override\npublic Integer call(Integer integer, Integer integer2) {\nreturn (integer + integer2);\n}\n}).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer);\n}\n});\n```\n#### collect\n\n```\nObservable.just(1, 2, 3, 4, 5)\n.collect(new Func0<List<Integer>>() {\n@Override\npublic List<Integer> call() {\nreturn new ArrayList<>();\n}\n}, new Action2<List<Integer>, Integer>() {\n@Override\npublic void call(List<Integer> o, Integer integer) {\no.add(integer);\n}\n})\n.subscribe(new Action1<List<Integer>>() {\n@Override\npublic void call(List<Integer> o) {\nSystem.out.println(o.toString());\n}\n});\n```\n结果：[1, 2, 3, 4, 5]\n\n#### toList / toSortedList / toMap\n\n```\nObservable.just(1,3,4,5,6).toList().subscribe(new Action1<List<Integer>>() {\n@Override\npublic void call(List<Integer> integers) {\nSystem.out.println(integers.toString());\n}\n});\n```\n\n\n### 最后来一个例子\n\n```\nfinal String memoryCache = null;\nfinal String diskCache = \"从磁盘缓存中获取数据\";\nObservable<String> memory = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nif (memoryCache == null) {\nsubscriber.onCompleted();\n} else {\nsubscriber.onNext(memoryCache);\n}\n}\n});\n\nObservable<String> disk = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nif (diskCache == null){\nsubscriber.onCompleted();\n}else{\nsubscriber.onNext(diskCache);\n}\n}\n});\n\nObservable<String> net = Observable.just(\"从NET中获取数据\");\n\nObservable.concat(memory,disk,net)\n//                .first()\n.subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\nSystem.out.println(\"onCompleted\");\n}\n\n@Override\npublic void onError(Throwable e) {\nSystem.out.println(\"onError\");\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"最终是 \" + s);\n}\n});\n\n```\n**Attention ！！** \n\nconcat 就是如果前一个不发送onComplete那么后一个是不会执行的。\n","source":"_posts/rxoperator.md","raw":"---\ntitle: RxJava操作符举例\ndate: 2018-10-16 15:59:39\ncategories: 技术\n---\n### 变换与操作符\n**所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。**\n\n#### map()操作符\nfunc1有两个泛型，一个是输入泛型，一个是输出泛型，可以看到下面这个例子，输入的是Integer类型，在map的重写方法中进行一系列操作例如`integer.toString()`来将输入类型转换为输出类型。于是观察者收到的类型就变成了String\n\n```\nobservable.map(new Func1<Integer, String>() {\n@Override\npublic String call(Integer integer) {\nreturn integer.toString();\n}\n}).subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n```\n<!--more-->\n### 操作符举例\n#### first()/last()\n只发射第一个数据项，或者是满足条件的第一个数据项。 \n附带一个`onCompleted`  \n\n```\nObservable.just(1,2,3,4,5)\n.first()\n.subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer.toString());\n}\n});\n}\n```\n结果 1\n#### merge()\n合并多个Observeable的发射数据。 可能交错发送\n\n```\nObservable<Integer> just = Observable.just(1, 2, 3);\nObservable<Integer> just1 = Observable.just(4, 5, 6);\nObservable.merge(just1, just).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer.toString());\n}\n});\n```\n结果 456123\n#### concat()\n不同于merge,他是有序发送的\n#### zip()\n将两个发射项合并一起\n\n```\nObservable<Integer> just = Observable.just(1, 2, 3);\nObservable<String> just1 = Observable.just(\"a\", \"b\", \"c\");\nObservable.zip(just1, just, new Func2<String, Integer, String>() {\n@Override\npublic String call(String s, Integer integer) {\nreturn s + integer;//合并操作\n}\n}).subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n```\n\n结果：a1 b2 c3\n\n#### repeat(times)\n#### range(start , count)\n\n```\nObservable.range(10,2).repeat(2).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer);\n}\n});\n```\n结果为： 10 11 10 11\n\n#### flatMap(Func1)\n不同于map的一对一。他是一对多的关系。  \nA中有一个list，我们现在要发送一个A，但是观察者接收的要是其中的list,\n\n```\nclass A {\nList<String> list = new ArrayList<>();\npublic A() {\nfor (int i = 0; i < 10; i++) {\nlist.add(\"index \" + i);\n}\n}\n}\nObservable\n.just(new A())\n.flatMap(new Func1<A, Observable<String>>() {\n@Override\npublic Observable<String> call(A a) {\nreturn Observable.from(a.list);\n}\n})\n.subscribe(new Action1<String>() {\n@Override\npublic void call(String s) {\nSystem.out.println(s);\n}\n});\n\n```\n\n结果为：  \nindex 0 index 1 index 2 index 3 index 4 index 5 index 6 index 7 index 8 index 9\n\n#### timer / interval\ntimer():  \ndelay延迟后发送一个值为 long型的0 内部通过onSubscribeTimerOnce工作\n\n```\nObservable.timer(2, TimeUnit.SECONDS)\n.subscribe(new Action1<Long>() {\n@Override\npublic void call(Long aLong) {\nSystem.out.println(\"收到一个为\" + aLong + \"的值\");\n}\n});\n```\n\ninterval():\n间隔interval的时间发送一个从0开始的递增,内部通过OnSubscribeTimerPeriodically工作。\n\n```\nObservable.interval(2, TimeUnit.SECONDS).subscribe(new Action1<Long>() {\n@Override\npublic void call(Long aLong) {\nSystem.out.println(\"收到一个\" + aLong + \"的值\");\n}\n});\n```\n#### startWith\nstartWith： 在数据序列的开头增加一项数据。startWith的内部也是调用了concat\n#### ofType\n`ofType(final Class<R> klass)`\n与filter类似\n#### take(N) / takeLast(N)\n只发射前/后N个数据\n#### skip（N）/ skipLast\n跳过前/后N项\n#### ignoreElements\n丢弃所有数据，只发射错误或正常终止的通知。内部通过OperatorIgnoreElements实现。\n#### distinct / distinctUntilChanged\n过滤重复数据 / 过滤掉连续重复的数据\n#### reduce \n对数据进行聚合操作，只返回最终结果\n\n```\nObservable.just(1, 2, 3, 4, 5)\n.reduce(new Func2<Integer, Integer, Integer>() {\n@Override\npublic Integer call(Integer integer, Integer integer2) {\nreturn (integer + integer2);\n}\n}).subscribe(new Action1<Integer>() {\n@Override\npublic void call(Integer integer) {\nSystem.out.println(integer);\n}\n});\n```\n#### collect\n\n```\nObservable.just(1, 2, 3, 4, 5)\n.collect(new Func0<List<Integer>>() {\n@Override\npublic List<Integer> call() {\nreturn new ArrayList<>();\n}\n}, new Action2<List<Integer>, Integer>() {\n@Override\npublic void call(List<Integer> o, Integer integer) {\no.add(integer);\n}\n})\n.subscribe(new Action1<List<Integer>>() {\n@Override\npublic void call(List<Integer> o) {\nSystem.out.println(o.toString());\n}\n});\n```\n结果：[1, 2, 3, 4, 5]\n\n#### toList / toSortedList / toMap\n\n```\nObservable.just(1,3,4,5,6).toList().subscribe(new Action1<List<Integer>>() {\n@Override\npublic void call(List<Integer> integers) {\nSystem.out.println(integers.toString());\n}\n});\n```\n\n\n### 最后来一个例子\n\n```\nfinal String memoryCache = null;\nfinal String diskCache = \"从磁盘缓存中获取数据\";\nObservable<String> memory = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nif (memoryCache == null) {\nsubscriber.onCompleted();\n} else {\nsubscriber.onNext(memoryCache);\n}\n}\n});\n\nObservable<String> disk = Observable.create(new Observable.OnSubscribe<String>() {\n@Override\npublic void call(Subscriber<? super String> subscriber) {\nif (diskCache == null){\nsubscriber.onCompleted();\n}else{\nsubscriber.onNext(diskCache);\n}\n}\n});\n\nObservable<String> net = Observable.just(\"从NET中获取数据\");\n\nObservable.concat(memory,disk,net)\n//                .first()\n.subscribe(new Observer<String>() {\n@Override\npublic void onCompleted() {\nSystem.out.println(\"onCompleted\");\n}\n\n@Override\npublic void onError(Throwable e) {\nSystem.out.println(\"onError\");\n}\n\n@Override\npublic void onNext(String s) {\nSystem.out.println(\"最终是 \" + s);\n}\n});\n\n```\n**Attention ！！** \n\nconcat 就是如果前一个不发送onComplete那么后一个是不会执行的。\n","slug":"rxoperator","published":1,"updated":"2018-10-17T08:06:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydng000uor26vhfkpk65","content":"<h3 id=\"变换与操作符\"><a href=\"#变换与操作符\" class=\"headerlink\" title=\"变换与操作符\"></a>变换与操作符</h3><p><strong>所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。</strong></p>\n<h4 id=\"map-操作符\"><a href=\"#map-操作符\" class=\"headerlink\" title=\"map()操作符\"></a>map()操作符</h4><p>func1有两个泛型，一个是输入泛型，一个是输出泛型，可以看到下面这个例子，输入的是Integer类型，在map的重写方法中进行一系列操作例如<code>integer.toString()</code>来将输入类型转换为输出类型。于是观察者收到的类型就变成了String</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observable.map(new Func1&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public String call(Integer integer) &#123;</span><br><span class=\"line\">return integer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"操作符举例\"><a href=\"#操作符举例\" class=\"headerlink\" title=\"操作符举例\"></a>操作符举例</h3><h4 id=\"first-last\"><a href=\"#first-last\" class=\"headerlink\" title=\"first()/last()\"></a>first()/last()</h4><p>只发射第一个数据项，或者是满足条件的第一个数据项。<br>附带一个<code>onCompleted</code>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1,2,3,4,5)</span><br><span class=\"line\">.first()</span><br><span class=\"line\">.subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果 1</p>\n<h4 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge()\"></a>merge()</h4><p>合并多个Observeable的发射数据。 可能交错发送</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Integer&gt; just = Observable.just(1, 2, 3);</span><br><span class=\"line\">Observable&lt;Integer&gt; just1 = Observable.just(4, 5, 6);</span><br><span class=\"line\">Observable.merge(just1, just).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果 456123</p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>不同于merge,他是有序发送的</p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip()\"></a>zip()</h4><p>将两个发射项合并一起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Integer&gt; just = Observable.just(1, 2, 3);</span><br><span class=\"line\">Observable&lt;String&gt; just1 = Observable.just(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">Observable.zip(just1, just, new Func2&lt;String, Integer, String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public String call(String s, Integer integer) &#123;</span><br><span class=\"line\">return s + integer;//合并操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果：a1 b2 c3</p>\n<h4 id=\"repeat-times\"><a href=\"#repeat-times\" class=\"headerlink\" title=\"repeat(times)\"></a>repeat(times)</h4><h4 id=\"range-start-count\"><a href=\"#range-start-count\" class=\"headerlink\" title=\"range(start , count)\"></a>range(start , count)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.range(10,2).repeat(2).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果为： 10 11 10 11</p>\n<h4 id=\"flatMap-Func1\"><a href=\"#flatMap-Func1\" class=\"headerlink\" title=\"flatMap(Func1)\"></a>flatMap(Func1)</h4><p>不同于map的一对一。他是一对多的关系。<br>A中有一个list，我们现在要发送一个A，但是观察者接收的要是其中的list,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">public A() &#123;</span><br><span class=\"line\">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">list.add(&quot;index &quot; + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Observable</span><br><span class=\"line\">.just(new A())</span><br><span class=\"line\">.flatMap(new Func1&lt;A, Observable&lt;String&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Observable&lt;String&gt; call(A a) &#123;</span><br><span class=\"line\">return Observable.from(a.list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果为：<br>index 0 index 1 index 2 index 3 index 4 index 5 index 6 index 7 index 8 index 9</p>\n<h4 id=\"timer-interval\"><a href=\"#timer-interval\" class=\"headerlink\" title=\"timer / interval\"></a>timer / interval</h4><p>timer():<br>delay延迟后发送一个值为 long型的0 内部通过onSubscribeTimerOnce工作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.timer(2, TimeUnit.SECONDS)</span><br><span class=\"line\">.subscribe(new Action1&lt;Long&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Long aLong) &#123;</span><br><span class=\"line\">System.out.println(&quot;收到一个为&quot; + aLong + &quot;的值&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>interval():<br>间隔interval的时间发送一个从0开始的递增,内部通过OnSubscribeTimerPeriodically工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.interval(2, TimeUnit.SECONDS).subscribe(new Action1&lt;Long&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Long aLong) &#123;</span><br><span class=\"line\">System.out.println(&quot;收到一个&quot; + aLong + &quot;的值&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"startWith\"><a href=\"#startWith\" class=\"headerlink\" title=\"startWith\"></a>startWith</h4><p>startWith： 在数据序列的开头增加一项数据。startWith的内部也是调用了concat</p>\n<h4 id=\"ofType\"><a href=\"#ofType\" class=\"headerlink\" title=\"ofType\"></a>ofType</h4><p><code>ofType(final Class&lt;R&gt; klass)</code><br>与filter类似</p>\n<h4 id=\"take-N-takeLast-N\"><a href=\"#take-N-takeLast-N\" class=\"headerlink\" title=\"take(N) / takeLast(N)\"></a>take(N) / takeLast(N)</h4><p>只发射前/后N个数据</p>\n<h4 id=\"skip（N）-skipLast\"><a href=\"#skip（N）-skipLast\" class=\"headerlink\" title=\"skip（N）/ skipLast\"></a>skip（N）/ skipLast</h4><p>跳过前/后N项</p>\n<h4 id=\"ignoreElements\"><a href=\"#ignoreElements\" class=\"headerlink\" title=\"ignoreElements\"></a>ignoreElements</h4><p>丢弃所有数据，只发射错误或正常终止的通知。内部通过OperatorIgnoreElements实现。</p>\n<h4 id=\"distinct-distinctUntilChanged\"><a href=\"#distinct-distinctUntilChanged\" class=\"headerlink\" title=\"distinct / distinctUntilChanged\"></a>distinct / distinctUntilChanged</h4><p>过滤重复数据 / 过滤掉连续重复的数据</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>对数据进行聚合操作，只返回最终结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1, 2, 3, 4, 5)</span><br><span class=\"line\">.reduce(new Func2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Integer call(Integer integer, Integer integer2) &#123;</span><br><span class=\"line\">return (integer + integer2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1, 2, 3, 4, 5)</span><br><span class=\"line\">.collect(new Func0&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public List&lt;Integer&gt; call() &#123;</span><br><span class=\"line\">return new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action2&lt;List&lt;Integer&gt;, Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; o, Integer integer) &#123;</span><br><span class=\"line\">o.add(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.subscribe(new Action1&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; o) &#123;</span><br><span class=\"line\">System.out.println(o.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果：[1, 2, 3, 4, 5]</p>\n<h4 id=\"toList-toSortedList-toMap\"><a href=\"#toList-toSortedList-toMap\" class=\"headerlink\" title=\"toList / toSortedList / toMap\"></a>toList / toSortedList / toMap</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1,3,4,5,6).toList().subscribe(new Action1&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; integers) &#123;</span><br><span class=\"line\">System.out.println(integers.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后来一个例子\"><a href=\"#最后来一个例子\" class=\"headerlink\" title=\"最后来一个例子\"></a>最后来一个例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String memoryCache = null;</span><br><span class=\"line\">final String diskCache = &quot;从磁盘缓存中获取数据&quot;;</span><br><span class=\"line\">Observable&lt;String&gt; memory = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">if (memoryCache == null) &#123;</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">subscriber.onNext(memoryCache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable&lt;String&gt; disk = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">if (diskCache == null)&#123;</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">subscriber.onNext(diskCache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable&lt;String&gt; net = Observable.just(&quot;从NET中获取数据&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable.concat(memory,disk,net)</span><br><span class=\"line\">//                .first()</span><br><span class=\"line\">.subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\">System.out.println(&quot;onCompleted&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\">System.out.println(&quot;onError&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;最终是 &quot; + s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>Attention ！！</strong> </p>\n<p>concat 就是如果前一个不发送onComplete那么后一个是不会执行的。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"变换与操作符\"><a href=\"#变换与操作符\" class=\"headerlink\" title=\"变换与操作符\"></a>变换与操作符</h3><p><strong>所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。</strong></p>\n<h4 id=\"map-操作符\"><a href=\"#map-操作符\" class=\"headerlink\" title=\"map()操作符\"></a>map()操作符</h4><p>func1有两个泛型，一个是输入泛型，一个是输出泛型，可以看到下面这个例子，输入的是Integer类型，在map的重写方法中进行一系列操作例如<code>integer.toString()</code>来将输入类型转换为输出类型。于是观察者收到的类型就变成了String</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observable.map(new Func1&lt;Integer, String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public String call(Integer integer) &#123;</span><br><span class=\"line\">return integer.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"操作符举例\"><a href=\"#操作符举例\" class=\"headerlink\" title=\"操作符举例\"></a>操作符举例</h3><h4 id=\"first-last\"><a href=\"#first-last\" class=\"headerlink\" title=\"first()/last()\"></a>first()/last()</h4><p>只发射第一个数据项，或者是满足条件的第一个数据项。<br>附带一个<code>onCompleted</code>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1,2,3,4,5)</span><br><span class=\"line\">.first()</span><br><span class=\"line\">.subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果 1</p>\n<h4 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge()\"></a>merge()</h4><p>合并多个Observeable的发射数据。 可能交错发送</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Integer&gt; just = Observable.just(1, 2, 3);</span><br><span class=\"line\">Observable&lt;Integer&gt; just1 = Observable.just(4, 5, 6);</span><br><span class=\"line\">Observable.merge(just1, just).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果 456123</p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>不同于merge,他是有序发送的</p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip()\"></a>zip()</h4><p>将两个发射项合并一起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Integer&gt; just = Observable.just(1, 2, 3);</span><br><span class=\"line\">Observable&lt;String&gt; just1 = Observable.just(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">Observable.zip(just1, just, new Func2&lt;String, Integer, String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public String call(String s, Integer integer) &#123;</span><br><span class=\"line\">return s + integer;//合并操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果：a1 b2 c3</p>\n<h4 id=\"repeat-times\"><a href=\"#repeat-times\" class=\"headerlink\" title=\"repeat(times)\"></a>repeat(times)</h4><h4 id=\"range-start-count\"><a href=\"#range-start-count\" class=\"headerlink\" title=\"range(start , count)\"></a>range(start , count)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.range(10,2).repeat(2).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果为： 10 11 10 11</p>\n<h4 id=\"flatMap-Func1\"><a href=\"#flatMap-Func1\" class=\"headerlink\" title=\"flatMap(Func1)\"></a>flatMap(Func1)</h4><p>不同于map的一对一。他是一对多的关系。<br>A中有一个list，我们现在要发送一个A，但是观察者接收的要是其中的list,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">public A() &#123;</span><br><span class=\"line\">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">list.add(&quot;index &quot; + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Observable</span><br><span class=\"line\">.just(new A())</span><br><span class=\"line\">.flatMap(new Func1&lt;A, Observable&lt;String&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Observable&lt;String&gt; call(A a) &#123;</span><br><span class=\"line\">return Observable.from(a.list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(String s) &#123;</span><br><span class=\"line\">System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果为：<br>index 0 index 1 index 2 index 3 index 4 index 5 index 6 index 7 index 8 index 9</p>\n<h4 id=\"timer-interval\"><a href=\"#timer-interval\" class=\"headerlink\" title=\"timer / interval\"></a>timer / interval</h4><p>timer():<br>delay延迟后发送一个值为 long型的0 内部通过onSubscribeTimerOnce工作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.timer(2, TimeUnit.SECONDS)</span><br><span class=\"line\">.subscribe(new Action1&lt;Long&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Long aLong) &#123;</span><br><span class=\"line\">System.out.println(&quot;收到一个为&quot; + aLong + &quot;的值&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>interval():<br>间隔interval的时间发送一个从0开始的递增,内部通过OnSubscribeTimerPeriodically工作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.interval(2, TimeUnit.SECONDS).subscribe(new Action1&lt;Long&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Long aLong) &#123;</span><br><span class=\"line\">System.out.println(&quot;收到一个&quot; + aLong + &quot;的值&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"startWith\"><a href=\"#startWith\" class=\"headerlink\" title=\"startWith\"></a>startWith</h4><p>startWith： 在数据序列的开头增加一项数据。startWith的内部也是调用了concat</p>\n<h4 id=\"ofType\"><a href=\"#ofType\" class=\"headerlink\" title=\"ofType\"></a>ofType</h4><p><code>ofType(final Class&lt;R&gt; klass)</code><br>与filter类似</p>\n<h4 id=\"take-N-takeLast-N\"><a href=\"#take-N-takeLast-N\" class=\"headerlink\" title=\"take(N) / takeLast(N)\"></a>take(N) / takeLast(N)</h4><p>只发射前/后N个数据</p>\n<h4 id=\"skip（N）-skipLast\"><a href=\"#skip（N）-skipLast\" class=\"headerlink\" title=\"skip（N）/ skipLast\"></a>skip（N）/ skipLast</h4><p>跳过前/后N项</p>\n<h4 id=\"ignoreElements\"><a href=\"#ignoreElements\" class=\"headerlink\" title=\"ignoreElements\"></a>ignoreElements</h4><p>丢弃所有数据，只发射错误或正常终止的通知。内部通过OperatorIgnoreElements实现。</p>\n<h4 id=\"distinct-distinctUntilChanged\"><a href=\"#distinct-distinctUntilChanged\" class=\"headerlink\" title=\"distinct / distinctUntilChanged\"></a>distinct / distinctUntilChanged</h4><p>过滤重复数据 / 过滤掉连续重复的数据</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h4><p>对数据进行聚合操作，只返回最终结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1, 2, 3, 4, 5)</span><br><span class=\"line\">.reduce(new Func2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Integer call(Integer integer, Integer integer2) &#123;</span><br><span class=\"line\">return (integer + integer2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;).subscribe(new Action1&lt;Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Integer integer) &#123;</span><br><span class=\"line\">System.out.println(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"collect\"><a href=\"#collect\" class=\"headerlink\" title=\"collect\"></a>collect</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1, 2, 3, 4, 5)</span><br><span class=\"line\">.collect(new Func0&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public List&lt;Integer&gt; call() &#123;</span><br><span class=\"line\">return new ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;, new Action2&lt;List&lt;Integer&gt;, Integer&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; o, Integer integer) &#123;</span><br><span class=\"line\">o.add(integer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.subscribe(new Action1&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; o) &#123;</span><br><span class=\"line\">System.out.println(o.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果：[1, 2, 3, 4, 5]</p>\n<h4 id=\"toList-toSortedList-toMap\"><a href=\"#toList-toSortedList-toMap\" class=\"headerlink\" title=\"toList / toSortedList / toMap\"></a>toList / toSortedList / toMap</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.just(1,3,4,5,6).toList().subscribe(new Action1&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(List&lt;Integer&gt; integers) &#123;</span><br><span class=\"line\">System.out.println(integers.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后来一个例子\"><a href=\"#最后来一个例子\" class=\"headerlink\" title=\"最后来一个例子\"></a>最后来一个例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String memoryCache = null;</span><br><span class=\"line\">final String diskCache = &quot;从磁盘缓存中获取数据&quot;;</span><br><span class=\"line\">Observable&lt;String&gt; memory = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">if (memoryCache == null) &#123;</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">subscriber.onNext(memoryCache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable&lt;String&gt; disk = Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">if (diskCache == null)&#123;</span><br><span class=\"line\">subscriber.onCompleted();</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">subscriber.onNext(diskCache);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable&lt;String&gt; net = Observable.just(&quot;从NET中获取数据&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable.concat(memory,disk,net)</span><br><span class=\"line\">//                .first()</span><br><span class=\"line\">.subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onCompleted() &#123;</span><br><span class=\"line\">System.out.println(&quot;onCompleted&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onError(Throwable e) &#123;</span><br><span class=\"line\">System.out.println(&quot;onError&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onNext(String s) &#123;</span><br><span class=\"line\">System.out.println(&quot;最终是 &quot; + s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>Attention ！！</strong> </p>\n<p>concat 就是如果前一个不发送onComplete那么后一个是不会执行的。</p>"},{"title":"2018-09-25 天气好好","date":"2018-09-25T11:06:41.000Z","_content":"\n<!--more-->\n\n","source":"_posts/天气好好.md","raw":"---\ntitle: 2018-09-25 天气好好\ndate: 2018-09-25 19:06:41\ncategories: Diary\n---\n\n<!--more-->\n\n","slug":"天气好好","published":1,"updated":"2018-09-30T03:59:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydni000wor264owsdxry","content":"<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"","more":""},{"title":"twitter 登录 分享","date":"2018-09-18T07:51:54.000Z","_content":"### Twitter 登录\n#### 1、添加依赖：\n**implementation 'com.twitter.sdk.android:twitter:3.1.1'  \nimplementation 'com.twitter.sdk.android:tweet-composer:3.1.1'**\n<!--more-->\n#### 2、添加KEY SECRET\n在value string 文件夹下面\n```\n<string name=\"com.twitter.sdk.android.CONSUMER_KEY\">uy0CK2sjygumtE7J445NQB9s4</string>  \n```\n```\n<string name=\"com.twitter.sdk.android.CONSUMER_SECRET\">3bI33NoTXqTGV5JIU0MmVlllqygY55CHWNOXTsTnKiho3MbbPO</string>\n```\n#### 3、初始化Twitter\nApplication 中 **Twitter.initialize(this)**\n\n#### 4、Activity / fragment 的布局中加loggin button\n```\n<com.twitter.sdk.android.core.identity.TwitterLoginButton\nandroid:id=\"@+id/loginButton\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\" />\n```\n##### 登录回调\n```\nloginButton.callback = object : Callback<TwitterSession>() {\noverride fun success(result: Result<TwitterSession>) {\nToast.makeText(this@MainActivity, \"login success\", Toast.LENGTH_SHORT).show()\n}\n\noverride fun failure(exception: TwitterException) {\nToast.makeText(this@MainActivity, \"login failure\", Toast.LENGTH_SHORT).show()\n}\n}\n\n```\n##### 启动logginButton回调\n```\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\nsuper.onActivityResult(requestCode, resultCode, data)\nloginButton.onActivityResult(requestCode, resultCode, data)\n}\n\n```\n##### 拿到用户信息\n```\nfun requestUser() {\nval apiClient = TwitterCore.getInstance().apiClient\nval call = apiClient.accountService.verifyCredentials(true, false, true)\ncall.enqueue(object : Callback<User>() {\noverride fun success(result: Result<User>) {\nLog.e(\"123\", result.data?.let {\nit.name + it.id + it.idStr\n})\n}\n\noverride fun failure(exception: TwitterException?) {\nLog.e(\"123\", \"get user failure\")\n}\n\n})\n}\n```\n\n### Twitter分享\n\n#### 两种方式分享\n##### 1、Launching Twitter Composer 无回调\n```\ntry {\nval builder = TweetComposer.Builder(this@MainActivity)\n.url(URL(\"https://www.google.com/\"))\n.text(\"nice to meet you\")\nbuilder.show()\n} catch (e: MalformedURLException) {\ne.printStackTrace()\n}\n```\n##### 2、Twitter Kit Native Composer 有回调\n```\nval session = TwitterCore.getInstance().sessionManager?.activeSession\nsession?.let {\nval intent = ComposerActivity.Builder(this@MainActivity)\n.session(session)\n.text(\"Love where you work\")\n.hashtags(\"#twitter\")\n.createIntent()\nstartActivity(intent)\n}\n```\n回调采用的是广播方式：\n```\nclass MyResultReceiver : BroadcastReceiver() {\noverride fun onReceive(context: Context?, intent: Intent) {\nif (TweetUploadService.UPLOAD_SUCCESS == intent.action) {\n// success Twitter分享成功的回调\nToast.makeText(context, \"分享成功的回调\", Toast.LENGTH_SHORT).show()\nval tweetId = intent.extras.getLong(TweetUploadService.EXTRA_TWEET_ID);\n} else {\nToast.makeText(context, \"分享failure的回调\", Toast.LENGTH_SHORT).show()\n// failure\n//            val retryIntent = intent.extras.getParcelable(TweetUploadService.EXTRA_RETRY_INTENT);\n}\n}\n}\n```\n注册广播：\n```\n<receiver\nandroid:name=\".MyResultReceiver\"\nandroid:exported=\"false\">\n<intent-filter>\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.UPLOAD_SUCCESS\" />\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.UPLOAD_FAILURE\" />\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.TWEET_COMPOSE_CANCEL\"/>\n</intent-filter>\n</receiver>\n```\n","source":"_posts/twitter.md","raw":"---\ntitle: twitter 登录 分享\ndate: 2018-09-18 15:51:54\ncategories: 技术\n---\n### Twitter 登录\n#### 1、添加依赖：\n**implementation 'com.twitter.sdk.android:twitter:3.1.1'  \nimplementation 'com.twitter.sdk.android:tweet-composer:3.1.1'**\n<!--more-->\n#### 2、添加KEY SECRET\n在value string 文件夹下面\n```\n<string name=\"com.twitter.sdk.android.CONSUMER_KEY\">uy0CK2sjygumtE7J445NQB9s4</string>  \n```\n```\n<string name=\"com.twitter.sdk.android.CONSUMER_SECRET\">3bI33NoTXqTGV5JIU0MmVlllqygY55CHWNOXTsTnKiho3MbbPO</string>\n```\n#### 3、初始化Twitter\nApplication 中 **Twitter.initialize(this)**\n\n#### 4、Activity / fragment 的布局中加loggin button\n```\n<com.twitter.sdk.android.core.identity.TwitterLoginButton\nandroid:id=\"@+id/loginButton\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\" />\n```\n##### 登录回调\n```\nloginButton.callback = object : Callback<TwitterSession>() {\noverride fun success(result: Result<TwitterSession>) {\nToast.makeText(this@MainActivity, \"login success\", Toast.LENGTH_SHORT).show()\n}\n\noverride fun failure(exception: TwitterException) {\nToast.makeText(this@MainActivity, \"login failure\", Toast.LENGTH_SHORT).show()\n}\n}\n\n```\n##### 启动logginButton回调\n```\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\nsuper.onActivityResult(requestCode, resultCode, data)\nloginButton.onActivityResult(requestCode, resultCode, data)\n}\n\n```\n##### 拿到用户信息\n```\nfun requestUser() {\nval apiClient = TwitterCore.getInstance().apiClient\nval call = apiClient.accountService.verifyCredentials(true, false, true)\ncall.enqueue(object : Callback<User>() {\noverride fun success(result: Result<User>) {\nLog.e(\"123\", result.data?.let {\nit.name + it.id + it.idStr\n})\n}\n\noverride fun failure(exception: TwitterException?) {\nLog.e(\"123\", \"get user failure\")\n}\n\n})\n}\n```\n\n### Twitter分享\n\n#### 两种方式分享\n##### 1、Launching Twitter Composer 无回调\n```\ntry {\nval builder = TweetComposer.Builder(this@MainActivity)\n.url(URL(\"https://www.google.com/\"))\n.text(\"nice to meet you\")\nbuilder.show()\n} catch (e: MalformedURLException) {\ne.printStackTrace()\n}\n```\n##### 2、Twitter Kit Native Composer 有回调\n```\nval session = TwitterCore.getInstance().sessionManager?.activeSession\nsession?.let {\nval intent = ComposerActivity.Builder(this@MainActivity)\n.session(session)\n.text(\"Love where you work\")\n.hashtags(\"#twitter\")\n.createIntent()\nstartActivity(intent)\n}\n```\n回调采用的是广播方式：\n```\nclass MyResultReceiver : BroadcastReceiver() {\noverride fun onReceive(context: Context?, intent: Intent) {\nif (TweetUploadService.UPLOAD_SUCCESS == intent.action) {\n// success Twitter分享成功的回调\nToast.makeText(context, \"分享成功的回调\", Toast.LENGTH_SHORT).show()\nval tweetId = intent.extras.getLong(TweetUploadService.EXTRA_TWEET_ID);\n} else {\nToast.makeText(context, \"分享failure的回调\", Toast.LENGTH_SHORT).show()\n// failure\n//            val retryIntent = intent.extras.getParcelable(TweetUploadService.EXTRA_RETRY_INTENT);\n}\n}\n}\n```\n注册广播：\n```\n<receiver\nandroid:name=\".MyResultReceiver\"\nandroid:exported=\"false\">\n<intent-filter>\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.UPLOAD_SUCCESS\" />\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.UPLOAD_FAILURE\" />\n<action android:name=\"com.twitter.sdk.android.tweetcomposer.TWEET_COMPOSE_CANCEL\"/>\n</intent-filter>\n</receiver>\n```\n","slug":"twitter","published":1,"updated":"2018-09-21T03:11:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydnj000yor26rr6998j1","content":"<h3 id=\"Twitter-登录\"><a href=\"#Twitter-登录\" class=\"headerlink\" title=\"Twitter 登录\"></a>Twitter 登录</h3><h4 id=\"1、添加依赖：\"><a href=\"#1、添加依赖：\" class=\"headerlink\" title=\"1、添加依赖：\"></a>1、添加依赖：</h4><p><strong>implementation ‘com.twitter.sdk.android:twitter:3.1.1’<br>implementation ‘com.twitter.sdk.android:tweet-composer:3.1.1’</strong><br><a id=\"more\"></a></p>\n<h4 id=\"2、添加KEY-SECRET\"><a href=\"#2、添加KEY-SECRET\" class=\"headerlink\" title=\"2、添加KEY SECRET\"></a>2、添加KEY SECRET</h4><p>在value string 文件夹下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string name=&quot;com.twitter.sdk.android.CONSUMER_KEY&quot;&gt;uy0CK2sjygumtE7J445NQB9s4&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string name=&quot;com.twitter.sdk.android.CONSUMER_SECRET&quot;&gt;3bI33NoTXqTGV5JIU0MmVlllqygY55CHWNOXTsTnKiho3MbbPO&lt;/string&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、初始化Twitter\"><a href=\"#3、初始化Twitter\" class=\"headerlink\" title=\"3、初始化Twitter\"></a>3、初始化Twitter</h4><p>Application 中 <strong>Twitter.initialize(this)</strong></p>\n<h4 id=\"4、Activity-fragment-的布局中加loggin-button\"><a href=\"#4、Activity-fragment-的布局中加loggin-button\" class=\"headerlink\" title=\"4、Activity / fragment 的布局中加loggin button\"></a>4、Activity / fragment 的布局中加loggin button</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.twitter.sdk.android.core.identity.TwitterLoginButton</span><br><span class=\"line\">android:id=&quot;@+id/loginButton&quot;</span><br><span class=\"line\">android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">android:layout_height=&quot;wrap_content&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"登录回调\"><a href=\"#登录回调\" class=\"headerlink\" title=\"登录回调\"></a>登录回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loginButton.callback = object : Callback&lt;TwitterSession&gt;() &#123;</span><br><span class=\"line\">override fun success(result: Result&lt;TwitterSession&gt;) &#123;</span><br><span class=\"line\">Toast.makeText(this@MainActivity, &quot;login success&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun failure(exception: TwitterException) &#123;</span><br><span class=\"line\">Toast.makeText(this@MainActivity, &quot;login failure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动logginButton回调\"><a href=\"#启动logginButton回调\" class=\"headerlink\" title=\"启动logginButton回调\"></a>启动logginButton回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class=\"line\">super.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">loginButton.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"拿到用户信息\"><a href=\"#拿到用户信息\" class=\"headerlink\" title=\"拿到用户信息\"></a>拿到用户信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun requestUser() &#123;</span><br><span class=\"line\">val apiClient = TwitterCore.getInstance().apiClient</span><br><span class=\"line\">val call = apiClient.accountService.verifyCredentials(true, false, true)</span><br><span class=\"line\">call.enqueue(object : Callback&lt;User&gt;() &#123;</span><br><span class=\"line\">override fun success(result: Result&lt;User&gt;) &#123;</span><br><span class=\"line\">Log.e(&quot;123&quot;, result.data?.let &#123;</span><br><span class=\"line\">it.name + it.id + it.idStr</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun failure(exception: TwitterException?) &#123;</span><br><span class=\"line\">Log.e(&quot;123&quot;, &quot;get user failure&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Twitter分享\"><a href=\"#Twitter分享\" class=\"headerlink\" title=\"Twitter分享\"></a>Twitter分享</h3><h4 id=\"两种方式分享\"><a href=\"#两种方式分享\" class=\"headerlink\" title=\"两种方式分享\"></a>两种方式分享</h4><h5 id=\"1、Launching-Twitter-Composer-无回调\"><a href=\"#1、Launching-Twitter-Composer-无回调\" class=\"headerlink\" title=\"1、Launching Twitter Composer 无回调\"></a>1、Launching Twitter Composer 无回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">val builder = TweetComposer.Builder(this@MainActivity)</span><br><span class=\"line\">.url(URL(&quot;https://www.google.com/&quot;))</span><br><span class=\"line\">.text(&quot;nice to meet you&quot;)</span><br><span class=\"line\">builder.show()</span><br><span class=\"line\">&#125; catch (e: MalformedURLException) &#123;</span><br><span class=\"line\">e.printStackTrace()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、Twitter-Kit-Native-Composer-有回调\"><a href=\"#2、Twitter-Kit-Native-Composer-有回调\" class=\"headerlink\" title=\"2、Twitter Kit Native Composer 有回调\"></a>2、Twitter Kit Native Composer 有回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val session = TwitterCore.getInstance().sessionManager?.activeSession</span><br><span class=\"line\">session?.let &#123;</span><br><span class=\"line\">val intent = ComposerActivity.Builder(this@MainActivity)</span><br><span class=\"line\">.session(session)</span><br><span class=\"line\">.text(&quot;Love where you work&quot;)</span><br><span class=\"line\">.hashtags(&quot;#twitter&quot;)</span><br><span class=\"line\">.createIntent()</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调采用的是广播方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyResultReceiver : BroadcastReceiver() &#123;</span><br><span class=\"line\">override fun onReceive(context: Context?, intent: Intent) &#123;</span><br><span class=\"line\">if (TweetUploadService.UPLOAD_SUCCESS == intent.action) &#123;</span><br><span class=\"line\">// success Twitter分享成功的回调</span><br><span class=\"line\">Toast.makeText(context, &quot;分享成功的回调&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">val tweetId = intent.extras.getLong(TweetUploadService.EXTRA_TWEET_ID);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">Toast.makeText(context, &quot;分享failure的回调&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">// failure</span><br><span class=\"line\">//            val retryIntent = intent.extras.getParcelable(TweetUploadService.EXTRA_RETRY_INTENT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注册广播：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">android:name=&quot;.MyResultReceiver&quot;</span><br><span class=\"line\">android:exported=&quot;false&quot;&gt;</span><br><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.UPLOAD_SUCCESS&quot; /&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.UPLOAD_FAILURE&quot; /&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.TWEET_COMPOSE_CANCEL&quot;/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Twitter-登录\"><a href=\"#Twitter-登录\" class=\"headerlink\" title=\"Twitter 登录\"></a>Twitter 登录</h3><h4 id=\"1、添加依赖：\"><a href=\"#1、添加依赖：\" class=\"headerlink\" title=\"1、添加依赖：\"></a>1、添加依赖：</h4><p><strong>implementation ‘com.twitter.sdk.android:twitter:3.1.1’<br>implementation ‘com.twitter.sdk.android:tweet-composer:3.1.1’</strong><br>","more":"</p>\n<h4 id=\"2、添加KEY-SECRET\"><a href=\"#2、添加KEY-SECRET\" class=\"headerlink\" title=\"2、添加KEY SECRET\"></a>2、添加KEY SECRET</h4><p>在value string 文件夹下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string name=&quot;com.twitter.sdk.android.CONSUMER_KEY&quot;&gt;uy0CK2sjygumtE7J445NQB9s4&lt;/string&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;string name=&quot;com.twitter.sdk.android.CONSUMER_SECRET&quot;&gt;3bI33NoTXqTGV5JIU0MmVlllqygY55CHWNOXTsTnKiho3MbbPO&lt;/string&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、初始化Twitter\"><a href=\"#3、初始化Twitter\" class=\"headerlink\" title=\"3、初始化Twitter\"></a>3、初始化Twitter</h4><p>Application 中 <strong>Twitter.initialize(this)</strong></p>\n<h4 id=\"4、Activity-fragment-的布局中加loggin-button\"><a href=\"#4、Activity-fragment-的布局中加loggin-button\" class=\"headerlink\" title=\"4、Activity / fragment 的布局中加loggin button\"></a>4、Activity / fragment 的布局中加loggin button</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;com.twitter.sdk.android.core.identity.TwitterLoginButton</span><br><span class=\"line\">android:id=&quot;@+id/loginButton&quot;</span><br><span class=\"line\">android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">android:layout_height=&quot;wrap_content&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"登录回调\"><a href=\"#登录回调\" class=\"headerlink\" title=\"登录回调\"></a>登录回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loginButton.callback = object : Callback&lt;TwitterSession&gt;() &#123;</span><br><span class=\"line\">override fun success(result: Result&lt;TwitterSession&gt;) &#123;</span><br><span class=\"line\">Toast.makeText(this@MainActivity, &quot;login success&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun failure(exception: TwitterException) &#123;</span><br><span class=\"line\">Toast.makeText(this@MainActivity, &quot;login failure&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动logginButton回调\"><a href=\"#启动logginButton回调\" class=\"headerlink\" title=\"启动logginButton回调\"></a>启动logginButton回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class=\"line\">super.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">loginButton.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"拿到用户信息\"><a href=\"#拿到用户信息\" class=\"headerlink\" title=\"拿到用户信息\"></a>拿到用户信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun requestUser() &#123;</span><br><span class=\"line\">val apiClient = TwitterCore.getInstance().apiClient</span><br><span class=\"line\">val call = apiClient.accountService.verifyCredentials(true, false, true)</span><br><span class=\"line\">call.enqueue(object : Callback&lt;User&gt;() &#123;</span><br><span class=\"line\">override fun success(result: Result&lt;User&gt;) &#123;</span><br><span class=\"line\">Log.e(&quot;123&quot;, result.data?.let &#123;</span><br><span class=\"line\">it.name + it.id + it.idStr</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">override fun failure(exception: TwitterException?) &#123;</span><br><span class=\"line\">Log.e(&quot;123&quot;, &quot;get user failure&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Twitter分享\"><a href=\"#Twitter分享\" class=\"headerlink\" title=\"Twitter分享\"></a>Twitter分享</h3><h4 id=\"两种方式分享\"><a href=\"#两种方式分享\" class=\"headerlink\" title=\"两种方式分享\"></a>两种方式分享</h4><h5 id=\"1、Launching-Twitter-Composer-无回调\"><a href=\"#1、Launching-Twitter-Composer-无回调\" class=\"headerlink\" title=\"1、Launching Twitter Composer 无回调\"></a>1、Launching Twitter Composer 无回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">val builder = TweetComposer.Builder(this@MainActivity)</span><br><span class=\"line\">.url(URL(&quot;https://www.google.com/&quot;))</span><br><span class=\"line\">.text(&quot;nice to meet you&quot;)</span><br><span class=\"line\">builder.show()</span><br><span class=\"line\">&#125; catch (e: MalformedURLException) &#123;</span><br><span class=\"line\">e.printStackTrace()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、Twitter-Kit-Native-Composer-有回调\"><a href=\"#2、Twitter-Kit-Native-Composer-有回调\" class=\"headerlink\" title=\"2、Twitter Kit Native Composer 有回调\"></a>2、Twitter Kit Native Composer 有回调</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val session = TwitterCore.getInstance().sessionManager?.activeSession</span><br><span class=\"line\">session?.let &#123;</span><br><span class=\"line\">val intent = ComposerActivity.Builder(this@MainActivity)</span><br><span class=\"line\">.session(session)</span><br><span class=\"line\">.text(&quot;Love where you work&quot;)</span><br><span class=\"line\">.hashtags(&quot;#twitter&quot;)</span><br><span class=\"line\">.createIntent()</span><br><span class=\"line\">startActivity(intent)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回调采用的是广播方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyResultReceiver : BroadcastReceiver() &#123;</span><br><span class=\"line\">override fun onReceive(context: Context?, intent: Intent) &#123;</span><br><span class=\"line\">if (TweetUploadService.UPLOAD_SUCCESS == intent.action) &#123;</span><br><span class=\"line\">// success Twitter分享成功的回调</span><br><span class=\"line\">Toast.makeText(context, &quot;分享成功的回调&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">val tweetId = intent.extras.getLong(TweetUploadService.EXTRA_TWEET_ID);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">Toast.makeText(context, &quot;分享failure的回调&quot;, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">// failure</span><br><span class=\"line\">//            val retryIntent = intent.extras.getParcelable(TweetUploadService.EXTRA_RETRY_INTENT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注册广播：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;receiver</span><br><span class=\"line\">android:name=&quot;.MyResultReceiver&quot;</span><br><span class=\"line\">android:exported=&quot;false&quot;&gt;</span><br><span class=\"line\">&lt;intent-filter&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.UPLOAD_SUCCESS&quot; /&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.UPLOAD_FAILURE&quot; /&gt;</span><br><span class=\"line\">&lt;action android:name=&quot;com.twitter.sdk.android.tweetcomposer.TWEET_COMPOSE_CANCEL&quot;/&gt;</span><br><span class=\"line\">&lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure></p>"},{"title":"2018-09-27 小雨","date":"2018-09-27T11:52:29.000Z","_content":"\n<center>过多的选择，会让最终被选择的“幸运儿”魅力大减，从而满足感更低</center>\n","source":"_posts/小雨.md","raw":"---\ntitle: 2018-09-27 小雨\ndate: 2018-09-27 19:52:29\ncategories: Diary\n---\n\n<center>过多的选择，会让最终被选择的“幸运儿”魅力大减，从而满足感更低</center>\n","slug":"小雨","published":1,"updated":"2018-10-03T08:35:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydnk0010or265rq5ail7","content":"<center>过多的选择，会让最终被选择的“幸运儿”魅力大减，从而满足感更低</center>\n","site":{"data":{}},"excerpt":"","more":"<center>过多的选择，会让最终被选择的“幸运儿”魅力大减，从而满足感更低</center>\n"},{"title":"2018.9.23 有风冷了","date":"2018-09-23T00:25:32.000Z","comment":false,"_content":"<center>正是因为不去盲目期许未来，所以任何的一件小事情都会成为惊喜。</center>\n","source":"_posts/有风冷了.md","raw":"---\ntitle: 2018.9.23 有风冷了\ndate: 2018-09-23 08:25:32\ncategories: Diary\ncomment: false\n---\n<center>正是因为不去盲目期许未来，所以任何的一件小事情都会成为惊喜。</center>\n","slug":"有风冷了","published":1,"updated":"2018-09-23T01:50:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydnl0012or266965ucw8","content":"<center>正是因为不去盲目期许未来，所以任何的一件小事情都会成为惊喜。</center>\n","site":{"data":{}},"excerpt":"","more":"<center>正是因为不去盲目期许未来，所以任何的一件小事情都会成为惊喜。</center>\n"},{"title":"Meet Kotlin","_content":"\n### Kotlin的几个特性\n#### 扩展函数\n#### 尾随闭包\n当最后一个参数是一个方法或者闭包，可以把方法和闭包提到括号外面。\n#### 标准函数\n* with\n* apply\n* run\n* let\n\n#### data class\n参数中可定义成员变量、可选参数、命名参数等\n\n#### apply plugin: 'kotlin-android-extensions'\n直接使用id作为view对象，无需findviewbyid\n#### 简化lambda表达式\n\n```\nview.setOnClickListener {\n             ....\n        }\n```\n\n##### 配合RxJava\n\n\n```\nObservable.create(ObservableOnSubscribe<Long>{\n    Log.e(TAG, \"发射 线程为：${Thread.currentThread().name} \")\n    it.onNext(12L)\n})\n    .filter {\n        Log.e(TAG, \"filter 线程为：${Thread.currentThread().name} $it \")\n        return@filter it > 10\n    }\n    .subscribeOn(Schedulers.io())\n    .map(Function<Long, String> {\n        Log.e(TAG, \"map 线程为：${Thread.currentThread().name} $it \")\n        return@Function it.toString()\n    })\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe {\n        Log.e(TAG, \"处理 线程为：${Thread.currentThread().name} $it \")\n    }\n\n```\n\n#### 空安全\n* `？`\n* `！！`\n\n#### 延迟初始化\n* `lateinit` 用于修饰`var` 如果不初始化 会报异常\n* `by laze{}` 用于修饰`val` 变量 在第一次调用的时候会执行其中代码，并返回一个值，之后再调用都只会返回这个值\n\n#### 委托属性\nget{} / set{}\n\n<hr>\n**详细笔记：**\n\n\n1. 函数参数可以添加默认值，这样可以不穿这个参数，相当于是重载的一种方式\n2. 如果没有任何指定，类的属性会默认的使用getter和setter方法，当然也可以自定义setter方法与getter方法， \n<!--more-->\n```\nvar name: String = \"\"\n        get() = field.toUpperCase()\n        set(value){\n            field = \"Name: $value\"\n        }\n```\n那么既然直接使用点来代替setter方法，那么需要访问属性的时候需要使用，filed来作为属性本来的值。\n\n覆盖方法总是使用与基类型相同的默认值\n\n调用混位置参数时候，命名参数要放在默认位置参数之后，例如：允许：（1，x = 1）不允许 （x = 1 , 1）  \n\n单个表达式函数，可以省略花括号，直接在等号后面接表达式，作为函数体，当返回值类型编译器可以推断出来的时候，可以不同指定函数的返回值类型  \n\n具有代码块的函数需要显示的指定返回值类型， \n\n可变数量的参数Varargs\n\n```\nfun <T> asList(vararg ts:T): List<T> {\n    val result = ArrayList<T>()\n    for(t in ts)//ts is an array\n        result.add(t)\n    return result\n}\n```\n\n\n#### 扩展函数\n```\nfun Context.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) {\n    Toast.makeText(this, message, duration).show()\n}\n```\n扩展了Context，直接使用this，来代表context的实例\n\n** 映射对象到变量中**\n```\nval f1 = Forecast(Date(), 27.5f, \"Shiny day\")\nval (date, temperature, details) = f1\n\nfor ((key, value) in map) {\n    Log.d(\"map\", \"key:$key, value:$value\")\n}\n```\n### 扩展函数\n扩展函数是指在一个类上面增加一种新的行为，它就表现的像是属于这个类一样，而且可以使用this关键字调用类的所有public方法.它可以被任何类和类的扩展子类调用。  \n\n扩展函数是静态解析的，即使是在运行时参数传入其他类型，得出的结果仍然是声明时候的参数类型  \n**扩展函数中的操作符**：  \n```\noperator fun ViewGroup.get(position: Int): View = getChildAt(position)  \n\nval container: ViewGroup = find(R.id.container)\nval view = container[2]\n```\n\n### Lambdas\n定义一个匿名函数，\n在箭头的左边指定参数，在箭头的右边返回函数执行的结果。  \n一直简写，可以写成这样\n```\nview.setOnClickListener { toast(\"Click\") }\n```\n\n```\nfun main(args: Array<String>) {\n   val result = {msg : String -> print(msg)}\n   result(\"hello\")\n}\n```\n**语法糖**   \n\n* 当参数只有一个的时候，声明中可以不用显示的声明参数，在使用参数的时候可以使用it来代替这个唯一的参数\n* 当有多个参数用户到的时候，可以使用下划线来代替参数名，但是如果已经使用下划线来省略参数时候，是不能用it来代替当前参数的\n* Lambda 最后一条语句的执行结果，表示这个表达式的返回值\n\n\n### 高阶函数\n当函数的参数为闭包时，称这个函数为高阶函数  \n\n```\nval printMsg = {str : String -> print(str)}\nval log = { str: String , log:(String)-> Unit -> log(str) }\n\nfun main(args: Array<String>) {\n log(\"hello\",printMsg)\n}\n```\nprintMsg 是一个 lambda表达式 参数为 String  \nlog是一个lambda表达式 参数为 String和一个函数  \n\n***TODO***\n\n### 单例模式\nobject 可以定义在全局也可以在类的内部使用  \nobject 就是单例模式的化身  \nobject 可以实现 Java 中的匿名类  \ncompanion object 就是 Java 中的 static 变量  \ncompanion object 只能定义在对应的类中 \n\n### 委托属性\nKotlin 的属性是天生再带set、get方法的，如果要重写他们的时候需要用到field这个东西，field就是该属性本身的意思。  \n***TODO***\n\n### 集合和函数操作符\n#### 总数操作符：  \nany，至少有一个符合要求返回rue  \nall，全部都要符合要求返回true  \ncount，返回条件判断的总数  \nfold，从第一项，到底i项  \nfoldRight，从最后一项，到第n-i项  \nforEach，遍历所有元素  \nforEachIndexed，  \n#### 过滤操作符：\n* drop，去掉前n个元素 \n* dropWhile从第一项开始去掉指定元素的列表 \n* dropLastWhile 从最后一项开始\n* filter 过滤掉所有符合函数条件的元素\n* filterNot 过滤掉所有不符合条件的元素\n* slice 过滤一个list中指定index的元素\n* take 返回从第一开元素开始的n个元素\n* takeLast 返回从最后一个元素开始的n个元素\n* takeWhile 返回从第一个元素开始符合条件的元素\n#### 映射操作符：\n* flatMap 为每一个元素通过函数省城新的元素集合\n* groupBy 返回一个根据给定函数分组后的map\n* map 返回每一个元素根据给定的函数所转换成的list\n* mapIndexed 返回一个每一个\n* mapNotNull 返回每一个飞null元素根据指定的函数所转换成的list\n#### 元素操作符\n* contains 如果指定元素可以在集合中找到返回true\n* elementAt 返回给定index对应的元素，注意不能越界\n* elementAtOrElse 如果越界返回默认值\n* elementAtOrNull \n* first 返回符合给定函数的第一个元素\n* firstOrNull 没有返回null\n* indexOf 返回指定元素的第一个index 不存在-1\n* indexOfFirst  返回符合条件的第一个元素的index 没有-1\n* indexOfLast 返回最后一个符合给定函数的元素的index 没有-1\n* last 返回符合给定函数的最后一个元素\n* single 返回符合非定函数的单个元素，\n\n\n#### 生产操作符\n* merge 把两个集合合并成一个新的，相同的index的元素通过给定的函数进行合并成新的元素，作为新的元素几个的一个元素，返回这个新的集合，新的集合的大小有最小的那个集合大小决定。\n* partition 通过非定的函数条件，把一个给定的集合分割成两个\n* plus + 两个集合相加\n\n#### 顺序操作符\n* reverse 返回一个翻转原list的list\n* sort 排序\n* sortBy 根据指定函数排序\n* sortDescending 降序排列\n* sortDescendingBy 。。\n\n### 空安全\n```\nval a : Int? = null\n```\n* 通过在类型的后面增加一个问号，就表示允许这个变量为null  \n* 一个可null的变量，在没有检查之前就去使用它，是不能通过编译的。\n* 还有一个特性就是，当我们检查了变量是否为null之后，就可以自动推导出变量不可为null，进而可以使用，编译通过。  \n\n  \n这里使用**安全访问操作符（？）**，来达到判断并推导出可null类型。  \n如果我们确定正在使用一个非null得变量，但是他的类型却是可null类型的，我们可以强制使用！！来使编译器执行可null类型，来跳过限制检查。\n\n### 委托模式\n他可以用来从类中抽取出主要负责的部分。\n委托者只需要指定实现的接口的实例，我们可以使用接口指示鸟可飞行，但是鸟的飞行方式呗定义在一个委托中，这个委托定义在构造函数中，所以我们可以针对不同的鸟使用不同的飞行方式，动物使用翅膀飞行的方式被定义在另一个类中，  \n***TODO***\n\n\n## 泛型\n\n可以使用任何类型初始化\n```\nclass TypedClass<T>(parameter: T) {  \n    val value: T = parameter\n}\n```\n如果在初始化的时候可以推断出参数的类型，甚至可以不需要去指定泛型\n```\nval t1 = TypedClass<String>(\"Hello World!\")\nval t2 = TypedClass<Int>(25)  \nval t2 = TypedClass<Int>(25)\n```\n如果是一个null，则不能推断出他的类型，所以必须要加上？  \n函数中也可以使用泛型  \n\n\n","source":"_posts/blog.md","raw":"---\ntitle: Meet Kotlin\ncategories: \"技术\"\n---\n\n### Kotlin的几个特性\n#### 扩展函数\n#### 尾随闭包\n当最后一个参数是一个方法或者闭包，可以把方法和闭包提到括号外面。\n#### 标准函数\n* with\n* apply\n* run\n* let\n\n#### data class\n参数中可定义成员变量、可选参数、命名参数等\n\n#### apply plugin: 'kotlin-android-extensions'\n直接使用id作为view对象，无需findviewbyid\n#### 简化lambda表达式\n\n```\nview.setOnClickListener {\n             ....\n        }\n```\n\n##### 配合RxJava\n\n\n```\nObservable.create(ObservableOnSubscribe<Long>{\n    Log.e(TAG, \"发射 线程为：${Thread.currentThread().name} \")\n    it.onNext(12L)\n})\n    .filter {\n        Log.e(TAG, \"filter 线程为：${Thread.currentThread().name} $it \")\n        return@filter it > 10\n    }\n    .subscribeOn(Schedulers.io())\n    .map(Function<Long, String> {\n        Log.e(TAG, \"map 线程为：${Thread.currentThread().name} $it \")\n        return@Function it.toString()\n    })\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe {\n        Log.e(TAG, \"处理 线程为：${Thread.currentThread().name} $it \")\n    }\n\n```\n\n#### 空安全\n* `？`\n* `！！`\n\n#### 延迟初始化\n* `lateinit` 用于修饰`var` 如果不初始化 会报异常\n* `by laze{}` 用于修饰`val` 变量 在第一次调用的时候会执行其中代码，并返回一个值，之后再调用都只会返回这个值\n\n#### 委托属性\nget{} / set{}\n\n<hr>\n**详细笔记：**\n\n\n1. 函数参数可以添加默认值，这样可以不穿这个参数，相当于是重载的一种方式\n2. 如果没有任何指定，类的属性会默认的使用getter和setter方法，当然也可以自定义setter方法与getter方法， \n<!--more-->\n```\nvar name: String = \"\"\n        get() = field.toUpperCase()\n        set(value){\n            field = \"Name: $value\"\n        }\n```\n那么既然直接使用点来代替setter方法，那么需要访问属性的时候需要使用，filed来作为属性本来的值。\n\n覆盖方法总是使用与基类型相同的默认值\n\n调用混位置参数时候，命名参数要放在默认位置参数之后，例如：允许：（1，x = 1）不允许 （x = 1 , 1）  \n\n单个表达式函数，可以省略花括号，直接在等号后面接表达式，作为函数体，当返回值类型编译器可以推断出来的时候，可以不同指定函数的返回值类型  \n\n具有代码块的函数需要显示的指定返回值类型， \n\n可变数量的参数Varargs\n\n```\nfun <T> asList(vararg ts:T): List<T> {\n    val result = ArrayList<T>()\n    for(t in ts)//ts is an array\n        result.add(t)\n    return result\n}\n```\n\n\n#### 扩展函数\n```\nfun Context.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) {\n    Toast.makeText(this, message, duration).show()\n}\n```\n扩展了Context，直接使用this，来代表context的实例\n\n** 映射对象到变量中**\n```\nval f1 = Forecast(Date(), 27.5f, \"Shiny day\")\nval (date, temperature, details) = f1\n\nfor ((key, value) in map) {\n    Log.d(\"map\", \"key:$key, value:$value\")\n}\n```\n### 扩展函数\n扩展函数是指在一个类上面增加一种新的行为，它就表现的像是属于这个类一样，而且可以使用this关键字调用类的所有public方法.它可以被任何类和类的扩展子类调用。  \n\n扩展函数是静态解析的，即使是在运行时参数传入其他类型，得出的结果仍然是声明时候的参数类型  \n**扩展函数中的操作符**：  \n```\noperator fun ViewGroup.get(position: Int): View = getChildAt(position)  \n\nval container: ViewGroup = find(R.id.container)\nval view = container[2]\n```\n\n### Lambdas\n定义一个匿名函数，\n在箭头的左边指定参数，在箭头的右边返回函数执行的结果。  \n一直简写，可以写成这样\n```\nview.setOnClickListener { toast(\"Click\") }\n```\n\n```\nfun main(args: Array<String>) {\n   val result = {msg : String -> print(msg)}\n   result(\"hello\")\n}\n```\n**语法糖**   \n\n* 当参数只有一个的时候，声明中可以不用显示的声明参数，在使用参数的时候可以使用it来代替这个唯一的参数\n* 当有多个参数用户到的时候，可以使用下划线来代替参数名，但是如果已经使用下划线来省略参数时候，是不能用it来代替当前参数的\n* Lambda 最后一条语句的执行结果，表示这个表达式的返回值\n\n\n### 高阶函数\n当函数的参数为闭包时，称这个函数为高阶函数  \n\n```\nval printMsg = {str : String -> print(str)}\nval log = { str: String , log:(String)-> Unit -> log(str) }\n\nfun main(args: Array<String>) {\n log(\"hello\",printMsg)\n}\n```\nprintMsg 是一个 lambda表达式 参数为 String  \nlog是一个lambda表达式 参数为 String和一个函数  \n\n***TODO***\n\n### 单例模式\nobject 可以定义在全局也可以在类的内部使用  \nobject 就是单例模式的化身  \nobject 可以实现 Java 中的匿名类  \ncompanion object 就是 Java 中的 static 变量  \ncompanion object 只能定义在对应的类中 \n\n### 委托属性\nKotlin 的属性是天生再带set、get方法的，如果要重写他们的时候需要用到field这个东西，field就是该属性本身的意思。  \n***TODO***\n\n### 集合和函数操作符\n#### 总数操作符：  \nany，至少有一个符合要求返回rue  \nall，全部都要符合要求返回true  \ncount，返回条件判断的总数  \nfold，从第一项，到底i项  \nfoldRight，从最后一项，到第n-i项  \nforEach，遍历所有元素  \nforEachIndexed，  \n#### 过滤操作符：\n* drop，去掉前n个元素 \n* dropWhile从第一项开始去掉指定元素的列表 \n* dropLastWhile 从最后一项开始\n* filter 过滤掉所有符合函数条件的元素\n* filterNot 过滤掉所有不符合条件的元素\n* slice 过滤一个list中指定index的元素\n* take 返回从第一开元素开始的n个元素\n* takeLast 返回从最后一个元素开始的n个元素\n* takeWhile 返回从第一个元素开始符合条件的元素\n#### 映射操作符：\n* flatMap 为每一个元素通过函数省城新的元素集合\n* groupBy 返回一个根据给定函数分组后的map\n* map 返回每一个元素根据给定的函数所转换成的list\n* mapIndexed 返回一个每一个\n* mapNotNull 返回每一个飞null元素根据指定的函数所转换成的list\n#### 元素操作符\n* contains 如果指定元素可以在集合中找到返回true\n* elementAt 返回给定index对应的元素，注意不能越界\n* elementAtOrElse 如果越界返回默认值\n* elementAtOrNull \n* first 返回符合给定函数的第一个元素\n* firstOrNull 没有返回null\n* indexOf 返回指定元素的第一个index 不存在-1\n* indexOfFirst  返回符合条件的第一个元素的index 没有-1\n* indexOfLast 返回最后一个符合给定函数的元素的index 没有-1\n* last 返回符合给定函数的最后一个元素\n* single 返回符合非定函数的单个元素，\n\n\n#### 生产操作符\n* merge 把两个集合合并成一个新的，相同的index的元素通过给定的函数进行合并成新的元素，作为新的元素几个的一个元素，返回这个新的集合，新的集合的大小有最小的那个集合大小决定。\n* partition 通过非定的函数条件，把一个给定的集合分割成两个\n* plus + 两个集合相加\n\n#### 顺序操作符\n* reverse 返回一个翻转原list的list\n* sort 排序\n* sortBy 根据指定函数排序\n* sortDescending 降序排列\n* sortDescendingBy 。。\n\n### 空安全\n```\nval a : Int? = null\n```\n* 通过在类型的后面增加一个问号，就表示允许这个变量为null  \n* 一个可null的变量，在没有检查之前就去使用它，是不能通过编译的。\n* 还有一个特性就是，当我们检查了变量是否为null之后，就可以自动推导出变量不可为null，进而可以使用，编译通过。  \n\n  \n这里使用**安全访问操作符（？）**，来达到判断并推导出可null类型。  \n如果我们确定正在使用一个非null得变量，但是他的类型却是可null类型的，我们可以强制使用！！来使编译器执行可null类型，来跳过限制检查。\n\n### 委托模式\n他可以用来从类中抽取出主要负责的部分。\n委托者只需要指定实现的接口的实例，我们可以使用接口指示鸟可飞行，但是鸟的飞行方式呗定义在一个委托中，这个委托定义在构造函数中，所以我们可以针对不同的鸟使用不同的飞行方式，动物使用翅膀飞行的方式被定义在另一个类中，  \n***TODO***\n\n\n## 泛型\n\n可以使用任何类型初始化\n```\nclass TypedClass<T>(parameter: T) {  \n    val value: T = parameter\n}\n```\n如果在初始化的时候可以推断出参数的类型，甚至可以不需要去指定泛型\n```\nval t1 = TypedClass<String>(\"Hello World!\")\nval t2 = TypedClass<Int>(25)  \nval t2 = TypedClass<Int>(25)\n```\n如果是一个null，则不能推断出他的类型，所以必须要加上？  \n函数中也可以使用泛型  \n\n\n","slug":"blog","published":1,"date":"2018-09-17T07:43:28.000Z","updated":"2018-12-05T07:07:40.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydsh001bor26qw1x1eqh","content":"<h3 id=\"Kotlin的几个特性\"><a href=\"#Kotlin的几个特性\" class=\"headerlink\" title=\"Kotlin的几个特性\"></a>Kotlin的几个特性</h3><h4 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h4><h4 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h4><p>当最后一个参数是一个方法或者闭包，可以把方法和闭包提到括号外面。</p>\n<h4 id=\"标准函数\"><a href=\"#标准函数\" class=\"headerlink\" title=\"标准函数\"></a>标准函数</h4><ul>\n<li>with</li>\n<li>apply</li>\n<li>run</li>\n<li>let</li>\n</ul>\n<h4 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h4><p>参数中可定义成员变量、可选参数、命名参数等</p>\n<h4 id=\"apply-plugin-‘kotlin-android-extensions’\"><a href=\"#apply-plugin-‘kotlin-android-extensions’\" class=\"headerlink\" title=\"apply plugin: ‘kotlin-android-extensions’\"></a>apply plugin: ‘kotlin-android-extensions’</h4><p>直接使用id作为view对象，无需findviewbyid</p>\n<h4 id=\"简化lambda表达式\"><a href=\"#简化lambda表达式\" class=\"headerlink\" title=\"简化lambda表达式\"></a>简化lambda表达式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setOnClickListener &#123;</span><br><span class=\"line\">             ....</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配合RxJava\"><a href=\"#配合RxJava\" class=\"headerlink\" title=\"配合RxJava\"></a>配合RxJava</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.create(ObservableOnSubscribe&lt;Long&gt;&#123;</span><br><span class=\"line\">    Log.e(TAG, &quot;发射 线程为：$&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class=\"line\">    it.onNext(12L)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;filter 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        return@filter it &gt; 10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .map(Function&lt;Long, String&gt; &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;map 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        return@Function it.toString()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;处理 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"空安全\"><a href=\"#空安全\" class=\"headerlink\" title=\"空安全\"></a>空安全</h4><ul>\n<li><code>？</code></li>\n<li><code>！！</code></li>\n</ul>\n<h4 id=\"延迟初始化\"><a href=\"#延迟初始化\" class=\"headerlink\" title=\"延迟初始化\"></a>延迟初始化</h4><ul>\n<li><code>lateinit</code> 用于修饰<code>var</code> 如果不初始化 会报异常</li>\n<li><code>by laze{}</code> 用于修饰<code>val</code> 变量 在第一次调用的时候会执行其中代码，并返回一个值，之后再调用都只会返回这个值</li>\n</ul>\n<h4 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h4><p>get{} / set{}</p>\n<p><hr><br><strong>详细笔记：</strong></p>\n<ol>\n<li>函数参数可以添加默认值，这样可以不穿这个参数，相当于是重载的一种方式</li>\n<li>如果没有任何指定，类的属性会默认的使用getter和setter方法，当然也可以自定义setter方法与getter方法， <a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name: String = &quot;&quot;</span><br><span class=\"line\">        get() = field.toUpperCase()</span><br><span class=\"line\">        set(value)&#123;</span><br><span class=\"line\">            field = &quot;Name: $value&quot;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>那么既然直接使用点来代替setter方法，那么需要访问属性的时候需要使用，filed来作为属性本来的值。</p>\n<p>覆盖方法总是使用与基类型相同的默认值</p>\n<p>调用混位置参数时候，命名参数要放在默认位置参数之后，例如：允许：（1，x = 1）不允许 （x = 1 , 1）  </p>\n<p>单个表达式函数，可以省略花括号，直接在等号后面接表达式，作为函数体，当返回值类型编译器可以推断出来的时候，可以不同指定函数的返回值类型  </p>\n<p>具有代码块的函数需要显示的指定返回值类型， </p>\n<p>可变数量的参数Varargs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; asList(vararg ts:T): List&lt;T&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;T&gt;()</span><br><span class=\"line\">    for(t in ts)//ts is an array</span><br><span class=\"line\">        result.add(t)</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展函数-1\"><a href=\"#扩展函数-1\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun Context.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) &#123;</span><br><span class=\"line\">    Toast.makeText(this, message, duration).show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>扩展了Context，直接使用this，来代表context的实例</p>\n<p><strong> 映射对象到变量中</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val f1 = Forecast(Date(), 27.5f, &quot;Shiny day&quot;)</span><br><span class=\"line\">val (date, temperature, details) = f1</span><br><span class=\"line\"></span><br><span class=\"line\">for ((key, value) in map) &#123;</span><br><span class=\"line\">    Log.d(&quot;map&quot;, &quot;key:$key, value:$value&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"扩展函数-2\"><a href=\"#扩展函数-2\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h3><p>扩展函数是指在一个类上面增加一种新的行为，它就表现的像是属于这个类一样，而且可以使用this关键字调用类的所有public方法.它可以被任何类和类的扩展子类调用。  </p>\n<p>扩展函数是静态解析的，即使是在运行时参数传入其他类型，得出的结果仍然是声明时候的参数类型<br><strong>扩展函数中的操作符</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun ViewGroup.get(position: Int): View = getChildAt(position)  </span><br><span class=\"line\"></span><br><span class=\"line\">val container: ViewGroup = find(R.id.container)</span><br><span class=\"line\">val view = container[2]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Lambdas\"><a href=\"#Lambdas\" class=\"headerlink\" title=\"Lambdas\"></a>Lambdas</h3><p>定义一个匿名函数，<br>在箭头的左边指定参数，在箭头的右边返回函数执行的结果。<br>一直简写，可以写成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setOnClickListener &#123; toast(&quot;Click&quot;) &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">   val result = &#123;msg : String -&gt; print(msg)&#125;</span><br><span class=\"line\">   result(&quot;hello&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>语法糖</strong>   </p>\n<ul>\n<li>当参数只有一个的时候，声明中可以不用显示的声明参数，在使用参数的时候可以使用it来代替这个唯一的参数</li>\n<li>当有多个参数用户到的时候，可以使用下划线来代替参数名，但是如果已经使用下划线来省略参数时候，是不能用it来代替当前参数的</li>\n<li>Lambda 最后一条语句的执行结果，表示这个表达式的返回值</li>\n</ul>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>当函数的参数为闭包时，称这个函数为高阶函数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val printMsg = &#123;str : String -&gt; print(str)&#125;</span><br><span class=\"line\">val log = &#123; str: String , log:(String)-&gt; Unit -&gt; log(str) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\"> log(&quot;hello&quot;,printMsg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>printMsg 是一个 lambda表达式 参数为 String<br>log是一个lambda表达式 参数为 String和一个函数  </p>\n<p><strong><em>TODO</em></strong></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>object 可以定义在全局也可以在类的内部使用<br>object 就是单例模式的化身<br>object 可以实现 Java 中的匿名类<br>companion object 就是 Java 中的 static 变量<br>companion object 只能定义在对应的类中 </p>\n<h3 id=\"委托属性-1\"><a href=\"#委托属性-1\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h3><p>Kotlin 的属性是天生再带set、get方法的，如果要重写他们的时候需要用到field这个东西，field就是该属性本身的意思。<br><strong><em>TODO</em></strong></p>\n<h3 id=\"集合和函数操作符\"><a href=\"#集合和函数操作符\" class=\"headerlink\" title=\"集合和函数操作符\"></a>集合和函数操作符</h3><h4 id=\"总数操作符：\"><a href=\"#总数操作符：\" class=\"headerlink\" title=\"总数操作符：\"></a>总数操作符：</h4><p>any，至少有一个符合要求返回rue<br>all，全部都要符合要求返回true<br>count，返回条件判断的总数<br>fold，从第一项，到底i项<br>foldRight，从最后一项，到第n-i项<br>forEach，遍历所有元素<br>forEachIndexed，  </p>\n<h4 id=\"过滤操作符：\"><a href=\"#过滤操作符：\" class=\"headerlink\" title=\"过滤操作符：\"></a>过滤操作符：</h4><ul>\n<li>drop，去掉前n个元素 </li>\n<li>dropWhile从第一项开始去掉指定元素的列表 </li>\n<li>dropLastWhile 从最后一项开始</li>\n<li>filter 过滤掉所有符合函数条件的元素</li>\n<li>filterNot 过滤掉所有不符合条件的元素</li>\n<li>slice 过滤一个list中指定index的元素</li>\n<li>take 返回从第一开元素开始的n个元素</li>\n<li>takeLast 返回从最后一个元素开始的n个元素</li>\n<li>takeWhile 返回从第一个元素开始符合条件的元素<h4 id=\"映射操作符：\"><a href=\"#映射操作符：\" class=\"headerlink\" title=\"映射操作符：\"></a>映射操作符：</h4></li>\n<li>flatMap 为每一个元素通过函数省城新的元素集合</li>\n<li>groupBy 返回一个根据给定函数分组后的map</li>\n<li>map 返回每一个元素根据给定的函数所转换成的list</li>\n<li>mapIndexed 返回一个每一个</li>\n<li>mapNotNull 返回每一个飞null元素根据指定的函数所转换成的list<h4 id=\"元素操作符\"><a href=\"#元素操作符\" class=\"headerlink\" title=\"元素操作符\"></a>元素操作符</h4></li>\n<li>contains 如果指定元素可以在集合中找到返回true</li>\n<li>elementAt 返回给定index对应的元素，注意不能越界</li>\n<li>elementAtOrElse 如果越界返回默认值</li>\n<li>elementAtOrNull </li>\n<li>first 返回符合给定函数的第一个元素</li>\n<li>firstOrNull 没有返回null</li>\n<li>indexOf 返回指定元素的第一个index 不存在-1</li>\n<li>indexOfFirst  返回符合条件的第一个元素的index 没有-1</li>\n<li>indexOfLast 返回最后一个符合给定函数的元素的index 没有-1</li>\n<li>last 返回符合给定函数的最后一个元素</li>\n<li>single 返回符合非定函数的单个元素，</li>\n</ul>\n<h4 id=\"生产操作符\"><a href=\"#生产操作符\" class=\"headerlink\" title=\"生产操作符\"></a>生产操作符</h4><ul>\n<li>merge 把两个集合合并成一个新的，相同的index的元素通过给定的函数进行合并成新的元素，作为新的元素几个的一个元素，返回这个新的集合，新的集合的大小有最小的那个集合大小决定。</li>\n<li>partition 通过非定的函数条件，把一个给定的集合分割成两个</li>\n<li>plus + 两个集合相加</li>\n</ul>\n<h4 id=\"顺序操作符\"><a href=\"#顺序操作符\" class=\"headerlink\" title=\"顺序操作符\"></a>顺序操作符</h4><ul>\n<li>reverse 返回一个翻转原list的list</li>\n<li>sort 排序</li>\n<li>sortBy 根据指定函数排序</li>\n<li>sortDescending 降序排列</li>\n<li>sortDescendingBy 。。</li>\n</ul>\n<h3 id=\"空安全-1\"><a href=\"#空安全-1\" class=\"headerlink\" title=\"空安全\"></a>空安全</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val a : Int? = null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过在类型的后面增加一个问号，就表示允许这个变量为null  </li>\n<li>一个可null的变量，在没有检查之前就去使用它，是不能通过编译的。</li>\n<li>还有一个特性就是，当我们检查了变量是否为null之后，就可以自动推导出变量不可为null，进而可以使用，编译通过。  </li>\n</ul>\n<p>这里使用<strong>安全访问操作符（？）</strong>，来达到判断并推导出可null类型。<br>如果我们确定正在使用一个非null得变量，但是他的类型却是可null类型的，我们可以强制使用！！来使编译器执行可null类型，来跳过限制检查。</p>\n<h3 id=\"委托模式\"><a href=\"#委托模式\" class=\"headerlink\" title=\"委托模式\"></a>委托模式</h3><p>他可以用来从类中抽取出主要负责的部分。<br>委托者只需要指定实现的接口的实例，我们可以使用接口指示鸟可飞行，但是鸟的飞行方式呗定义在一个委托中，这个委托定义在构造函数中，所以我们可以针对不同的鸟使用不同的飞行方式，动物使用翅膀飞行的方式被定义在另一个类中，<br><strong><em>TODO</em></strong></p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>可以使用任何类型初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TypedClass&lt;T&gt;(parameter: T) &#123;  </span><br><span class=\"line\">    val value: T = parameter</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果在初始化的时候可以推断出参数的类型，甚至可以不需要去指定泛型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val t1 = TypedClass&lt;String&gt;(&quot;Hello World!&quot;)</span><br><span class=\"line\">val t2 = TypedClass&lt;Int&gt;(25)  </span><br><span class=\"line\">val t2 = TypedClass&lt;Int&gt;(25)</span><br></pre></td></tr></table></figure></p>\n<p>如果是一个null，则不能推断出他的类型，所以必须要加上？<br>函数中也可以使用泛型  </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Kotlin的几个特性\"><a href=\"#Kotlin的几个特性\" class=\"headerlink\" title=\"Kotlin的几个特性\"></a>Kotlin的几个特性</h3><h4 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h4><h4 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h4><p>当最后一个参数是一个方法或者闭包，可以把方法和闭包提到括号外面。</p>\n<h4 id=\"标准函数\"><a href=\"#标准函数\" class=\"headerlink\" title=\"标准函数\"></a>标准函数</h4><ul>\n<li>with</li>\n<li>apply</li>\n<li>run</li>\n<li>let</li>\n</ul>\n<h4 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h4><p>参数中可定义成员变量、可选参数、命名参数等</p>\n<h4 id=\"apply-plugin-‘kotlin-android-extensions’\"><a href=\"#apply-plugin-‘kotlin-android-extensions’\" class=\"headerlink\" title=\"apply plugin: ‘kotlin-android-extensions’\"></a>apply plugin: ‘kotlin-android-extensions’</h4><p>直接使用id作为view对象，无需findviewbyid</p>\n<h4 id=\"简化lambda表达式\"><a href=\"#简化lambda表达式\" class=\"headerlink\" title=\"简化lambda表达式\"></a>简化lambda表达式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setOnClickListener &#123;</span><br><span class=\"line\">             ....</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"配合RxJava\"><a href=\"#配合RxJava\" class=\"headerlink\" title=\"配合RxJava\"></a>配合RxJava</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.create(ObservableOnSubscribe&lt;Long&gt;&#123;</span><br><span class=\"line\">    Log.e(TAG, &quot;发射 线程为：$&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class=\"line\">    it.onNext(12L)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .filter &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;filter 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        return@filter it &gt; 10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .subscribeOn(Schedulers.io())</span><br><span class=\"line\">    .map(Function&lt;Long, String&gt; &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;map 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">        return@Function it.toString()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">    .subscribe &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;处理 线程为：$&#123;Thread.currentThread().name&#125; $it &quot;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"空安全\"><a href=\"#空安全\" class=\"headerlink\" title=\"空安全\"></a>空安全</h4><ul>\n<li><code>？</code></li>\n<li><code>！！</code></li>\n</ul>\n<h4 id=\"延迟初始化\"><a href=\"#延迟初始化\" class=\"headerlink\" title=\"延迟初始化\"></a>延迟初始化</h4><ul>\n<li><code>lateinit</code> 用于修饰<code>var</code> 如果不初始化 会报异常</li>\n<li><code>by laze{}</code> 用于修饰<code>val</code> 变量 在第一次调用的时候会执行其中代码，并返回一个值，之后再调用都只会返回这个值</li>\n</ul>\n<h4 id=\"委托属性\"><a href=\"#委托属性\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h4><p>get{} / set{}</p>\n<p><hr><br><strong>详细笔记：</strong></p>\n<ol>\n<li>函数参数可以添加默认值，这样可以不穿这个参数，相当于是重载的一种方式</li>\n<li>如果没有任何指定，类的属性会默认的使用getter和setter方法，当然也可以自定义setter方法与getter方法，","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name: String = &quot;&quot;</span><br><span class=\"line\">        get() = field.toUpperCase()</span><br><span class=\"line\">        set(value)&#123;</span><br><span class=\"line\">            field = &quot;Name: $value&quot;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>那么既然直接使用点来代替setter方法，那么需要访问属性的时候需要使用，filed来作为属性本来的值。</p>\n<p>覆盖方法总是使用与基类型相同的默认值</p>\n<p>调用混位置参数时候，命名参数要放在默认位置参数之后，例如：允许：（1，x = 1）不允许 （x = 1 , 1）  </p>\n<p>单个表达式函数，可以省略花括号，直接在等号后面接表达式，作为函数体，当返回值类型编译器可以推断出来的时候，可以不同指定函数的返回值类型  </p>\n<p>具有代码块的函数需要显示的指定返回值类型， </p>\n<p>可变数量的参数Varargs</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun &lt;T&gt; asList(vararg ts:T): List&lt;T&gt; &#123;</span><br><span class=\"line\">    val result = ArrayList&lt;T&gt;()</span><br><span class=\"line\">    for(t in ts)//ts is an array</span><br><span class=\"line\">        result.add(t)</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展函数-1\"><a href=\"#扩展函数-1\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun Context.toast(message: CharSequence, duration: Int = Toast.LENGTH_SHORT) &#123;</span><br><span class=\"line\">    Toast.makeText(this, message, duration).show()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>扩展了Context，直接使用this，来代表context的实例</p>\n<p><strong> 映射对象到变量中</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val f1 = Forecast(Date(), 27.5f, &quot;Shiny day&quot;)</span><br><span class=\"line\">val (date, temperature, details) = f1</span><br><span class=\"line\"></span><br><span class=\"line\">for ((key, value) in map) &#123;</span><br><span class=\"line\">    Log.d(&quot;map&quot;, &quot;key:$key, value:$value&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"扩展函数-2\"><a href=\"#扩展函数-2\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h3><p>扩展函数是指在一个类上面增加一种新的行为，它就表现的像是属于这个类一样，而且可以使用this关键字调用类的所有public方法.它可以被任何类和类的扩展子类调用。  </p>\n<p>扩展函数是静态解析的，即使是在运行时参数传入其他类型，得出的结果仍然是声明时候的参数类型<br><strong>扩展函数中的操作符</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">operator fun ViewGroup.get(position: Int): View = getChildAt(position)  </span><br><span class=\"line\"></span><br><span class=\"line\">val container: ViewGroup = find(R.id.container)</span><br><span class=\"line\">val view = container[2]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Lambdas\"><a href=\"#Lambdas\" class=\"headerlink\" title=\"Lambdas\"></a>Lambdas</h3><p>定义一个匿名函数，<br>在箭头的左边指定参数，在箭头的右边返回函数执行的结果。<br>一直简写，可以写成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setOnClickListener &#123; toast(&quot;Click&quot;) &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">   val result = &#123;msg : String -&gt; print(msg)&#125;</span><br><span class=\"line\">   result(&quot;hello&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>语法糖</strong>   </p>\n<ul>\n<li>当参数只有一个的时候，声明中可以不用显示的声明参数，在使用参数的时候可以使用it来代替这个唯一的参数</li>\n<li>当有多个参数用户到的时候，可以使用下划线来代替参数名，但是如果已经使用下划线来省略参数时候，是不能用it来代替当前参数的</li>\n<li>Lambda 最后一条语句的执行结果，表示这个表达式的返回值</li>\n</ul>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>当函数的参数为闭包时，称这个函数为高阶函数  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val printMsg = &#123;str : String -&gt; print(str)&#125;</span><br><span class=\"line\">val log = &#123; str: String , log:(String)-&gt; Unit -&gt; log(str) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\"> log(&quot;hello&quot;,printMsg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>printMsg 是一个 lambda表达式 参数为 String<br>log是一个lambda表达式 参数为 String和一个函数  </p>\n<p><strong><em>TODO</em></strong></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>object 可以定义在全局也可以在类的内部使用<br>object 就是单例模式的化身<br>object 可以实现 Java 中的匿名类<br>companion object 就是 Java 中的 static 变量<br>companion object 只能定义在对应的类中 </p>\n<h3 id=\"委托属性-1\"><a href=\"#委托属性-1\" class=\"headerlink\" title=\"委托属性\"></a>委托属性</h3><p>Kotlin 的属性是天生再带set、get方法的，如果要重写他们的时候需要用到field这个东西，field就是该属性本身的意思。<br><strong><em>TODO</em></strong></p>\n<h3 id=\"集合和函数操作符\"><a href=\"#集合和函数操作符\" class=\"headerlink\" title=\"集合和函数操作符\"></a>集合和函数操作符</h3><h4 id=\"总数操作符：\"><a href=\"#总数操作符：\" class=\"headerlink\" title=\"总数操作符：\"></a>总数操作符：</h4><p>any，至少有一个符合要求返回rue<br>all，全部都要符合要求返回true<br>count，返回条件判断的总数<br>fold，从第一项，到底i项<br>foldRight，从最后一项，到第n-i项<br>forEach，遍历所有元素<br>forEachIndexed，  </p>\n<h4 id=\"过滤操作符：\"><a href=\"#过滤操作符：\" class=\"headerlink\" title=\"过滤操作符：\"></a>过滤操作符：</h4><ul>\n<li>drop，去掉前n个元素 </li>\n<li>dropWhile从第一项开始去掉指定元素的列表 </li>\n<li>dropLastWhile 从最后一项开始</li>\n<li>filter 过滤掉所有符合函数条件的元素</li>\n<li>filterNot 过滤掉所有不符合条件的元素</li>\n<li>slice 过滤一个list中指定index的元素</li>\n<li>take 返回从第一开元素开始的n个元素</li>\n<li>takeLast 返回从最后一个元素开始的n个元素</li>\n<li>takeWhile 返回从第一个元素开始符合条件的元素<h4 id=\"映射操作符：\"><a href=\"#映射操作符：\" class=\"headerlink\" title=\"映射操作符：\"></a>映射操作符：</h4></li>\n<li>flatMap 为每一个元素通过函数省城新的元素集合</li>\n<li>groupBy 返回一个根据给定函数分组后的map</li>\n<li>map 返回每一个元素根据给定的函数所转换成的list</li>\n<li>mapIndexed 返回一个每一个</li>\n<li>mapNotNull 返回每一个飞null元素根据指定的函数所转换成的list<h4 id=\"元素操作符\"><a href=\"#元素操作符\" class=\"headerlink\" title=\"元素操作符\"></a>元素操作符</h4></li>\n<li>contains 如果指定元素可以在集合中找到返回true</li>\n<li>elementAt 返回给定index对应的元素，注意不能越界</li>\n<li>elementAtOrElse 如果越界返回默认值</li>\n<li>elementAtOrNull </li>\n<li>first 返回符合给定函数的第一个元素</li>\n<li>firstOrNull 没有返回null</li>\n<li>indexOf 返回指定元素的第一个index 不存在-1</li>\n<li>indexOfFirst  返回符合条件的第一个元素的index 没有-1</li>\n<li>indexOfLast 返回最后一个符合给定函数的元素的index 没有-1</li>\n<li>last 返回符合给定函数的最后一个元素</li>\n<li>single 返回符合非定函数的单个元素，</li>\n</ul>\n<h4 id=\"生产操作符\"><a href=\"#生产操作符\" class=\"headerlink\" title=\"生产操作符\"></a>生产操作符</h4><ul>\n<li>merge 把两个集合合并成一个新的，相同的index的元素通过给定的函数进行合并成新的元素，作为新的元素几个的一个元素，返回这个新的集合，新的集合的大小有最小的那个集合大小决定。</li>\n<li>partition 通过非定的函数条件，把一个给定的集合分割成两个</li>\n<li>plus + 两个集合相加</li>\n</ul>\n<h4 id=\"顺序操作符\"><a href=\"#顺序操作符\" class=\"headerlink\" title=\"顺序操作符\"></a>顺序操作符</h4><ul>\n<li>reverse 返回一个翻转原list的list</li>\n<li>sort 排序</li>\n<li>sortBy 根据指定函数排序</li>\n<li>sortDescending 降序排列</li>\n<li>sortDescendingBy 。。</li>\n</ul>\n<h3 id=\"空安全-1\"><a href=\"#空安全-1\" class=\"headerlink\" title=\"空安全\"></a>空安全</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val a : Int? = null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过在类型的后面增加一个问号，就表示允许这个变量为null  </li>\n<li>一个可null的变量，在没有检查之前就去使用它，是不能通过编译的。</li>\n<li>还有一个特性就是，当我们检查了变量是否为null之后，就可以自动推导出变量不可为null，进而可以使用，编译通过。  </li>\n</ul>\n<p>这里使用<strong>安全访问操作符（？）</strong>，来达到判断并推导出可null类型。<br>如果我们确定正在使用一个非null得变量，但是他的类型却是可null类型的，我们可以强制使用！！来使编译器执行可null类型，来跳过限制检查。</p>\n<h3 id=\"委托模式\"><a href=\"#委托模式\" class=\"headerlink\" title=\"委托模式\"></a>委托模式</h3><p>他可以用来从类中抽取出主要负责的部分。<br>委托者只需要指定实现的接口的实例，我们可以使用接口指示鸟可飞行，但是鸟的飞行方式呗定义在一个委托中，这个委托定义在构造函数中，所以我们可以针对不同的鸟使用不同的飞行方式，动物使用翅膀飞行的方式被定义在另一个类中，<br><strong><em>TODO</em></strong></p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>可以使用任何类型初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TypedClass&lt;T&gt;(parameter: T) &#123;  </span><br><span class=\"line\">    val value: T = parameter</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果在初始化的时候可以推断出参数的类型，甚至可以不需要去指定泛型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val t1 = TypedClass&lt;String&gt;(&quot;Hello World!&quot;)</span><br><span class=\"line\">val t2 = TypedClass&lt;Int&gt;(25)  </span><br><span class=\"line\">val t2 = TypedClass&lt;Int&gt;(25)</span><br></pre></td></tr></table></figure></p>\n<p>如果是一个null，则不能推断出他的类型，所以必须要加上？<br>函数中也可以使用泛型  </p>"},{"title":"Java反射","date":"2018-10-12T09:50:17.000Z","_content":"### Java反射\n\n#### Class的获取\n* Class是一个类，不同于小写的class是关键字，不过它没有公开的构造方法，所以只能用`getClass()`方法获取相应的Class对象。\n\n```\nClass aClass = new car().getClass();\n```\n<!--more-->\n**Attention~**\n\n* 这种方法不适合基本类型如 int、float 等等，也可以用\n`.class`来获取\n\n```\nClass aClass = new car().getClass();\nClass aClass1 = car.class;\nClass aClass2 = int.class;\nClass aClass3 = String.class;\n```\n* `Class.forName(包名+类名)`例如某些类加上了@hide注解，表示这个类不会出现在SDK中，那么我们没办法获得Car，索性就直接传入它的名字好了。\n\n#### Class的名字\n1. `getName()`获取到的名字包含包名\n2. `getSimpleName()` 相较于`getName()`去掉了包名，注意，匿名内部类获取的simpleName是一个空的字符串\n3. ` getCanonicalName()`官方名字，如果没有返回null\n\n#### Class获取修饰符\nJava中对于一个类的修饰符有很多\n我们可以这样获取他们\n\n```\nSystem.out.println(Modifier.toString(testModeify.class.getModifiers()));\n```\n结果为：public abstract  \n还提供了一系列的判断方法如：\nisInterface、isAbstract、isSynchronized、isFinal等等\n```\nSystem.out.println(Modifier.isPrivate(testModeify.class.getModifiers()));\n```\n结果为false\n\n#### 获取Class成员\n##### 获取属性\n* `getDeclaredField(String name) `获取的是Class中的属性，不包含父类中的属性。\n* `getField() `获取Class中的Public属性，并且如果获取不到的话，会向其父类获取。 \n*  `public Field[] getDeclaredFields()`获取所有的属性，但不包括从父类继承下来的属性\n*  `public Field[] getFields()`获取自身的所有的 public 属性，包括从父类继承下来的。\nLook at these 注释掉的是不合法的。留下的就一目了然了。\n\n```\nClass son =  Son.class;\ntry {\nSystem.out.println(son.getDeclaredField(\"sonStrDef\"));\nSystem.out.println(son.getDeclaredField(\"sonPub\"));\nSystem.out.println(son.getDeclaredField(\"sonPro\"));\nSystem.out.println(son.getDeclaredField(\"sonPri\"));\n//            System.out.println(son.getDeclaredField(\"fatherStr\"));//error\n//            System.out.println(son.getDeclaredField(\"fatherPub\"));\n//            System.out.println(son.getDeclaredField(\"fatherPri\"));\n//            System.out.println(son.getDeclaredField(\"fatherProt\"));\n\n//            System.out.println(son.getField(\"sonStrDef\"));\nSystem.out.println(son.getField(\"sonPub\"));\n//            System.out.println(son.getField(\"sonPro\"));\n//            System.out.println(son.getField(\"sonPri\"));\n//            System.out.println(son.getField(\"fatherStr\"));\nSystem.out.println(son.getField(\"fatherPub\"));\n//            System.out.println(son.getField(\"fatherPri\"));\n//            System.out.println(son.getField(\"fatherProt\"));\n\n} catch (NoSuchFieldException e) {\ne.printStackTrace();\n}\n```\n\n##### 获取方法\n与获取属性一样\n\n* `getDeclaredMethod`\n* `getMethod `\n* `getDeclaredMethods `\n* `getMethod `\n\n##### 获取构造方法\n一样\n\n#### Field类型的获取\n* `public Type getGenericType() {}`\n* `public Class<?> getType() {} `\n\n不同的是两者**返回的类型**不一样，`getGenericType()` 方法能够获取到**泛型**类型。\n\n看一个例子：\n\n* 定义一个公开list集合\n\n```\npublic List<String> strs = new ArrayList<>();\n```\n\n* 然后通过反射获取这个属性\n\n```\nfor (Field field : son.getFields()) {\nSystem.out.println(field.getName());\nSystem.out.println(field.getType());\nSystem.out.println(field.getGenericType());\n}\n\n```\n输出为：\n\n```\nstrs\ninterface java.util.List\njava.util.List<java.lang.String>\n```\n#### Field读取与赋值\nField这个类定义了一系列的`set/get`方法来获取不同类型的值。  \n例如：  \n`public Object get(Object obj);`\n`public void set(Object obj, Object value);`   \nObject参数的作用是为了精确到到底修改的是哪一个对象\n>Class 本身不对成员进行储存，它只提供检索，所以需要用 Field、Method、Constructor 对象来承载这些成员，所以，针对成员的操作时，一般需要为成员指定类的实例引用。如果难于理解的话，可以这样理解，班级这个概念是一个类，一个班级有几十名学生，现在有A、B、C 3 个班级，将所有班级的学生抽出来集合到一个场地来考试，但是学生在试卷上写上自己名字的时候，还要指定自己的班级，这里涉及到的 Object 其实就是类似的作用，表示这个成员是具体属于哪个 Object。这个是为了精确定位。  \n\n###### 例子\n修改一个类中的Public属性值\n\n```\nClass son =  Son.class;//Class\nSon s = new Son();// Object 用于精确修改的位置\nSon s2 = new Son();// Object 用于精确修改的位置\ns.sonInt = 111;\ns2.sonInt = 222;\ntry {\nField field = son.getField(\"sonInt\");\nint a = field.getInt(s);\nint a1 = field.getInt(s2);\nSystem.out.println(\"field a = \" + a);\nSystem.out.println(\"field a1 = \" + a1);\nfield.setInt(s,1111);\nfield.setInt(s2,2222);\nSystem.out.println(\"field s.sonInt = \" + s.sonInt);\nSystem.out.println(\"field s2.sonInt = \" + s2.sonInt);\n} catch (NoSuchFieldException e) {\ne.printStackTrace();\n} catch (IllegalAccessException e) {\ne.printStackTrace();\n}\n```\n\n```\nfield a = 111\nfield a1 = 222\nfield s.sonInt = 1111\nfield s2.sonInt = 2222\n```\n可以看到，一个field可以根据Object的参数不同，获取的值也不同，同样修改的值也不同。\n\n上面是修改的Public的属性值，如果要修改private属性的话，直接用上面的方法会报错。`can not access a member`\n应该加上**`field.setAccessible(true);`**就万事大吉了。\n\n#### 获取方法参数\n* `public Parameter[] getParameters() {}`\n* Parameter.java\n* `public String getName() {}`// 获取参数名字\n* `public Class<?> getType() {}`// 获取参数类型\n* `public int getModifiers() {}`// 获取参数的修饰符\n* Method.java\n* `public Class<?>[] getParameterTypes() {}`// 获取所有的参数类型\n* `public Type[] getGenericParameterTypes() {}`// 获取所有的参数类型，包括泛型\n\n看一组例子：  \nSon.java\n\n```\npublic class Son extends Father {\n\nvoid normalMethod(String name, int num) {\n}\n\npublic void test(String[] paraa, List<String> b, HashMap<Integer, Son> maps) {\n}\n\npublic void exe() {\nSystem.out.println(\"exexexeexexeexeexeexeee\");\n}\n}\n```\n```\nClass son = Son.class;\n\nMethod[] declaredMethods = son.getDeclaredMethods();\nfor (Method method : declaredMethods) {\nSystem.out.println(method.getName());\n// 参数类型\nParameter[] parameters = method.getParameters();\nfor (Parameter parameter : parameters) {\nSystem.out.println(\"parameter name = \" + parameter.getName() + \" \" + parameter.getType().getName());\n}\n\nClass<?>[] parameterTypes = method.getParameterTypes();\nSystem.out.println(\"method para types:\");\nfor (Class<?> type : parameterTypes) {\nSystem.out.print(\" \" + type.getName());\n}\nSystem.out.println();\n\nType[] genericParameterTypes = method.getGenericParameterTypes();\nSystem.out.println(\"method para generic types:\");\nfor (Type type : genericParameterTypes) {\nSystem.out.print(\" \" + type.getTypeName());\n}\nSystem.out.println();\nSystem.out.println(\"==========================================\");\n\n}\n```\n来看一下输出，很清晰\n\n```\ntest\nparameter name = arg0 [Ljava.lang.String;\nparameter name = arg1 java.util.List\nparameter name = arg2 java.util.HashMap\nmethod para types:\n[Ljava.lang.String; java.util.List java.util.HashMap\nmethod para generic types:\njava.lang.String[] java.util.List<java.lang.String> java.util.HashMap<java.lang.Integer, com.zcy.nidavellir.javaworld.Reflection.Son>\n==========================================\nnormalMethod\nparameter name = arg0 java.lang.String\nparameter name = arg1 int\nmethod para types:\njava.lang.String int\nmethod para generic types:\njava.lang.String int\n==========================================\nexe\nmethod para types:\n\nmethod para generic types:\n\n==========================================\n```\n#### Method 获取返回值类型\n* `public Class<?> getReturnType() {}`// 获取返回值类型\n* `public Type getGenericReturnType() {}`// 获取返回值类型包括泛型\n\n#### Method 获取修饰符\n* `public int getModifiers() {}`\n\n#### Method 获取异常类型\n* `public Class<?>[] getExceptionTypes() {}`\n* `public Type[] getGenericExceptionTypes() {}`\n\n#### Method 方法的执行\n* `public Object invoke(Object obj, Object... args) {}`\n\n说明一下:\n\n* 第一个参数是反射Class对应类的一个实例。如果是静态方法，那么传`null`。后面的参数对应方法Method的参数\n* `invoke()` 返回的对象是 Object，所以实际上执行的时候要进行强制转换。\n* 在对 Method 调用 `invoke()` 的时候，如果方法本身会抛出异常，那么这个异常就会经过包装，由 Method 统一抛出 `InvocationTargetException`。而通过 `InvocationTargetException.getCause()` 可以获取真正的异常。 \n* \n例子：\n\n```\npublic class testInvoke {\npublic static void staticMethod(){\nSystem.out.println(\"我是个静态方法，我被调用啦\");\n}\n\nprivate  int add (int a,int b ) {\nreturn a + b;\n}\n\npublic void testException () throws IllegalAccessException {\nthrow new IllegalAccessException(\"You have some problem.\");\n}\n}\n\n```\n\n我们来验证一下：\n\n```\nClass cls = testInvoke.class;\ntry {\n\nMethod method = cls.getMethod(\"staticMethod\", null);// 参数类型的Class，没有参数所以null\nmethod.invoke(null, null);// 静态方法，没有参数，所以都是null\n\ntestInvoke testInvoke = new testInvoke();\nMethod method1 = cls.getDeclaredMethod(\"add\", int.class, int.class);\nmethod1.setAccessible(true);\nint result = (int) method1.invoke(testInvoke, 2, 3);\nSystem.out.println(\"result = \" + result);\n\nMethod method2 = cls.getDeclaredMethod(\"testException\", null);\nmethod2.invoke(testInvoke, null);\n\n} catch (NoSuchMethodException e) {\ne.printStackTrace();\n} catch (SecurityException e) {\ne.printStackTrace();\n} catch (IllegalAccessException e) {\ne.printStackTrace();\n} catch (IllegalArgumentException e) {\ne.printStackTrace();\n} catch (InvocationTargetException e) {\n// 通过 InvocationTargetException.getCause() 获取被包装的异常\nSystem.out.println(\"testException occur some error,Error type is :\" + e.getCause().getClass().getName());\nSystem.out.println(\"Error message is :\" + e.getCause().getMessage());\ne.printStackTrace();\n}\n```\n输出：\n\n```\n我是个静态方法，我被调用啦\n我是add方法，我被调用啦\nresult = 5\n我是testException方法，我被调用啦\ntestException occur some error,Error type is :java.lang.IllegalAccessException\nError message is :You have some problem.\njava.lang.reflect.InvocationTargetException\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat com.zcy.nidavellir.javaworld.Reflection.main.main(main.java:110)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)\nCaused by: java.lang.IllegalAccessException: You have some problem.\nat com.zcy.nidavellir.javaworld.Reflection.testInvoke.testException(testInvoke.java:20)\n... 10 more\n\n\n```\n","source":"_posts/reflection.md","raw":"---\ntitle: Java反射\ndate: 2018-10-12 17:50:17\ncategories: 技术\n---\n### Java反射\n\n#### Class的获取\n* Class是一个类，不同于小写的class是关键字，不过它没有公开的构造方法，所以只能用`getClass()`方法获取相应的Class对象。\n\n```\nClass aClass = new car().getClass();\n```\n<!--more-->\n**Attention~**\n\n* 这种方法不适合基本类型如 int、float 等等，也可以用\n`.class`来获取\n\n```\nClass aClass = new car().getClass();\nClass aClass1 = car.class;\nClass aClass2 = int.class;\nClass aClass3 = String.class;\n```\n* `Class.forName(包名+类名)`例如某些类加上了@hide注解，表示这个类不会出现在SDK中，那么我们没办法获得Car，索性就直接传入它的名字好了。\n\n#### Class的名字\n1. `getName()`获取到的名字包含包名\n2. `getSimpleName()` 相较于`getName()`去掉了包名，注意，匿名内部类获取的simpleName是一个空的字符串\n3. ` getCanonicalName()`官方名字，如果没有返回null\n\n#### Class获取修饰符\nJava中对于一个类的修饰符有很多\n我们可以这样获取他们\n\n```\nSystem.out.println(Modifier.toString(testModeify.class.getModifiers()));\n```\n结果为：public abstract  \n还提供了一系列的判断方法如：\nisInterface、isAbstract、isSynchronized、isFinal等等\n```\nSystem.out.println(Modifier.isPrivate(testModeify.class.getModifiers()));\n```\n结果为false\n\n#### 获取Class成员\n##### 获取属性\n* `getDeclaredField(String name) `获取的是Class中的属性，不包含父类中的属性。\n* `getField() `获取Class中的Public属性，并且如果获取不到的话，会向其父类获取。 \n*  `public Field[] getDeclaredFields()`获取所有的属性，但不包括从父类继承下来的属性\n*  `public Field[] getFields()`获取自身的所有的 public 属性，包括从父类继承下来的。\nLook at these 注释掉的是不合法的。留下的就一目了然了。\n\n```\nClass son =  Son.class;\ntry {\nSystem.out.println(son.getDeclaredField(\"sonStrDef\"));\nSystem.out.println(son.getDeclaredField(\"sonPub\"));\nSystem.out.println(son.getDeclaredField(\"sonPro\"));\nSystem.out.println(son.getDeclaredField(\"sonPri\"));\n//            System.out.println(son.getDeclaredField(\"fatherStr\"));//error\n//            System.out.println(son.getDeclaredField(\"fatherPub\"));\n//            System.out.println(son.getDeclaredField(\"fatherPri\"));\n//            System.out.println(son.getDeclaredField(\"fatherProt\"));\n\n//            System.out.println(son.getField(\"sonStrDef\"));\nSystem.out.println(son.getField(\"sonPub\"));\n//            System.out.println(son.getField(\"sonPro\"));\n//            System.out.println(son.getField(\"sonPri\"));\n//            System.out.println(son.getField(\"fatherStr\"));\nSystem.out.println(son.getField(\"fatherPub\"));\n//            System.out.println(son.getField(\"fatherPri\"));\n//            System.out.println(son.getField(\"fatherProt\"));\n\n} catch (NoSuchFieldException e) {\ne.printStackTrace();\n}\n```\n\n##### 获取方法\n与获取属性一样\n\n* `getDeclaredMethod`\n* `getMethod `\n* `getDeclaredMethods `\n* `getMethod `\n\n##### 获取构造方法\n一样\n\n#### Field类型的获取\n* `public Type getGenericType() {}`\n* `public Class<?> getType() {} `\n\n不同的是两者**返回的类型**不一样，`getGenericType()` 方法能够获取到**泛型**类型。\n\n看一个例子：\n\n* 定义一个公开list集合\n\n```\npublic List<String> strs = new ArrayList<>();\n```\n\n* 然后通过反射获取这个属性\n\n```\nfor (Field field : son.getFields()) {\nSystem.out.println(field.getName());\nSystem.out.println(field.getType());\nSystem.out.println(field.getGenericType());\n}\n\n```\n输出为：\n\n```\nstrs\ninterface java.util.List\njava.util.List<java.lang.String>\n```\n#### Field读取与赋值\nField这个类定义了一系列的`set/get`方法来获取不同类型的值。  \n例如：  \n`public Object get(Object obj);`\n`public void set(Object obj, Object value);`   \nObject参数的作用是为了精确到到底修改的是哪一个对象\n>Class 本身不对成员进行储存，它只提供检索，所以需要用 Field、Method、Constructor 对象来承载这些成员，所以，针对成员的操作时，一般需要为成员指定类的实例引用。如果难于理解的话，可以这样理解，班级这个概念是一个类，一个班级有几十名学生，现在有A、B、C 3 个班级，将所有班级的学生抽出来集合到一个场地来考试，但是学生在试卷上写上自己名字的时候，还要指定自己的班级，这里涉及到的 Object 其实就是类似的作用，表示这个成员是具体属于哪个 Object。这个是为了精确定位。  \n\n###### 例子\n修改一个类中的Public属性值\n\n```\nClass son =  Son.class;//Class\nSon s = new Son();// Object 用于精确修改的位置\nSon s2 = new Son();// Object 用于精确修改的位置\ns.sonInt = 111;\ns2.sonInt = 222;\ntry {\nField field = son.getField(\"sonInt\");\nint a = field.getInt(s);\nint a1 = field.getInt(s2);\nSystem.out.println(\"field a = \" + a);\nSystem.out.println(\"field a1 = \" + a1);\nfield.setInt(s,1111);\nfield.setInt(s2,2222);\nSystem.out.println(\"field s.sonInt = \" + s.sonInt);\nSystem.out.println(\"field s2.sonInt = \" + s2.sonInt);\n} catch (NoSuchFieldException e) {\ne.printStackTrace();\n} catch (IllegalAccessException e) {\ne.printStackTrace();\n}\n```\n\n```\nfield a = 111\nfield a1 = 222\nfield s.sonInt = 1111\nfield s2.sonInt = 2222\n```\n可以看到，一个field可以根据Object的参数不同，获取的值也不同，同样修改的值也不同。\n\n上面是修改的Public的属性值，如果要修改private属性的话，直接用上面的方法会报错。`can not access a member`\n应该加上**`field.setAccessible(true);`**就万事大吉了。\n\n#### 获取方法参数\n* `public Parameter[] getParameters() {}`\n* Parameter.java\n* `public String getName() {}`// 获取参数名字\n* `public Class<?> getType() {}`// 获取参数类型\n* `public int getModifiers() {}`// 获取参数的修饰符\n* Method.java\n* `public Class<?>[] getParameterTypes() {}`// 获取所有的参数类型\n* `public Type[] getGenericParameterTypes() {}`// 获取所有的参数类型，包括泛型\n\n看一组例子：  \nSon.java\n\n```\npublic class Son extends Father {\n\nvoid normalMethod(String name, int num) {\n}\n\npublic void test(String[] paraa, List<String> b, HashMap<Integer, Son> maps) {\n}\n\npublic void exe() {\nSystem.out.println(\"exexexeexexeexeexeexeee\");\n}\n}\n```\n```\nClass son = Son.class;\n\nMethod[] declaredMethods = son.getDeclaredMethods();\nfor (Method method : declaredMethods) {\nSystem.out.println(method.getName());\n// 参数类型\nParameter[] parameters = method.getParameters();\nfor (Parameter parameter : parameters) {\nSystem.out.println(\"parameter name = \" + parameter.getName() + \" \" + parameter.getType().getName());\n}\n\nClass<?>[] parameterTypes = method.getParameterTypes();\nSystem.out.println(\"method para types:\");\nfor (Class<?> type : parameterTypes) {\nSystem.out.print(\" \" + type.getName());\n}\nSystem.out.println();\n\nType[] genericParameterTypes = method.getGenericParameterTypes();\nSystem.out.println(\"method para generic types:\");\nfor (Type type : genericParameterTypes) {\nSystem.out.print(\" \" + type.getTypeName());\n}\nSystem.out.println();\nSystem.out.println(\"==========================================\");\n\n}\n```\n来看一下输出，很清晰\n\n```\ntest\nparameter name = arg0 [Ljava.lang.String;\nparameter name = arg1 java.util.List\nparameter name = arg2 java.util.HashMap\nmethod para types:\n[Ljava.lang.String; java.util.List java.util.HashMap\nmethod para generic types:\njava.lang.String[] java.util.List<java.lang.String> java.util.HashMap<java.lang.Integer, com.zcy.nidavellir.javaworld.Reflection.Son>\n==========================================\nnormalMethod\nparameter name = arg0 java.lang.String\nparameter name = arg1 int\nmethod para types:\njava.lang.String int\nmethod para generic types:\njava.lang.String int\n==========================================\nexe\nmethod para types:\n\nmethod para generic types:\n\n==========================================\n```\n#### Method 获取返回值类型\n* `public Class<?> getReturnType() {}`// 获取返回值类型\n* `public Type getGenericReturnType() {}`// 获取返回值类型包括泛型\n\n#### Method 获取修饰符\n* `public int getModifiers() {}`\n\n#### Method 获取异常类型\n* `public Class<?>[] getExceptionTypes() {}`\n* `public Type[] getGenericExceptionTypes() {}`\n\n#### Method 方法的执行\n* `public Object invoke(Object obj, Object... args) {}`\n\n说明一下:\n\n* 第一个参数是反射Class对应类的一个实例。如果是静态方法，那么传`null`。后面的参数对应方法Method的参数\n* `invoke()` 返回的对象是 Object，所以实际上执行的时候要进行强制转换。\n* 在对 Method 调用 `invoke()` 的时候，如果方法本身会抛出异常，那么这个异常就会经过包装，由 Method 统一抛出 `InvocationTargetException`。而通过 `InvocationTargetException.getCause()` 可以获取真正的异常。 \n* \n例子：\n\n```\npublic class testInvoke {\npublic static void staticMethod(){\nSystem.out.println(\"我是个静态方法，我被调用啦\");\n}\n\nprivate  int add (int a,int b ) {\nreturn a + b;\n}\n\npublic void testException () throws IllegalAccessException {\nthrow new IllegalAccessException(\"You have some problem.\");\n}\n}\n\n```\n\n我们来验证一下：\n\n```\nClass cls = testInvoke.class;\ntry {\n\nMethod method = cls.getMethod(\"staticMethod\", null);// 参数类型的Class，没有参数所以null\nmethod.invoke(null, null);// 静态方法，没有参数，所以都是null\n\ntestInvoke testInvoke = new testInvoke();\nMethod method1 = cls.getDeclaredMethod(\"add\", int.class, int.class);\nmethod1.setAccessible(true);\nint result = (int) method1.invoke(testInvoke, 2, 3);\nSystem.out.println(\"result = \" + result);\n\nMethod method2 = cls.getDeclaredMethod(\"testException\", null);\nmethod2.invoke(testInvoke, null);\n\n} catch (NoSuchMethodException e) {\ne.printStackTrace();\n} catch (SecurityException e) {\ne.printStackTrace();\n} catch (IllegalAccessException e) {\ne.printStackTrace();\n} catch (IllegalArgumentException e) {\ne.printStackTrace();\n} catch (InvocationTargetException e) {\n// 通过 InvocationTargetException.getCause() 获取被包装的异常\nSystem.out.println(\"testException occur some error,Error type is :\" + e.getCause().getClass().getName());\nSystem.out.println(\"Error message is :\" + e.getCause().getMessage());\ne.printStackTrace();\n}\n```\n输出：\n\n```\n我是个静态方法，我被调用啦\n我是add方法，我被调用啦\nresult = 5\n我是testException方法，我被调用啦\ntestException occur some error,Error type is :java.lang.IllegalAccessException\nError message is :You have some problem.\njava.lang.reflect.InvocationTargetException\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat com.zcy.nidavellir.javaworld.Reflection.main.main(main.java:110)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)\nCaused by: java.lang.IllegalAccessException: You have some problem.\nat com.zcy.nidavellir.javaworld.Reflection.testInvoke.testException(testInvoke.java:20)\n... 10 more\n\n\n```\n","slug":"reflection","published":1,"updated":"2018-10-12T09:51:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydsj001dor269729rd8c","content":"<h3 id=\"Java反射\"><a href=\"#Java反射\" class=\"headerlink\" title=\"Java反射\"></a>Java反射</h3><h4 id=\"Class的获取\"><a href=\"#Class的获取\" class=\"headerlink\" title=\"Class的获取\"></a>Class的获取</h4><ul>\n<li>Class是一个类，不同于小写的class是关键字，不过它没有公开的构造方法，所以只能用<code>getClass()</code>方法获取相应的Class对象。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class aClass = new car().getClass();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>Attention~</strong></p>\n<ul>\n<li>这种方法不适合基本类型如 int、float 等等，也可以用<br><code>.class</code>来获取</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class aClass = new car().getClass();</span><br><span class=\"line\">Class aClass1 = car.class;</span><br><span class=\"line\">Class aClass2 = int.class;</span><br><span class=\"line\">Class aClass3 = String.class;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Class.forName(包名+类名)</code>例如某些类加上了@hide注解，表示这个类不会出现在SDK中，那么我们没办法获得Car，索性就直接传入它的名字好了。</li>\n</ul>\n<h4 id=\"Class的名字\"><a href=\"#Class的名字\" class=\"headerlink\" title=\"Class的名字\"></a>Class的名字</h4><ol>\n<li><code>getName()</code>获取到的名字包含包名</li>\n<li><code>getSimpleName()</code> 相较于<code>getName()</code>去掉了包名，注意，匿名内部类获取的simpleName是一个空的字符串</li>\n<li><code>getCanonicalName()</code>官方名字，如果没有返回null</li>\n</ol>\n<h4 id=\"Class获取修饰符\"><a href=\"#Class获取修饰符\" class=\"headerlink\" title=\"Class获取修饰符\"></a>Class获取修饰符</h4><p>Java中对于一个类的修饰符有很多<br>我们可以这样获取他们</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Modifier.toString(testModeify.class.getModifiers()));</span><br></pre></td></tr></table></figure>\n<p>结果为：public abstract<br>还提供了一系列的判断方法如：<br>isInterface、isAbstract、isSynchronized、isFinal等等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Modifier.isPrivate(testModeify.class.getModifiers()));</span><br></pre></td></tr></table></figure></p>\n<p>结果为false</p>\n<h4 id=\"获取Class成员\"><a href=\"#获取Class成员\" class=\"headerlink\" title=\"获取Class成员\"></a>获取Class成员</h4><h5 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h5><ul>\n<li><code>getDeclaredField(String name)</code>获取的是Class中的属性，不包含父类中的属性。</li>\n<li><code>getField()</code>获取Class中的Public属性，并且如果获取不到的话，会向其父类获取。 </li>\n<li><code>public Field[] getDeclaredFields()</code>获取所有的属性，但不包括从父类继承下来的属性</li>\n<li><code>public Field[] getFields()</code>获取自身的所有的 public 属性，包括从父类继承下来的。<br>Look at these 注释掉的是不合法的。留下的就一目了然了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son =  Son.class;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonStrDef&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPub&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPro&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherStr&quot;));//error</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherProt&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonStrDef&quot;));</span><br><span class=\"line\">System.out.println(son.getField(&quot;sonPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonPro&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherStr&quot;));</span><br><span class=\"line\">System.out.println(son.getField(&quot;fatherPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherProt&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h5><p>与获取属性一样</p>\n<ul>\n<li><code>getDeclaredMethod</code></li>\n<li><code>getMethod</code></li>\n<li><code>getDeclaredMethods</code></li>\n<li><code>getMethod</code></li>\n</ul>\n<h5 id=\"获取构造方法\"><a href=\"#获取构造方法\" class=\"headerlink\" title=\"获取构造方法\"></a>获取构造方法</h5><p>一样</p>\n<h4 id=\"Field类型的获取\"><a href=\"#Field类型的获取\" class=\"headerlink\" title=\"Field类型的获取\"></a>Field类型的获取</h4><ul>\n<li><code>public Type getGenericType() {}</code></li>\n<li><code>public Class&lt;?&gt; getType() {}</code></li>\n</ul>\n<p>不同的是两者<strong>返回的类型</strong>不一样，<code>getGenericType()</code> 方法能够获取到<strong>泛型</strong>类型。</p>\n<p>看一个例子：</p>\n<ul>\n<li>定义一个公开list集合</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后通过反射获取这个属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (Field field : son.getFields()) &#123;</span><br><span class=\"line\">System.out.println(field.getName());</span><br><span class=\"line\">System.out.println(field.getType());</span><br><span class=\"line\">System.out.println(field.getGenericType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs</span><br><span class=\"line\">interface java.util.List</span><br><span class=\"line\">java.util.List&lt;java.lang.String&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Field读取与赋值\"><a href=\"#Field读取与赋值\" class=\"headerlink\" title=\"Field读取与赋值\"></a>Field读取与赋值</h4><p>Field这个类定义了一系列的<code>set/get</code>方法来获取不同类型的值。<br>例如：<br><code>public Object get(Object obj);</code><br><code>public void set(Object obj, Object value);</code><br>Object参数的作用是为了精确到到底修改的是哪一个对象</p>\n<blockquote>\n<p>Class 本身不对成员进行储存，它只提供检索，所以需要用 Field、Method、Constructor 对象来承载这些成员，所以，针对成员的操作时，一般需要为成员指定类的实例引用。如果难于理解的话，可以这样理解，班级这个概念是一个类，一个班级有几十名学生，现在有A、B、C 3 个班级，将所有班级的学生抽出来集合到一个场地来考试，但是学生在试卷上写上自己名字的时候，还要指定自己的班级，这里涉及到的 Object 其实就是类似的作用，表示这个成员是具体属于哪个 Object。这个是为了精确定位。  </p>\n</blockquote>\n<h6 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h6><p>修改一个类中的Public属性值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son =  Son.class;//Class</span><br><span class=\"line\">Son s = new Son();// Object 用于精确修改的位置</span><br><span class=\"line\">Son s2 = new Son();// Object 用于精确修改的位置</span><br><span class=\"line\">s.sonInt = 111;</span><br><span class=\"line\">s2.sonInt = 222;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">Field field = son.getField(&quot;sonInt&quot;);</span><br><span class=\"line\">int a = field.getInt(s);</span><br><span class=\"line\">int a1 = field.getInt(s2);</span><br><span class=\"line\">System.out.println(&quot;field a = &quot; + a);</span><br><span class=\"line\">System.out.println(&quot;field a1 = &quot; + a1);</span><br><span class=\"line\">field.setInt(s,1111);</span><br><span class=\"line\">field.setInt(s2,2222);</span><br><span class=\"line\">System.out.println(&quot;field s.sonInt = &quot; + s.sonInt);</span><br><span class=\"line\">System.out.println(&quot;field s2.sonInt = &quot; + s2.sonInt);</span><br><span class=\"line\">&#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">field a = 111</span><br><span class=\"line\">field a1 = 222</span><br><span class=\"line\">field s.sonInt = 1111</span><br><span class=\"line\">field s2.sonInt = 2222</span><br></pre></td></tr></table></figure>\n<p>可以看到，一个field可以根据Object的参数不同，获取的值也不同，同样修改的值也不同。</p>\n<p>上面是修改的Public的属性值，如果要修改private属性的话，直接用上面的方法会报错。<code>can not access a member</code><br>应该加上<strong><code>field.setAccessible(true);</code></strong>就万事大吉了。</p>\n<h4 id=\"获取方法参数\"><a href=\"#获取方法参数\" class=\"headerlink\" title=\"获取方法参数\"></a>获取方法参数</h4><ul>\n<li><code>public Parameter[] getParameters() {}</code></li>\n<li>Parameter.java</li>\n<li><code>public String getName() {}</code>// 获取参数名字</li>\n<li><code>public Class&lt;?&gt; getType() {}</code>// 获取参数类型</li>\n<li><code>public int getModifiers() {}</code>// 获取参数的修饰符</li>\n<li>Method.java</li>\n<li><code>public Class&lt;?&gt;[] getParameterTypes() {}</code>// 获取所有的参数类型</li>\n<li><code>public Type[] getGenericParameterTypes() {}</code>// 获取所有的参数类型，包括泛型</li>\n</ul>\n<p>看一组例子：<br>Son.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son extends Father &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">void normalMethod(String name, int num) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test(String[] paraa, List&lt;String&gt; b, HashMap&lt;Integer, Son&gt; maps) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void exe() &#123;</span><br><span class=\"line\">System.out.println(&quot;exexexeexexeexeexeexeee&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son = Son.class;</span><br><span class=\"line\"></span><br><span class=\"line\">Method[] declaredMethods = son.getDeclaredMethods();</span><br><span class=\"line\">for (Method method : declaredMethods) &#123;</span><br><span class=\"line\">System.out.println(method.getName());</span><br><span class=\"line\">// 参数类型</span><br><span class=\"line\">Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">for (Parameter parameter : parameters) &#123;</span><br><span class=\"line\">System.out.println(&quot;parameter name = &quot; + parameter.getName() + &quot; &quot; + parameter.getType().getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class=\"line\">System.out.println(&quot;method para types:&quot;);</span><br><span class=\"line\">for (Class&lt;?&gt; type : parameterTypes) &#123;</span><br><span class=\"line\">System.out.print(&quot; &quot; + type.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class=\"line\">System.out.println(&quot;method para generic types:&quot;);</span><br><span class=\"line\">for (Type type : genericParameterTypes) &#123;</span><br><span class=\"line\">System.out.print(&quot; &quot; + type.getTypeName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\">System.out.println(&quot;==========================================&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来看一下输出，很清晰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">parameter name = arg0 [Ljava.lang.String;</span><br><span class=\"line\">parameter name = arg1 java.util.List</span><br><span class=\"line\">parameter name = arg2 java.util.HashMap</span><br><span class=\"line\">method para types:</span><br><span class=\"line\">[Ljava.lang.String; java.util.List java.util.HashMap</span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\">java.lang.String[] java.util.List&lt;java.lang.String&gt; java.util.HashMap&lt;java.lang.Integer, com.zcy.nidavellir.javaworld.Reflection.Son&gt;</span><br><span class=\"line\">==========================================</span><br><span class=\"line\">normalMethod</span><br><span class=\"line\">parameter name = arg0 java.lang.String</span><br><span class=\"line\">parameter name = arg1 int</span><br><span class=\"line\">method para types:</span><br><span class=\"line\">java.lang.String int</span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\">java.lang.String int</span><br><span class=\"line\">==========================================</span><br><span class=\"line\">exe</span><br><span class=\"line\">method para types:</span><br><span class=\"line\"></span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\"></span><br><span class=\"line\">==========================================</span><br></pre></td></tr></table></figure>\n<h4 id=\"Method-获取返回值类型\"><a href=\"#Method-获取返回值类型\" class=\"headerlink\" title=\"Method 获取返回值类型\"></a>Method 获取返回值类型</h4><ul>\n<li><code>public Class&lt;?&gt; getReturnType() {}</code>// 获取返回值类型</li>\n<li><code>public Type getGenericReturnType() {}</code>// 获取返回值类型包括泛型</li>\n</ul>\n<h4 id=\"Method-获取修饰符\"><a href=\"#Method-获取修饰符\" class=\"headerlink\" title=\"Method 获取修饰符\"></a>Method 获取修饰符</h4><ul>\n<li><code>public int getModifiers() {}</code></li>\n</ul>\n<h4 id=\"Method-获取异常类型\"><a href=\"#Method-获取异常类型\" class=\"headerlink\" title=\"Method 获取异常类型\"></a>Method 获取异常类型</h4><ul>\n<li><code>public Class&lt;?&gt;[] getExceptionTypes() {}</code></li>\n<li><code>public Type[] getGenericExceptionTypes() {}</code></li>\n</ul>\n<h4 id=\"Method-方法的执行\"><a href=\"#Method-方法的执行\" class=\"headerlink\" title=\"Method 方法的执行\"></a>Method 方法的执行</h4><ul>\n<li><code>public Object invoke(Object obj, Object... args) {}</code></li>\n</ul>\n<p>说明一下:</p>\n<ul>\n<li>第一个参数是反射Class对应类的一个实例。如果是静态方法，那么传<code>null</code>。后面的参数对应方法Method的参数</li>\n<li><code>invoke()</code> 返回的对象是 Object，所以实际上执行的时候要进行强制转换。</li>\n<li>在对 Method 调用 <code>invoke()</code> 的时候，如果方法本身会抛出异常，那么这个异常就会经过包装，由 Method 统一抛出 <code>InvocationTargetException</code>。而通过 <code>InvocationTargetException.getCause()</code> 可以获取真正的异常。 </li>\n<li>例子：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class testInvoke &#123;</span><br><span class=\"line\">public static void staticMethod()&#123;</span><br><span class=\"line\">System.out.println(&quot;我是个静态方法，我被调用啦&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private  int add (int a,int b ) &#123;</span><br><span class=\"line\">return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void testException () throws IllegalAccessException &#123;</span><br><span class=\"line\">throw new IllegalAccessException(&quot;You have some problem.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cls = testInvoke.class;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">Method method = cls.getMethod(&quot;staticMethod&quot;, null);// 参数类型的Class，没有参数所以null</span><br><span class=\"line\">method.invoke(null, null);// 静态方法，没有参数，所以都是null</span><br><span class=\"line\"></span><br><span class=\"line\">testInvoke testInvoke = new testInvoke();</span><br><span class=\"line\">Method method1 = cls.getDeclaredMethod(&quot;add&quot;, int.class, int.class);</span><br><span class=\"line\">method1.setAccessible(true);</span><br><span class=\"line\">int result = (int) method1.invoke(testInvoke, 2, 3);</span><br><span class=\"line\">System.out.println(&quot;result = &quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\">Method method2 = cls.getDeclaredMethod(&quot;testException&quot;, null);</span><br><span class=\"line\">method2.invoke(testInvoke, null);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (SecurityException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalArgumentException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">// 通过 InvocationTargetException.getCause() 获取被包装的异常</span><br><span class=\"line\">System.out.println(&quot;testException occur some error,Error type is :&quot; + e.getCause().getClass().getName());</span><br><span class=\"line\">System.out.println(&quot;Error message is :&quot; + e.getCause().getMessage());</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是个静态方法，我被调用啦</span><br><span class=\"line\">我是add方法，我被调用啦</span><br><span class=\"line\">result = 5</span><br><span class=\"line\">我是testException方法，我被调用啦</span><br><span class=\"line\">testException occur some error,Error type is :java.lang.IllegalAccessException</span><br><span class=\"line\">Error message is :You have some problem.</span><br><span class=\"line\">java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">at com.zcy.nidavellir.javaworld.Reflection.main.main(main.java:110)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">at com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)</span><br><span class=\"line\">Caused by: java.lang.IllegalAccessException: You have some problem.</span><br><span class=\"line\">at com.zcy.nidavellir.javaworld.Reflection.testInvoke.testException(testInvoke.java:20)</span><br><span class=\"line\">... 10 more</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Java反射\"><a href=\"#Java反射\" class=\"headerlink\" title=\"Java反射\"></a>Java反射</h3><h4 id=\"Class的获取\"><a href=\"#Class的获取\" class=\"headerlink\" title=\"Class的获取\"></a>Class的获取</h4><ul>\n<li>Class是一个类，不同于小写的class是关键字，不过它没有公开的构造方法，所以只能用<code>getClass()</code>方法获取相应的Class对象。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class aClass = new car().getClass();</span><br></pre></td></tr></table></figure>","more":"<p><strong>Attention~</strong></p>\n<ul>\n<li>这种方法不适合基本类型如 int、float 等等，也可以用<br><code>.class</code>来获取</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class aClass = new car().getClass();</span><br><span class=\"line\">Class aClass1 = car.class;</span><br><span class=\"line\">Class aClass2 = int.class;</span><br><span class=\"line\">Class aClass3 = String.class;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Class.forName(包名+类名)</code>例如某些类加上了@hide注解，表示这个类不会出现在SDK中，那么我们没办法获得Car，索性就直接传入它的名字好了。</li>\n</ul>\n<h4 id=\"Class的名字\"><a href=\"#Class的名字\" class=\"headerlink\" title=\"Class的名字\"></a>Class的名字</h4><ol>\n<li><code>getName()</code>获取到的名字包含包名</li>\n<li><code>getSimpleName()</code> 相较于<code>getName()</code>去掉了包名，注意，匿名内部类获取的simpleName是一个空的字符串</li>\n<li><code>getCanonicalName()</code>官方名字，如果没有返回null</li>\n</ol>\n<h4 id=\"Class获取修饰符\"><a href=\"#Class获取修饰符\" class=\"headerlink\" title=\"Class获取修饰符\"></a>Class获取修饰符</h4><p>Java中对于一个类的修饰符有很多<br>我们可以这样获取他们</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Modifier.toString(testModeify.class.getModifiers()));</span><br></pre></td></tr></table></figure>\n<p>结果为：public abstract<br>还提供了一系列的判断方法如：<br>isInterface、isAbstract、isSynchronized、isFinal等等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Modifier.isPrivate(testModeify.class.getModifiers()));</span><br></pre></td></tr></table></figure></p>\n<p>结果为false</p>\n<h4 id=\"获取Class成员\"><a href=\"#获取Class成员\" class=\"headerlink\" title=\"获取Class成员\"></a>获取Class成员</h4><h5 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h5><ul>\n<li><code>getDeclaredField(String name)</code>获取的是Class中的属性，不包含父类中的属性。</li>\n<li><code>getField()</code>获取Class中的Public属性，并且如果获取不到的话，会向其父类获取。 </li>\n<li><code>public Field[] getDeclaredFields()</code>获取所有的属性，但不包括从父类继承下来的属性</li>\n<li><code>public Field[] getFields()</code>获取自身的所有的 public 属性，包括从父类继承下来的。<br>Look at these 注释掉的是不合法的。留下的就一目了然了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son =  Son.class;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonStrDef&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPub&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPro&quot;));</span><br><span class=\"line\">System.out.println(son.getDeclaredField(&quot;sonPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherStr&quot;));//error</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getDeclaredField(&quot;fatherProt&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonStrDef&quot;));</span><br><span class=\"line\">System.out.println(son.getField(&quot;sonPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonPro&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;sonPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherStr&quot;));</span><br><span class=\"line\">System.out.println(son.getField(&quot;fatherPub&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherPri&quot;));</span><br><span class=\"line\">//            System.out.println(son.getField(&quot;fatherProt&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h5><p>与获取属性一样</p>\n<ul>\n<li><code>getDeclaredMethod</code></li>\n<li><code>getMethod</code></li>\n<li><code>getDeclaredMethods</code></li>\n<li><code>getMethod</code></li>\n</ul>\n<h5 id=\"获取构造方法\"><a href=\"#获取构造方法\" class=\"headerlink\" title=\"获取构造方法\"></a>获取构造方法</h5><p>一样</p>\n<h4 id=\"Field类型的获取\"><a href=\"#Field类型的获取\" class=\"headerlink\" title=\"Field类型的获取\"></a>Field类型的获取</h4><ul>\n<li><code>public Type getGenericType() {}</code></li>\n<li><code>public Class&lt;?&gt; getType() {}</code></li>\n</ul>\n<p>不同的是两者<strong>返回的类型</strong>不一样，<code>getGenericType()</code> 方法能够获取到<strong>泛型</strong>类型。</p>\n<p>看一个例子：</p>\n<ul>\n<li>定义一个公开list集合</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;String&gt; strs = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后通过反射获取这个属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (Field field : son.getFields()) &#123;</span><br><span class=\"line\">System.out.println(field.getName());</span><br><span class=\"line\">System.out.println(field.getType());</span><br><span class=\"line\">System.out.println(field.getGenericType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strs</span><br><span class=\"line\">interface java.util.List</span><br><span class=\"line\">java.util.List&lt;java.lang.String&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Field读取与赋值\"><a href=\"#Field读取与赋值\" class=\"headerlink\" title=\"Field读取与赋值\"></a>Field读取与赋值</h4><p>Field这个类定义了一系列的<code>set/get</code>方法来获取不同类型的值。<br>例如：<br><code>public Object get(Object obj);</code><br><code>public void set(Object obj, Object value);</code><br>Object参数的作用是为了精确到到底修改的是哪一个对象</p>\n<blockquote>\n<p>Class 本身不对成员进行储存，它只提供检索，所以需要用 Field、Method、Constructor 对象来承载这些成员，所以，针对成员的操作时，一般需要为成员指定类的实例引用。如果难于理解的话，可以这样理解，班级这个概念是一个类，一个班级有几十名学生，现在有A、B、C 3 个班级，将所有班级的学生抽出来集合到一个场地来考试，但是学生在试卷上写上自己名字的时候，还要指定自己的班级，这里涉及到的 Object 其实就是类似的作用，表示这个成员是具体属于哪个 Object。这个是为了精确定位。  </p>\n</blockquote>\n<h6 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h6><p>修改一个类中的Public属性值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son =  Son.class;//Class</span><br><span class=\"line\">Son s = new Son();// Object 用于精确修改的位置</span><br><span class=\"line\">Son s2 = new Son();// Object 用于精确修改的位置</span><br><span class=\"line\">s.sonInt = 111;</span><br><span class=\"line\">s2.sonInt = 222;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">Field field = son.getField(&quot;sonInt&quot;);</span><br><span class=\"line\">int a = field.getInt(s);</span><br><span class=\"line\">int a1 = field.getInt(s2);</span><br><span class=\"line\">System.out.println(&quot;field a = &quot; + a);</span><br><span class=\"line\">System.out.println(&quot;field a1 = &quot; + a1);</span><br><span class=\"line\">field.setInt(s,1111);</span><br><span class=\"line\">field.setInt(s2,2222);</span><br><span class=\"line\">System.out.println(&quot;field s.sonInt = &quot; + s.sonInt);</span><br><span class=\"line\">System.out.println(&quot;field s2.sonInt = &quot; + s2.sonInt);</span><br><span class=\"line\">&#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">field a = 111</span><br><span class=\"line\">field a1 = 222</span><br><span class=\"line\">field s.sonInt = 1111</span><br><span class=\"line\">field s2.sonInt = 2222</span><br></pre></td></tr></table></figure>\n<p>可以看到，一个field可以根据Object的参数不同，获取的值也不同，同样修改的值也不同。</p>\n<p>上面是修改的Public的属性值，如果要修改private属性的话，直接用上面的方法会报错。<code>can not access a member</code><br>应该加上<strong><code>field.setAccessible(true);</code></strong>就万事大吉了。</p>\n<h4 id=\"获取方法参数\"><a href=\"#获取方法参数\" class=\"headerlink\" title=\"获取方法参数\"></a>获取方法参数</h4><ul>\n<li><code>public Parameter[] getParameters() {}</code></li>\n<li>Parameter.java</li>\n<li><code>public String getName() {}</code>// 获取参数名字</li>\n<li><code>public Class&lt;?&gt; getType() {}</code>// 获取参数类型</li>\n<li><code>public int getModifiers() {}</code>// 获取参数的修饰符</li>\n<li>Method.java</li>\n<li><code>public Class&lt;?&gt;[] getParameterTypes() {}</code>// 获取所有的参数类型</li>\n<li><code>public Type[] getGenericParameterTypes() {}</code>// 获取所有的参数类型，包括泛型</li>\n</ul>\n<p>看一组例子：<br>Son.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son extends Father &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">void normalMethod(String name, int num) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test(String[] paraa, List&lt;String&gt; b, HashMap&lt;Integer, Son&gt; maps) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void exe() &#123;</span><br><span class=\"line\">System.out.println(&quot;exexexeexexeexeexeexeee&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class son = Son.class;</span><br><span class=\"line\"></span><br><span class=\"line\">Method[] declaredMethods = son.getDeclaredMethods();</span><br><span class=\"line\">for (Method method : declaredMethods) &#123;</span><br><span class=\"line\">System.out.println(method.getName());</span><br><span class=\"line\">// 参数类型</span><br><span class=\"line\">Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">for (Parameter parameter : parameters) &#123;</span><br><span class=\"line\">System.out.println(&quot;parameter name = &quot; + parameter.getName() + &quot; &quot; + parameter.getType().getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class=\"line\">System.out.println(&quot;method para types:&quot;);</span><br><span class=\"line\">for (Class&lt;?&gt; type : parameterTypes) &#123;</span><br><span class=\"line\">System.out.print(&quot; &quot; + type.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class=\"line\">System.out.println(&quot;method para generic types:&quot;);</span><br><span class=\"line\">for (Type type : genericParameterTypes) &#123;</span><br><span class=\"line\">System.out.print(&quot; &quot; + type.getTypeName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\">System.out.println(&quot;==========================================&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来看一下输出，很清晰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test</span><br><span class=\"line\">parameter name = arg0 [Ljava.lang.String;</span><br><span class=\"line\">parameter name = arg1 java.util.List</span><br><span class=\"line\">parameter name = arg2 java.util.HashMap</span><br><span class=\"line\">method para types:</span><br><span class=\"line\">[Ljava.lang.String; java.util.List java.util.HashMap</span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\">java.lang.String[] java.util.List&lt;java.lang.String&gt; java.util.HashMap&lt;java.lang.Integer, com.zcy.nidavellir.javaworld.Reflection.Son&gt;</span><br><span class=\"line\">==========================================</span><br><span class=\"line\">normalMethod</span><br><span class=\"line\">parameter name = arg0 java.lang.String</span><br><span class=\"line\">parameter name = arg1 int</span><br><span class=\"line\">method para types:</span><br><span class=\"line\">java.lang.String int</span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\">java.lang.String int</span><br><span class=\"line\">==========================================</span><br><span class=\"line\">exe</span><br><span class=\"line\">method para types:</span><br><span class=\"line\"></span><br><span class=\"line\">method para generic types:</span><br><span class=\"line\"></span><br><span class=\"line\">==========================================</span><br></pre></td></tr></table></figure>\n<h4 id=\"Method-获取返回值类型\"><a href=\"#Method-获取返回值类型\" class=\"headerlink\" title=\"Method 获取返回值类型\"></a>Method 获取返回值类型</h4><ul>\n<li><code>public Class&lt;?&gt; getReturnType() {}</code>// 获取返回值类型</li>\n<li><code>public Type getGenericReturnType() {}</code>// 获取返回值类型包括泛型</li>\n</ul>\n<h4 id=\"Method-获取修饰符\"><a href=\"#Method-获取修饰符\" class=\"headerlink\" title=\"Method 获取修饰符\"></a>Method 获取修饰符</h4><ul>\n<li><code>public int getModifiers() {}</code></li>\n</ul>\n<h4 id=\"Method-获取异常类型\"><a href=\"#Method-获取异常类型\" class=\"headerlink\" title=\"Method 获取异常类型\"></a>Method 获取异常类型</h4><ul>\n<li><code>public Class&lt;?&gt;[] getExceptionTypes() {}</code></li>\n<li><code>public Type[] getGenericExceptionTypes() {}</code></li>\n</ul>\n<h4 id=\"Method-方法的执行\"><a href=\"#Method-方法的执行\" class=\"headerlink\" title=\"Method 方法的执行\"></a>Method 方法的执行</h4><ul>\n<li><code>public Object invoke(Object obj, Object... args) {}</code></li>\n</ul>\n<p>说明一下:</p>\n<ul>\n<li>第一个参数是反射Class对应类的一个实例。如果是静态方法，那么传<code>null</code>。后面的参数对应方法Method的参数</li>\n<li><code>invoke()</code> 返回的对象是 Object，所以实际上执行的时候要进行强制转换。</li>\n<li>在对 Method 调用 <code>invoke()</code> 的时候，如果方法本身会抛出异常，那么这个异常就会经过包装，由 Method 统一抛出 <code>InvocationTargetException</code>。而通过 <code>InvocationTargetException.getCause()</code> 可以获取真正的异常。 </li>\n<li>例子：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class testInvoke &#123;</span><br><span class=\"line\">public static void staticMethod()&#123;</span><br><span class=\"line\">System.out.println(&quot;我是个静态方法，我被调用啦&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private  int add (int a,int b ) &#123;</span><br><span class=\"line\">return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void testException () throws IllegalAccessException &#123;</span><br><span class=\"line\">throw new IllegalAccessException(&quot;You have some problem.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来验证一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cls = testInvoke.class;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">Method method = cls.getMethod(&quot;staticMethod&quot;, null);// 参数类型的Class，没有参数所以null</span><br><span class=\"line\">method.invoke(null, null);// 静态方法，没有参数，所以都是null</span><br><span class=\"line\"></span><br><span class=\"line\">testInvoke testInvoke = new testInvoke();</span><br><span class=\"line\">Method method1 = cls.getDeclaredMethod(&quot;add&quot;, int.class, int.class);</span><br><span class=\"line\">method1.setAccessible(true);</span><br><span class=\"line\">int result = (int) method1.invoke(testInvoke, 2, 3);</span><br><span class=\"line\">System.out.println(&quot;result = &quot; + result);</span><br><span class=\"line\"></span><br><span class=\"line\">Method method2 = cls.getDeclaredMethod(&quot;testException&quot;, null);</span><br><span class=\"line\">method2.invoke(testInvoke, null);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (SecurityException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (IllegalArgumentException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">// 通过 InvocationTargetException.getCause() 获取被包装的异常</span><br><span class=\"line\">System.out.println(&quot;testException occur some error,Error type is :&quot; + e.getCause().getClass().getName());</span><br><span class=\"line\">System.out.println(&quot;Error message is :&quot; + e.getCause().getMessage());</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是个静态方法，我被调用啦</span><br><span class=\"line\">我是add方法，我被调用啦</span><br><span class=\"line\">result = 5</span><br><span class=\"line\">我是testException方法，我被调用啦</span><br><span class=\"line\">testException occur some error,Error type is :java.lang.IllegalAccessException</span><br><span class=\"line\">Error message is :You have some problem.</span><br><span class=\"line\">java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">at com.zcy.nidavellir.javaworld.Reflection.main.main(main.java:110)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">at com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)</span><br><span class=\"line\">Caused by: java.lang.IllegalAccessException: You have some problem.</span><br><span class=\"line\">at com.zcy.nidavellir.javaworld.Reflection.testInvoke.testException(testInvoke.java:20)</span><br><span class=\"line\">... 10 more</span><br></pre></td></tr></table></figure>"},{"title":"Eventbus浅析","date":"2018-10-25T07:53:05.000Z","_content":"\n### 注册EventBus\n`EventBus.getDefault().register(this);`  \n\n我们来看看**`getDefault()`**中有什么\n\n```\n/** Convenience singleton for apps using a process-wide EventBus instance. */\npublic static EventBus getDefault() {\n    EventBus instance = defaultInstance;\n    if (instance == null) {\n        synchronized (EventBus.class) {\n            instance = EventBus.defaultInstance;\n            if (instance == null) {\n                instance = EventBus.defaultInstance = new EventBus();\n            }\n        }\n    }\n    return instance;\n}\n\n```\n很明显是一个**`DoubleCheck`**单例模式，具体的EventBus构造方法没贴，后面会介绍他其中的一些属性。\n  \n<!--more-->\n获取完了对象紧接着对当前activity或fragment进行了注册**register**\n\n```\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n    synchronized (this) {\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            subscribe(subscriber, subscriberMethod);\n        }\n    }\n}\n\n```\n\n我们可以看到，传入的`this`可以是Activity，进而得到了其class，通过**`findSubscriberMethods`**找到所有在这个class下的**Subscriber**们存放在一个List集合中，然后**逐个进行事件订阅**。\n\n关键方法 **findSubscriberMethods** \n\nsubscriberClass = 订阅类的class \n\n```\nList<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n    List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n    if (subscriberMethods != null) {\n        return subscriberMethods;\n    }\n\t //是否忽略注解器生成的MyEventBusIndex类 默认false\n    if (ignoreGeneratedIndex) {\n        subscriberMethods = findUsingReflection(subscriberClass);\n    } else {\n        subscriberMethods = findUsingInfo(subscriberClass);\n    }\n    if (subscriberMethods.isEmpty()) {\n        throw new EventBusException(\"Subscriber \" + subscriberClass\n                + \" and its super classes have no public methods with the @Subscribe annotation\");\n    } else {\n        METHOD_CACHE.put(subscriberClass, subscriberMethods);\n        return subscriberMethods;\n    }\n}\n```\n其中第一行的`METHOD_CACHE`作为缓存Map，以订阅类的class为key，订阅的方法集合作为value。\n`private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();` \n\n如果没有缓存的时候，会判断是否**忽略生成index**，默认是false，那么我们来看一下`findUsingInfo(subscriberClass);`这个真正去查找该class下订阅方法的方法。\n\n先看一下FindState是什么东西。他里面存储了一些订阅者和订阅方法信息\n\n```\nstatic class FindState {\n\t//订阅方法集合，\n    final List<SubscriberMethod> subscriberMethods = new ArrayList<>();\n    //以event为key，以method为value\n    final Map<Class, Object> anyMethodByEventType = new HashMap<>();\n    //以method的名字生成一个methodKey为key，该method的类(订阅者)为value\n    final Map<String, Class> subscriberClassByMethodKey = new HashMap<>();\n    final StringBuilder methodKeyBuilder = new StringBuilder(128);\n\n    Class<?> subscriberClass;\n    Class<?> clazz;\n    boolean skipSuperClasses;\n    SubscriberInfo subscriberInfo;\n\n```\n这个方法返回的是我们最终需要的`List<SubscriberMethod>`\n\n```\nprivate List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n    FindState findState = prepareFindState();\n    // 利用findState辅助来获取订阅方法\n    findState.initForSubscriber(subscriberClass);\n    while (findState.clazz != null) {\n        // 获取class对应的subscriberInfo\n        findState.subscriberInfo = getSubscriberInfo(findState);\n        if (findState.subscriberInfo != null) {\n            // 获取订阅方法数组\n            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n            for (SubscriberMethod subscriberMethod : array) {\n                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                    findState.subscriberMethods.add(subscriberMethod);\n                }\n            }\n        } else {\n            // subscriberInfo为null 则通过反射获取\n            findUsingReflectionInSingleClass(findState);\n        }\n        //接着获取父类的订阅方法\n        findState.moveToSuperclass();\n    }\n    return getMethodsAndRelease(findState);\n}\n```\n\n\n### 方法订阅（注册方法）\n\n其实上面这些就是为了获取到当前class 的所有订阅方法。然后遍历这些个订阅方法来完成订阅。接下来看一下**逐个订阅**  \n\n```\nfor (SubscriberMethod subscriberMethod : subscriberMethods) {\n    subscribe(subscriber, subscriberMethod);\n}\n```\n首先**映入眼帘**的是两个参数，一个**订阅Class**一个是订阅类中的要**订阅的方法**。\n\n上面把要订阅的方法封装成了`SubscriberMethod `。并且这个有一个事件类型（订阅方法的参数）`eventType`需要使用\n\n```\npublic class SubscriberMethod {\n    final Method method;\n    final ThreadMode threadMode;\n    final Class<?> eventType;\n    final int priority;\n    final boolean sticky;\n    /** Used for efficient comparison */\n    String methodString;\n\n```\n看订阅方法\n\n```\n// Must be called in synchronized block\nprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n    \n\t//订阅方法的参数类型，也是事件类型\n\tClass<?> eventType = subscriberMethod.eventType;\n    // 封装订阅者和订阅方法\n    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n    // 根据事件类型key，获取subscriptions （Map<Class<?>, CopyOnWriteArrayList<Subscription>>） \n    CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    // 如果subscriptions集合为空，说明该事件类型没有注册，则创建一个新的集合。并把事件类型`eventType`作为key 和订阅方法集合作为value加入其中\n    if (subscriptions == null) {\n        subscriptions = new CopyOnWriteArrayList<>();\n        subscriptionsByEventType.put(eventType, subscriptions);\n    } else {\n        if (subscriptions.contains(newSubscription)) {\n            throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                    + eventType);\n        }\n    }\n\n    int size = subscriptions.size();\n    // 按照subscriberMethod的优先级插入newSubscription到正确的位置\n    for (int i = 0; i <= size; i++) {\n        // 最后一个直接插入，或者是要插入的method优先级大于 i 位置 的优先级\n        if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n            subscriptions.add(i, newSubscription);\n            break;\n        }\n    }\n\n    // 存放订阅Method的事件类型\n    List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n    if (subscribedEvents == null) {\n        subscribedEvents = new ArrayList<>();\n        typesBySubscriber.put(subscriber, subscribedEvents);\n    }\n    subscribedEvents.add(eventType);\n\n    // 黏性事件\n    if (subscriberMethod.sticky) {\n        if (eventInheritance) {\n            // Existing sticky events of all subclasses of eventType have to be considered.\n            // Note: Iterating over all events may be inefficient with lots of sticky events,\n            // thus data structure should be changed to allow a more efficient lookup\n            // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).\n            Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n            for (Map.Entry<Class<?>, Object> entry : entries) {\n                Class<?> candidateEventType = entry.getKey();\n                if (eventType.isAssignableFrom(candidateEventType)) {\n                    Object stickyEvent = entry.getValue();\n                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                }\n            }\n        } else {\n            Object stickyEvent = stickyEvents.get(eventType);\n            checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n        }\n    }\n}\n```\n**方法说明**\n>\n* 首先获取了方法参数类型 ： `eventType`\n* 根据事件类型`eventType`，获取其所有订阅方法 ：`subscriptionsByEventType.get(eventType);`\n* subscriptions如果已经被初始化了，那么按照优先级将新的method插入其中，如果没有初始化，那么就`new CopyOnWriteArrayList<>();`\n* 获取订阅者所有的订阅事件类型 ： `typesBySubscriber.get(subscriber);`\n* 如果初始化了，那么就直接添加这个`eventType `到对应的集合中，如果没有那么初始化并将**`Subscriber`（还记得参数传入的就是这个吗）**作为key，**`eventType `集合**作为value\n\n\n**不太明白没关系，我们再接着往下看。。。**\n\n### 事件发布\n`EventBus.getDefault().post(new UpdateUIEvent());`\n\npost：\n\n```\n/** Posts the given event to the event bus. */\npublic void post(Object event) {\n    PostingThreadState postingState = currentPostingThreadState.get();\n    List<Object> eventQueue = postingState.eventQueue;\n    // 将事件添加进当前线程的事件队列\n    eventQueue.add(event);\n\t // 判断当前线程是否正在发布事件\n    if (!postingState.isPosting) {\n        postingState.isMainThread = isMainThread();\n        postingState.isPosting = true;\n        if (postingState.canceled) {\n            throw new EventBusException(\"Internal error. Abort state was not reset\");\n        }\n        try {\n            while (!eventQueue.isEmpty()) {\n                postSingleEvent(eventQueue.remove(0), postingState);\n            }\n        } finally {\n            postingState.isPosting = false;\n            postingState.isMainThread = false;\n        }\n    }\n}\n\n```\n\n首先`currentPostingThreadState`是一个`ThreadLocal<PostingThreadState>`\n\nThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，而这段数据是不会与其他线程共享的。可以看出currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象,这样可以保证取到的都是自己线程对应的数据。\n\n```\n/** For ThreadLocal, much faster to set (and get multiple values). */\nfinal static class PostingThreadState {\n    final List<Object> eventQueue = new ArrayList<>();//当前线程的事件队列\n    boolean isPosting; //是否有事件正在分发\n    boolean isMainThread;//post的线程是否是主线程\n    Subscription subscription;\n    Object event;\n    boolean canceled;\n}\n```\nPostingThreadState中包含了当前线程的事件队列，就是当前线程所有分发的事件都保存在eventQueue事件队列中以及订阅者订阅事件等信息，有了这些信息我们就可以从事件队列中取出事件分发给对应的订阅者。\n\n\n我们看到了把当前的事件加入到了事件队列尾部，如果事件队列不为empty，那么就一直发送里面的事件直到为empty。我们看一下关键代码`postSingleEvent(eventQueue.remove(0), postingState);`  \n\n```\nprivate void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n    Class<?> eventClass = event.getClass();\n    boolean subscriptionFound = false;\n    if (eventInheritance) {\n        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n        int countTypes = eventTypes.size();\n        for (int h = 0; h < countTypes; h++) {\n            Class<?> clazz = eventTypes.get(h);\n            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n        }\n    } else {\n        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n    }\n    if (!subscriptionFound) {\n        if (logNoSubscriberMessages) {\n            logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);\n        }\n        if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                eventClass != SubscriberExceptionEvent.class) {\n            post(new NoSubscriberEvent(this, event));\n        }\n    }\n}\n```\n首先判断的是`eventInheritance `是否开启了继承，由于EventBus创建的是默认的Builder，所以默认值为初始值true。那么会找到它所有的父类，然后依次发送事件。关键在于方法**`postSingleEventForEventType(event, postingState, eventClass);`**  \n\n```\nprivate boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {\n    CopyOnWriteArrayList<Subscription> subscriptions;\n    synchronized (this) {\n        // 根据事件类型找出相关的订阅信息\n        subscriptions = subscriptionsByEventType.get(eventClass);\n    }\n    if (subscriptions != null && !subscriptions.isEmpty()) {\n        for (Subscription subscription : subscriptions) {\n            postingState.event = event;\n            postingState.subscription = subscription;\n            boolean aborted = false;\n            try {\n                // 发布到具体的订阅者\n                postToSubscription(subscription, event, postingState.isMainThread);\n                aborted = postingState.canceled;\n            } finally {\n                postingState.event = null;\n                postingState.subscription = null;\n                postingState.canceled = false;\n            }\n            if (aborted) {\n                break;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n我们可以看到，如果根据事件类型找不到订阅方法，或者订阅方法为空，那么会返回false，上面抛出异常`No subscribers registered for event`。那如果找到了订阅的方法呢。\n\n```\nprivate void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n    switch (subscription.subscriberMethod.threadMode) {\n        // 订阅线程跟随发布线程\n        case POSTING:\n            // 订阅线程和发布线程相同，直接订阅\n            invokeSubscriber(subscription, event);\n            break;\n        // 订阅线程为主线程\n        case MAIN:\n            // 发布线程和订阅线程都是主线程，直接订阅\n            if (isMainThread) {\n                invokeSubscriber(subscription, event);\n            }\n            // 发布线程不是主线程，订阅线程切换到主线程订阅\n            else {\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            break;\n        case MAIN_ORDERED:\n            if (mainThreadPoster != null) {\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            else {\n                // temporary: technically not correct as poster not decoupled from subscriber\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        // 订阅线程为后台线程\n        case BACKGROUND:\n            // 发布线程为主线程，切换到后台线程订阅\n            if (isMainThread) {\n                backgroundPoster.enqueue(subscription, event);\n            }\n            // 发布线程不为主线程，直接订阅\n            else {\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        // 订阅线程为异步线程\n        case ASYNC:\n            // 使用线程池线程订阅\n            asyncPoster.enqueue(subscription, event);\n            break;\n        default:\n            throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n    }\n}\n```\n* POSTING：事件发布在什么线程，就在什么线程订阅。\n* MAIN：无论事件在什么线程发布，都在主线程订阅。\n* BACKGROUND：如果发布的线程不是主线程，则在该线程订阅，如果是主线程，则使用一个单独的后台线程订阅。\n* ASYNC：在非主线程和发布线程中订阅。\n\n我们知道了根据不同类型进行区分。那么关键是如何调用Subscribe方法的呢？\n`invokeSubscriber(subscription, event);`\n\n```\nvoid invokeSubscriber(Subscription subscription, Object event) {\n    try {\n        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n    } catch (InvocationTargetException e) {\n        handleSubscriberException(subscription, event, e.getCause());\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Unexpected exception\", e);\n    }\n}\n\n```\n这样订阅者收到了时间，调用了订阅方法。event参数也成功传入。\n\n### 反注册\n\n```\n/** Unregisters the given subscriber from all event classes. */\npublic synchronized void unregister(Object subscriber) {\n    List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n    if (subscribedTypes != null) {\n        for (Class<?> eventType : subscribedTypes) {\n            unsubscribeByEventType(subscriber, eventType);\n        }\n        typesBySubscriber.remove(subscriber);\n    } else {\n        logger.log(Level.WARNING, \"Subscriber to unregister was not registered before: \" + subscriber.getClass());\n    }\n}\n\n```\n\n我们在注册的时候知道 **`typesBySubscriber`**是一个存储订阅者，订阅事件的Map  \n`private final Map<Object, List<Class<?>>> typesBySubscriber;`。  \n先解绑list中的元素再讲Subscribe也从map中移除。我们看关键代码`unsubscribeByEventType(subscriber, eventType);` \n\n```\n/** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */\nprivate void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n    List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    if (subscriptions != null) {\n        int size = subscriptions.size();\n        for (int i = 0; i < size; i++) {\n            Subscription subscription = subscriptions.get(i);\n            if (subscription.subscriber == subscriber) {\n                subscription.active = false;\n                subscriptions.remove(i);\n                i--;\n                size--;\n            }\n        }\n    }\n}\n\n```\n\n多看几遍源码就OK了。 (●ﾟωﾟ●)，接下来尝试着自己写一个简版的EventBus  \n[观察者模式](https://o0o0oo00.github.io/2018/10/09/Observer/#more)\n\n参考链接：\n\n\n* https://juejin.im/post/5a3e19c26fb9a0452207b6b5\n* https://juejin.im/post/58f5c86a8d6d810057c12975","source":"_posts/eventbus.md","raw":"---\ntitle: Eventbus浅析\ndate: 2018-10-25 15:53:05\ntag: technology\ncategories: 技术\n---\n\n### 注册EventBus\n`EventBus.getDefault().register(this);`  \n\n我们来看看**`getDefault()`**中有什么\n\n```\n/** Convenience singleton for apps using a process-wide EventBus instance. */\npublic static EventBus getDefault() {\n    EventBus instance = defaultInstance;\n    if (instance == null) {\n        synchronized (EventBus.class) {\n            instance = EventBus.defaultInstance;\n            if (instance == null) {\n                instance = EventBus.defaultInstance = new EventBus();\n            }\n        }\n    }\n    return instance;\n}\n\n```\n很明显是一个**`DoubleCheck`**单例模式，具体的EventBus构造方法没贴，后面会介绍他其中的一些属性。\n  \n<!--more-->\n获取完了对象紧接着对当前activity或fragment进行了注册**register**\n\n```\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n    synchronized (this) {\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            subscribe(subscriber, subscriberMethod);\n        }\n    }\n}\n\n```\n\n我们可以看到，传入的`this`可以是Activity，进而得到了其class，通过**`findSubscriberMethods`**找到所有在这个class下的**Subscriber**们存放在一个List集合中，然后**逐个进行事件订阅**。\n\n关键方法 **findSubscriberMethods** \n\nsubscriberClass = 订阅类的class \n\n```\nList<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n    List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n    if (subscriberMethods != null) {\n        return subscriberMethods;\n    }\n\t //是否忽略注解器生成的MyEventBusIndex类 默认false\n    if (ignoreGeneratedIndex) {\n        subscriberMethods = findUsingReflection(subscriberClass);\n    } else {\n        subscriberMethods = findUsingInfo(subscriberClass);\n    }\n    if (subscriberMethods.isEmpty()) {\n        throw new EventBusException(\"Subscriber \" + subscriberClass\n                + \" and its super classes have no public methods with the @Subscribe annotation\");\n    } else {\n        METHOD_CACHE.put(subscriberClass, subscriberMethods);\n        return subscriberMethods;\n    }\n}\n```\n其中第一行的`METHOD_CACHE`作为缓存Map，以订阅类的class为key，订阅的方法集合作为value。\n`private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();` \n\n如果没有缓存的时候，会判断是否**忽略生成index**，默认是false，那么我们来看一下`findUsingInfo(subscriberClass);`这个真正去查找该class下订阅方法的方法。\n\n先看一下FindState是什么东西。他里面存储了一些订阅者和订阅方法信息\n\n```\nstatic class FindState {\n\t//订阅方法集合，\n    final List<SubscriberMethod> subscriberMethods = new ArrayList<>();\n    //以event为key，以method为value\n    final Map<Class, Object> anyMethodByEventType = new HashMap<>();\n    //以method的名字生成一个methodKey为key，该method的类(订阅者)为value\n    final Map<String, Class> subscriberClassByMethodKey = new HashMap<>();\n    final StringBuilder methodKeyBuilder = new StringBuilder(128);\n\n    Class<?> subscriberClass;\n    Class<?> clazz;\n    boolean skipSuperClasses;\n    SubscriberInfo subscriberInfo;\n\n```\n这个方法返回的是我们最终需要的`List<SubscriberMethod>`\n\n```\nprivate List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n    FindState findState = prepareFindState();\n    // 利用findState辅助来获取订阅方法\n    findState.initForSubscriber(subscriberClass);\n    while (findState.clazz != null) {\n        // 获取class对应的subscriberInfo\n        findState.subscriberInfo = getSubscriberInfo(findState);\n        if (findState.subscriberInfo != null) {\n            // 获取订阅方法数组\n            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n            for (SubscriberMethod subscriberMethod : array) {\n                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                    findState.subscriberMethods.add(subscriberMethod);\n                }\n            }\n        } else {\n            // subscriberInfo为null 则通过反射获取\n            findUsingReflectionInSingleClass(findState);\n        }\n        //接着获取父类的订阅方法\n        findState.moveToSuperclass();\n    }\n    return getMethodsAndRelease(findState);\n}\n```\n\n\n### 方法订阅（注册方法）\n\n其实上面这些就是为了获取到当前class 的所有订阅方法。然后遍历这些个订阅方法来完成订阅。接下来看一下**逐个订阅**  \n\n```\nfor (SubscriberMethod subscriberMethod : subscriberMethods) {\n    subscribe(subscriber, subscriberMethod);\n}\n```\n首先**映入眼帘**的是两个参数，一个**订阅Class**一个是订阅类中的要**订阅的方法**。\n\n上面把要订阅的方法封装成了`SubscriberMethod `。并且这个有一个事件类型（订阅方法的参数）`eventType`需要使用\n\n```\npublic class SubscriberMethod {\n    final Method method;\n    final ThreadMode threadMode;\n    final Class<?> eventType;\n    final int priority;\n    final boolean sticky;\n    /** Used for efficient comparison */\n    String methodString;\n\n```\n看订阅方法\n\n```\n// Must be called in synchronized block\nprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n    \n\t//订阅方法的参数类型，也是事件类型\n\tClass<?> eventType = subscriberMethod.eventType;\n    // 封装订阅者和订阅方法\n    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n    // 根据事件类型key，获取subscriptions （Map<Class<?>, CopyOnWriteArrayList<Subscription>>） \n    CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    // 如果subscriptions集合为空，说明该事件类型没有注册，则创建一个新的集合。并把事件类型`eventType`作为key 和订阅方法集合作为value加入其中\n    if (subscriptions == null) {\n        subscriptions = new CopyOnWriteArrayList<>();\n        subscriptionsByEventType.put(eventType, subscriptions);\n    } else {\n        if (subscriptions.contains(newSubscription)) {\n            throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                    + eventType);\n        }\n    }\n\n    int size = subscriptions.size();\n    // 按照subscriberMethod的优先级插入newSubscription到正确的位置\n    for (int i = 0; i <= size; i++) {\n        // 最后一个直接插入，或者是要插入的method优先级大于 i 位置 的优先级\n        if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n            subscriptions.add(i, newSubscription);\n            break;\n        }\n    }\n\n    // 存放订阅Method的事件类型\n    List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n    if (subscribedEvents == null) {\n        subscribedEvents = new ArrayList<>();\n        typesBySubscriber.put(subscriber, subscribedEvents);\n    }\n    subscribedEvents.add(eventType);\n\n    // 黏性事件\n    if (subscriberMethod.sticky) {\n        if (eventInheritance) {\n            // Existing sticky events of all subclasses of eventType have to be considered.\n            // Note: Iterating over all events may be inefficient with lots of sticky events,\n            // thus data structure should be changed to allow a more efficient lookup\n            // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).\n            Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n            for (Map.Entry<Class<?>, Object> entry : entries) {\n                Class<?> candidateEventType = entry.getKey();\n                if (eventType.isAssignableFrom(candidateEventType)) {\n                    Object stickyEvent = entry.getValue();\n                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                }\n            }\n        } else {\n            Object stickyEvent = stickyEvents.get(eventType);\n            checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n        }\n    }\n}\n```\n**方法说明**\n>\n* 首先获取了方法参数类型 ： `eventType`\n* 根据事件类型`eventType`，获取其所有订阅方法 ：`subscriptionsByEventType.get(eventType);`\n* subscriptions如果已经被初始化了，那么按照优先级将新的method插入其中，如果没有初始化，那么就`new CopyOnWriteArrayList<>();`\n* 获取订阅者所有的订阅事件类型 ： `typesBySubscriber.get(subscriber);`\n* 如果初始化了，那么就直接添加这个`eventType `到对应的集合中，如果没有那么初始化并将**`Subscriber`（还记得参数传入的就是这个吗）**作为key，**`eventType `集合**作为value\n\n\n**不太明白没关系，我们再接着往下看。。。**\n\n### 事件发布\n`EventBus.getDefault().post(new UpdateUIEvent());`\n\npost：\n\n```\n/** Posts the given event to the event bus. */\npublic void post(Object event) {\n    PostingThreadState postingState = currentPostingThreadState.get();\n    List<Object> eventQueue = postingState.eventQueue;\n    // 将事件添加进当前线程的事件队列\n    eventQueue.add(event);\n\t // 判断当前线程是否正在发布事件\n    if (!postingState.isPosting) {\n        postingState.isMainThread = isMainThread();\n        postingState.isPosting = true;\n        if (postingState.canceled) {\n            throw new EventBusException(\"Internal error. Abort state was not reset\");\n        }\n        try {\n            while (!eventQueue.isEmpty()) {\n                postSingleEvent(eventQueue.remove(0), postingState);\n            }\n        } finally {\n            postingState.isPosting = false;\n            postingState.isMainThread = false;\n        }\n    }\n}\n\n```\n\n首先`currentPostingThreadState`是一个`ThreadLocal<PostingThreadState>`\n\nThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，而这段数据是不会与其他线程共享的。可以看出currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象,这样可以保证取到的都是自己线程对应的数据。\n\n```\n/** For ThreadLocal, much faster to set (and get multiple values). */\nfinal static class PostingThreadState {\n    final List<Object> eventQueue = new ArrayList<>();//当前线程的事件队列\n    boolean isPosting; //是否有事件正在分发\n    boolean isMainThread;//post的线程是否是主线程\n    Subscription subscription;\n    Object event;\n    boolean canceled;\n}\n```\nPostingThreadState中包含了当前线程的事件队列，就是当前线程所有分发的事件都保存在eventQueue事件队列中以及订阅者订阅事件等信息，有了这些信息我们就可以从事件队列中取出事件分发给对应的订阅者。\n\n\n我们看到了把当前的事件加入到了事件队列尾部，如果事件队列不为empty，那么就一直发送里面的事件直到为empty。我们看一下关键代码`postSingleEvent(eventQueue.remove(0), postingState);`  \n\n```\nprivate void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n    Class<?> eventClass = event.getClass();\n    boolean subscriptionFound = false;\n    if (eventInheritance) {\n        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n        int countTypes = eventTypes.size();\n        for (int h = 0; h < countTypes; h++) {\n            Class<?> clazz = eventTypes.get(h);\n            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n        }\n    } else {\n        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n    }\n    if (!subscriptionFound) {\n        if (logNoSubscriberMessages) {\n            logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);\n        }\n        if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                eventClass != SubscriberExceptionEvent.class) {\n            post(new NoSubscriberEvent(this, event));\n        }\n    }\n}\n```\n首先判断的是`eventInheritance `是否开启了继承，由于EventBus创建的是默认的Builder，所以默认值为初始值true。那么会找到它所有的父类，然后依次发送事件。关键在于方法**`postSingleEventForEventType(event, postingState, eventClass);`**  \n\n```\nprivate boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {\n    CopyOnWriteArrayList<Subscription> subscriptions;\n    synchronized (this) {\n        // 根据事件类型找出相关的订阅信息\n        subscriptions = subscriptionsByEventType.get(eventClass);\n    }\n    if (subscriptions != null && !subscriptions.isEmpty()) {\n        for (Subscription subscription : subscriptions) {\n            postingState.event = event;\n            postingState.subscription = subscription;\n            boolean aborted = false;\n            try {\n                // 发布到具体的订阅者\n                postToSubscription(subscription, event, postingState.isMainThread);\n                aborted = postingState.canceled;\n            } finally {\n                postingState.event = null;\n                postingState.subscription = null;\n                postingState.canceled = false;\n            }\n            if (aborted) {\n                break;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n我们可以看到，如果根据事件类型找不到订阅方法，或者订阅方法为空，那么会返回false，上面抛出异常`No subscribers registered for event`。那如果找到了订阅的方法呢。\n\n```\nprivate void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n    switch (subscription.subscriberMethod.threadMode) {\n        // 订阅线程跟随发布线程\n        case POSTING:\n            // 订阅线程和发布线程相同，直接订阅\n            invokeSubscriber(subscription, event);\n            break;\n        // 订阅线程为主线程\n        case MAIN:\n            // 发布线程和订阅线程都是主线程，直接订阅\n            if (isMainThread) {\n                invokeSubscriber(subscription, event);\n            }\n            // 发布线程不是主线程，订阅线程切换到主线程订阅\n            else {\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            break;\n        case MAIN_ORDERED:\n            if (mainThreadPoster != null) {\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            else {\n                // temporary: technically not correct as poster not decoupled from subscriber\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        // 订阅线程为后台线程\n        case BACKGROUND:\n            // 发布线程为主线程，切换到后台线程订阅\n            if (isMainThread) {\n                backgroundPoster.enqueue(subscription, event);\n            }\n            // 发布线程不为主线程，直接订阅\n            else {\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        // 订阅线程为异步线程\n        case ASYNC:\n            // 使用线程池线程订阅\n            asyncPoster.enqueue(subscription, event);\n            break;\n        default:\n            throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n    }\n}\n```\n* POSTING：事件发布在什么线程，就在什么线程订阅。\n* MAIN：无论事件在什么线程发布，都在主线程订阅。\n* BACKGROUND：如果发布的线程不是主线程，则在该线程订阅，如果是主线程，则使用一个单独的后台线程订阅。\n* ASYNC：在非主线程和发布线程中订阅。\n\n我们知道了根据不同类型进行区分。那么关键是如何调用Subscribe方法的呢？\n`invokeSubscriber(subscription, event);`\n\n```\nvoid invokeSubscriber(Subscription subscription, Object event) {\n    try {\n        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n    } catch (InvocationTargetException e) {\n        handleSubscriberException(subscription, event, e.getCause());\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Unexpected exception\", e);\n    }\n}\n\n```\n这样订阅者收到了时间，调用了订阅方法。event参数也成功传入。\n\n### 反注册\n\n```\n/** Unregisters the given subscriber from all event classes. */\npublic synchronized void unregister(Object subscriber) {\n    List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n    if (subscribedTypes != null) {\n        for (Class<?> eventType : subscribedTypes) {\n            unsubscribeByEventType(subscriber, eventType);\n        }\n        typesBySubscriber.remove(subscriber);\n    } else {\n        logger.log(Level.WARNING, \"Subscriber to unregister was not registered before: \" + subscriber.getClass());\n    }\n}\n\n```\n\n我们在注册的时候知道 **`typesBySubscriber`**是一个存储订阅者，订阅事件的Map  \n`private final Map<Object, List<Class<?>>> typesBySubscriber;`。  \n先解绑list中的元素再讲Subscribe也从map中移除。我们看关键代码`unsubscribeByEventType(subscriber, eventType);` \n\n```\n/** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */\nprivate void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n    List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    if (subscriptions != null) {\n        int size = subscriptions.size();\n        for (int i = 0; i < size; i++) {\n            Subscription subscription = subscriptions.get(i);\n            if (subscription.subscriber == subscriber) {\n                subscription.active = false;\n                subscriptions.remove(i);\n                i--;\n                size--;\n            }\n        }\n    }\n}\n\n```\n\n多看几遍源码就OK了。 (●ﾟωﾟ●)，接下来尝试着自己写一个简版的EventBus  \n[观察者模式](https://o0o0oo00.github.io/2018/10/09/Observer/#more)\n\n参考链接：\n\n\n* https://juejin.im/post/5a3e19c26fb9a0452207b6b5\n* https://juejin.im/post/58f5c86a8d6d810057c12975","slug":"eventbus","published":1,"updated":"2018-10-25T10:30:44.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqnkydto001gor2626divgzv","content":"<h3 id=\"注册EventBus\"><a href=\"#注册EventBus\" class=\"headerlink\" title=\"注册EventBus\"></a>注册EventBus</h3><p><code>EventBus.getDefault().register(this);</code>  </p>\n<p>我们来看看<strong><code>getDefault()</code></strong>中有什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Convenience singleton for apps using a process-wide EventBus instance. */</span><br><span class=\"line\">public static EventBus getDefault() &#123;</span><br><span class=\"line\">    EventBus instance = defaultInstance;</span><br><span class=\"line\">    if (instance == null) &#123;</span><br><span class=\"line\">        synchronized (EventBus.class) &#123;</span><br><span class=\"line\">            instance = EventBus.defaultInstance;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = EventBus.defaultInstance = new EventBus();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显是一个<strong><code>DoubleCheck</code></strong>单例模式，具体的EventBus构造方法没贴，后面会介绍他其中的一些属性。</p>\n<a id=\"more\"></a>\n<p>获取完了对象紧接着对当前activity或fragment进行了注册<strong>register</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void register(Object subscriber) &#123;</span><br><span class=\"line\">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class=\"line\">    synchronized (this) &#123;</span><br><span class=\"line\">        for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class=\"line\">            subscribe(subscriber, subscriberMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，传入的<code>this</code>可以是Activity，进而得到了其class，通过<strong><code>findSubscriberMethods</code></strong>找到所有在这个class下的<strong>Subscriber</strong>们存放在一个List集合中，然后<strong>逐个进行事件订阅</strong>。</p>\n<p>关键方法 <strong>findSubscriberMethods</strong> </p>\n<p>subscriberClass = 订阅类的class </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) &#123;</span><br><span class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class=\"line\">    if (subscriberMethods != null) &#123;</span><br><span class=\"line\">        return subscriberMethods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t //是否忽略注解器生成的MyEventBusIndex类 默认false</span><br><span class=\"line\">    if (ignoreGeneratedIndex) &#123;</span><br><span class=\"line\">        subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (subscriberMethods.isEmpty()) &#123;</span><br><span class=\"line\">        throw new EventBusException(&quot;Subscriber &quot; + subscriberClass</span><br><span class=\"line\">                + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class=\"line\">        return subscriberMethods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第一行的<code>METHOD_CACHE</code>作为缓存Map，以订阅类的class为key，订阅的方法集合作为value。<br><code>private static final Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = new ConcurrentHashMap&lt;&gt;();</code> </p>\n<p>如果没有缓存的时候，会判断是否<strong>忽略生成index</strong>，默认是false，那么我们来看一下<code>findUsingInfo(subscriberClass);</code>这个真正去查找该class下订阅方法的方法。</p>\n<p>先看一下FindState是什么东西。他里面存储了一些订阅者和订阅方法信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class FindState &#123;</span><br><span class=\"line\">\t//订阅方法集合，</span><br><span class=\"line\">    final List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    //以event为key，以method为value</span><br><span class=\"line\">    final Map&lt;Class, Object&gt; anyMethodByEventType = new HashMap&lt;&gt;();</span><br><span class=\"line\">    //以method的名字生成一个methodKey为key，该method的类(订阅者)为value</span><br><span class=\"line\">    final Map&lt;String, Class&gt; subscriberClassByMethodKey = new HashMap&lt;&gt;();</span><br><span class=\"line\">    final StringBuilder methodKeyBuilder = new StringBuilder(128);</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; subscriberClass;</span><br><span class=\"line\">    Class&lt;?&gt; clazz;</span><br><span class=\"line\">    boolean skipSuperClasses;</span><br><span class=\"line\">    SubscriberInfo subscriberInfo;</span><br></pre></td></tr></table></figure>\n<p>这个方法返回的是我们最终需要的<code>List&lt;SubscriberMethod&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) &#123;</span><br><span class=\"line\">    FindState findState = prepareFindState();</span><br><span class=\"line\">    // 利用findState辅助来获取订阅方法</span><br><span class=\"line\">    findState.initForSubscriber(subscriberClass);</span><br><span class=\"line\">    while (findState.clazz != null) &#123;</span><br><span class=\"line\">        // 获取class对应的subscriberInfo</span><br><span class=\"line\">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class=\"line\">        if (findState.subscriberInfo != null) &#123;</span><br><span class=\"line\">            // 获取订阅方法数组</span><br><span class=\"line\">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class=\"line\">            for (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class=\"line\">                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class=\"line\">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // subscriberInfo为null 则通过反射获取</span><br><span class=\"line\">            findUsingReflectionInSingleClass(findState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //接着获取父类的订阅方法</span><br><span class=\"line\">        findState.moveToSuperclass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return getMethodsAndRelease(findState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法订阅（注册方法）\"><a href=\"#方法订阅（注册方法）\" class=\"headerlink\" title=\"方法订阅（注册方法）\"></a>方法订阅（注册方法）</h3><p>其实上面这些就是为了获取到当前class 的所有订阅方法。然后遍历这些个订阅方法来完成订阅。接下来看一下<strong>逐个订阅</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class=\"line\">    subscribe(subscriber, subscriberMethod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先<strong>映入眼帘</strong>的是两个参数，一个<strong>订阅Class</strong>一个是订阅类中的要<strong>订阅的方法</strong>。</p>\n<p>上面把要订阅的方法封装成了<code>SubscriberMethod</code>。并且这个有一个事件类型（订阅方法的参数）<code>eventType</code>需要使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SubscriberMethod &#123;</span><br><span class=\"line\">    final Method method;</span><br><span class=\"line\">    final ThreadMode threadMode;</span><br><span class=\"line\">    final Class&lt;?&gt; eventType;</span><br><span class=\"line\">    final int priority;</span><br><span class=\"line\">    final boolean sticky;</span><br><span class=\"line\">    /** Used for efficient comparison */</span><br><span class=\"line\">    String methodString;</span><br></pre></td></tr></table></figure>\n<p>看订阅方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Must be called in synchronized block</span><br><span class=\"line\">private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t//订阅方法的参数类型，也是事件类型</span><br><span class=\"line\">\tClass&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class=\"line\">    // 封装订阅者和订阅方法</span><br><span class=\"line\">    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);</span><br><span class=\"line\">    // 根据事件类型key，获取subscriptions （Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt;） </span><br><span class=\"line\">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class=\"line\">    // 如果subscriptions集合为空，说明该事件类型没有注册，则创建一个新的集合。并把事件类型`eventType`作为key 和订阅方法集合作为value加入其中</span><br><span class=\"line\">    if (subscriptions == null) &#123;</span><br><span class=\"line\">        subscriptions = new CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        if (subscriptions.contains(newSubscription)) &#123;</span><br><span class=\"line\">            throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot;</span><br><span class=\"line\">                    + eventType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int size = subscriptions.size();</span><br><span class=\"line\">    // 按照subscriberMethod的优先级插入newSubscription到正确的位置</span><br><span class=\"line\">    for (int i = 0; i &lt;= size; i++) &#123;</span><br><span class=\"line\">        // 最后一个直接插入，或者是要插入的method优先级大于 i 位置 的优先级</span><br><span class=\"line\">        if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class=\"line\">            subscriptions.add(i, newSubscription);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 存放订阅Method的事件类型</span><br><span class=\"line\">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class=\"line\">    if (subscribedEvents == null) &#123;</span><br><span class=\"line\">        subscribedEvents = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subscribedEvents.add(eventType);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 黏性事件</span><br><span class=\"line\">    if (subscriberMethod.sticky) &#123;</span><br><span class=\"line\">        if (eventInheritance) &#123;</span><br><span class=\"line\">            // Existing sticky events of all subclasses of eventType have to be considered.</span><br><span class=\"line\">            // Note: Iterating over all events may be inefficient with lots of sticky events,</span><br><span class=\"line\">            // thus data structure should be changed to allow a more efficient lookup</span><br><span class=\"line\">            // (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span><br><span class=\"line\">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class=\"line\">            for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class=\"line\">                if (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class=\"line\">                    Object stickyEvent = entry.getValue();</span><br><span class=\"line\">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class=\"line\">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方法说明</strong></p>\n<blockquote>\n</blockquote>\n<ul>\n<li>首先获取了方法参数类型 ： <code>eventType</code></li>\n<li>根据事件类型<code>eventType</code>，获取其所有订阅方法 ：<code>subscriptionsByEventType.get(eventType);</code></li>\n<li>subscriptions如果已经被初始化了，那么按照优先级将新的method插入其中，如果没有初始化，那么就<code>new CopyOnWriteArrayList&lt;&gt;();</code></li>\n<li>获取订阅者所有的订阅事件类型 ： <code>typesBySubscriber.get(subscriber);</code></li>\n<li>如果初始化了，那么就直接添加这个<code>eventType</code>到对应的集合中，如果没有那么初始化并将<strong><code>Subscriber</code>（还记得参数传入的就是这个吗）</strong>作为key，<strong><code>eventType</code>集合</strong>作为value</li>\n</ul>\n<p><strong>不太明白没关系，我们再接着往下看。。。</strong></p>\n<h3 id=\"事件发布\"><a href=\"#事件发布\" class=\"headerlink\" title=\"事件发布\"></a>事件发布</h3><p><code>EventBus.getDefault().post(new UpdateUIEvent());</code></p>\n<p>post：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Posts the given event to the event bus. */</span><br><span class=\"line\">public void post(Object event) &#123;</span><br><span class=\"line\">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class=\"line\">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class=\"line\">    // 将事件添加进当前线程的事件队列</span><br><span class=\"line\">    eventQueue.add(event);</span><br><span class=\"line\">\t // 判断当前线程是否正在发布事件</span><br><span class=\"line\">    if (!postingState.isPosting) &#123;</span><br><span class=\"line\">        postingState.isMainThread = isMainThread();</span><br><span class=\"line\">        postingState.isPosting = true;</span><br><span class=\"line\">        if (postingState.canceled) &#123;</span><br><span class=\"line\">            throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (!eventQueue.isEmpty()) &#123;</span><br><span class=\"line\">                postSingleEvent(eventQueue.remove(0), postingState);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            postingState.isPosting = false;</span><br><span class=\"line\">            postingState.isMainThread = false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先<code>currentPostingThreadState</code>是一个<code>ThreadLocal&lt;PostingThreadState&gt;</code></p>\n<p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，而这段数据是不会与其他线程共享的。可以看出currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象,这样可以保证取到的都是自己线程对应的数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** For ThreadLocal, much faster to set (and get multiple values). */</span><br><span class=\"line\">final static class PostingThreadState &#123;</span><br><span class=\"line\">    final List&lt;Object&gt; eventQueue = new ArrayList&lt;&gt;();//当前线程的事件队列</span><br><span class=\"line\">    boolean isPosting; //是否有事件正在分发</span><br><span class=\"line\">    boolean isMainThread;//post的线程是否是主线程</span><br><span class=\"line\">    Subscription subscription;</span><br><span class=\"line\">    Object event;</span><br><span class=\"line\">    boolean canceled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PostingThreadState中包含了当前线程的事件队列，就是当前线程所有分发的事件都保存在eventQueue事件队列中以及订阅者订阅事件等信息，有了这些信息我们就可以从事件队列中取出事件分发给对应的订阅者。</p>\n<p>我们看到了把当前的事件加入到了事件队列尾部，如果事件队列不为empty，那么就一直发送里面的事件直到为empty。我们看一下关键代码<code>postSingleEvent(eventQueue.remove(0), postingState);</code>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123;</span><br><span class=\"line\">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class=\"line\">    boolean subscriptionFound = false;</span><br><span class=\"line\">    if (eventInheritance) &#123;</span><br><span class=\"line\">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class=\"line\">        int countTypes = eventTypes.size();</span><br><span class=\"line\">        for (int h = 0; h &lt; countTypes; h++) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class=\"line\">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!subscriptionFound) &#123;</span><br><span class=\"line\">        if (logNoSubscriberMessages) &#123;</span><br><span class=\"line\">            logger.log(Level.FINE, &quot;No subscribers registered for event &quot; + eventClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class=\"line\">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class=\"line\">            post(new NoSubscriberEvent(this, event));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先判断的是<code>eventInheritance</code>是否开启了继承，由于EventBus创建的是默认的Builder，所以默认值为初始值true。那么会找到它所有的父类，然后依次发送事件。关键在于方法<strong><code>postSingleEventForEventType(event, postingState, eventClass);</code></strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) &#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class=\"line\">    synchronized (this) &#123;</span><br><span class=\"line\">        // 根据事件类型找出相关的订阅信息</span><br><span class=\"line\">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class=\"line\">        for (Subscription subscription : subscriptions) &#123;</span><br><span class=\"line\">            postingState.event = event;</span><br><span class=\"line\">            postingState.subscription = subscription;</span><br><span class=\"line\">            boolean aborted = false;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 发布到具体的订阅者</span><br><span class=\"line\">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class=\"line\">                aborted = postingState.canceled;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                postingState.event = null;</span><br><span class=\"line\">                postingState.subscription = null;</span><br><span class=\"line\">                postingState.canceled = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (aborted) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，如果根据事件类型找不到订阅方法，或者订阅方法为空，那么会返回false，上面抛出异常<code>No subscribers registered for event</code>。那如果找到了订阅的方法呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123;</span><br><span class=\"line\">    switch (subscription.subscriberMethod.threadMode) &#123;</span><br><span class=\"line\">        // 订阅线程跟随发布线程</span><br><span class=\"line\">        case POSTING:</span><br><span class=\"line\">            // 订阅线程和发布线程相同，直接订阅</span><br><span class=\"line\">            invokeSubscriber(subscription, event);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为主线程</span><br><span class=\"line\">        case MAIN:</span><br><span class=\"line\">            // 发布线程和订阅线程都是主线程，直接订阅</span><br><span class=\"line\">            if (isMainThread) &#123;</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 发布线程不是主线程，订阅线程切换到主线程订阅</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                mainThreadPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case MAIN_ORDERED:</span><br><span class=\"line\">            if (mainThreadPoster != null) &#123;</span><br><span class=\"line\">                mainThreadPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                // temporary: technically not correct as poster not decoupled from subscriber</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为后台线程</span><br><span class=\"line\">        case BACKGROUND:</span><br><span class=\"line\">            // 发布线程为主线程，切换到后台线程订阅</span><br><span class=\"line\">            if (isMainThread) &#123;</span><br><span class=\"line\">                backgroundPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 发布线程不为主线程，直接订阅</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为异步线程</span><br><span class=\"line\">        case ASYNC:</span><br><span class=\"line\">            // 使用线程池线程订阅</span><br><span class=\"line\">            asyncPoster.enqueue(subscription, event);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>POSTING：事件发布在什么线程，就在什么线程订阅。</li>\n<li>MAIN：无论事件在什么线程发布，都在主线程订阅。</li>\n<li>BACKGROUND：如果发布的线程不是主线程，则在该线程订阅，如果是主线程，则使用一个单独的后台线程订阅。</li>\n<li>ASYNC：在非主线程和发布线程中订阅。</li>\n</ul>\n<p>我们知道了根据不同类型进行区分。那么关键是如何调用Subscribe方法的呢？<br><code>invokeSubscriber(subscription, event);</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void invokeSubscriber(Subscription subscription, Object event) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class=\"line\">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">        handleSubscriberException(subscription, event, e.getCause());</span><br><span class=\"line\">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">        throw new IllegalStateException(&quot;Unexpected exception&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样订阅者收到了时间，调用了订阅方法。event参数也成功传入。</p>\n<h3 id=\"反注册\"><a href=\"#反注册\" class=\"headerlink\" title=\"反注册\"></a>反注册</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Unregisters the given subscriber from all event classes. */</span><br><span class=\"line\">public synchronized void unregister(Object subscriber) &#123;</span><br><span class=\"line\">    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class=\"line\">    if (subscribedTypes != null) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class=\"line\">            unsubscribeByEventType(subscriber, eventType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        typesBySubscriber.remove(subscriber);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        logger.log(Level.WARNING, &quot;Subscriber to unregister was not registered before: &quot; + subscriber.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在注册的时候知道 <strong><code>typesBySubscriber</code></strong>是一个存储订阅者，订阅事件的Map<br><code>private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</code>。<br>先解绑list中的元素再讲Subscribe也从map中移除。我们看关键代码<code>unsubscribeByEventType(subscriber, eventType);</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */</span><br><span class=\"line\">private void unsubscribeByEventType(Object subscriber, Class&lt;?&gt; eventType) &#123;</span><br><span class=\"line\">    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class=\"line\">    if (subscriptions != null) &#123;</span><br><span class=\"line\">        int size = subscriptions.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            Subscription subscription = subscriptions.get(i);</span><br><span class=\"line\">            if (subscription.subscriber == subscriber) &#123;</span><br><span class=\"line\">                subscription.active = false;</span><br><span class=\"line\">                subscriptions.remove(i);</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多看几遍源码就OK了。 (●ﾟωﾟ●)，接下来尝试着自己写一个简版的EventBus<br><a href=\"https://o0o0oo00.github.io/2018/10/09/Observer/#more\">观察者模式</a></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5a3e19c26fb9a0452207b6b5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a3e19c26fb9a0452207b6b5</a></li>\n<li><a href=\"https://juejin.im/post/58f5c86a8d6d810057c12975\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58f5c86a8d6d810057c12975</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"注册EventBus\"><a href=\"#注册EventBus\" class=\"headerlink\" title=\"注册EventBus\"></a>注册EventBus</h3><p><code>EventBus.getDefault().register(this);</code>  </p>\n<p>我们来看看<strong><code>getDefault()</code></strong>中有什么</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Convenience singleton for apps using a process-wide EventBus instance. */</span><br><span class=\"line\">public static EventBus getDefault() &#123;</span><br><span class=\"line\">    EventBus instance = defaultInstance;</span><br><span class=\"line\">    if (instance == null) &#123;</span><br><span class=\"line\">        synchronized (EventBus.class) &#123;</span><br><span class=\"line\">            instance = EventBus.defaultInstance;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = EventBus.defaultInstance = new EventBus();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显是一个<strong><code>DoubleCheck</code></strong>单例模式，具体的EventBus构造方法没贴，后面会介绍他其中的一些属性。</p>","more":"<p>获取完了对象紧接着对当前activity或fragment进行了注册<strong>register</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void register(Object subscriber) &#123;</span><br><span class=\"line\">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class=\"line\">    synchronized (this) &#123;</span><br><span class=\"line\">        for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class=\"line\">            subscribe(subscriber, subscriberMethod);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，传入的<code>this</code>可以是Activity，进而得到了其class，通过<strong><code>findSubscriberMethods</code></strong>找到所有在这个class下的<strong>Subscriber</strong>们存放在一个List集合中，然后<strong>逐个进行事件订阅</strong>。</p>\n<p>关键方法 <strong>findSubscriberMethods</strong> </p>\n<p>subscriberClass = 订阅类的class </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) &#123;</span><br><span class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class=\"line\">    if (subscriberMethods != null) &#123;</span><br><span class=\"line\">        return subscriberMethods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t //是否忽略注解器生成的MyEventBusIndex类 默认false</span><br><span class=\"line\">    if (ignoreGeneratedIndex) &#123;</span><br><span class=\"line\">        subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (subscriberMethods.isEmpty()) &#123;</span><br><span class=\"line\">        throw new EventBusException(&quot;Subscriber &quot; + subscriberClass</span><br><span class=\"line\">                + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class=\"line\">        return subscriberMethods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中第一行的<code>METHOD_CACHE</code>作为缓存Map，以订阅类的class为key，订阅的方法集合作为value。<br><code>private static final Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = new ConcurrentHashMap&lt;&gt;();</code> </p>\n<p>如果没有缓存的时候，会判断是否<strong>忽略生成index</strong>，默认是false，那么我们来看一下<code>findUsingInfo(subscriberClass);</code>这个真正去查找该class下订阅方法的方法。</p>\n<p>先看一下FindState是什么东西。他里面存储了一些订阅者和订阅方法信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class FindState &#123;</span><br><span class=\"line\">\t//订阅方法集合，</span><br><span class=\"line\">    final List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    //以event为key，以method为value</span><br><span class=\"line\">    final Map&lt;Class, Object&gt; anyMethodByEventType = new HashMap&lt;&gt;();</span><br><span class=\"line\">    //以method的名字生成一个methodKey为key，该method的类(订阅者)为value</span><br><span class=\"line\">    final Map&lt;String, Class&gt; subscriberClassByMethodKey = new HashMap&lt;&gt;();</span><br><span class=\"line\">    final StringBuilder methodKeyBuilder = new StringBuilder(128);</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; subscriberClass;</span><br><span class=\"line\">    Class&lt;?&gt; clazz;</span><br><span class=\"line\">    boolean skipSuperClasses;</span><br><span class=\"line\">    SubscriberInfo subscriberInfo;</span><br></pre></td></tr></table></figure>\n<p>这个方法返回的是我们最终需要的<code>List&lt;SubscriberMethod&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) &#123;</span><br><span class=\"line\">    FindState findState = prepareFindState();</span><br><span class=\"line\">    // 利用findState辅助来获取订阅方法</span><br><span class=\"line\">    findState.initForSubscriber(subscriberClass);</span><br><span class=\"line\">    while (findState.clazz != null) &#123;</span><br><span class=\"line\">        // 获取class对应的subscriberInfo</span><br><span class=\"line\">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class=\"line\">        if (findState.subscriberInfo != null) &#123;</span><br><span class=\"line\">            // 获取订阅方法数组</span><br><span class=\"line\">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class=\"line\">            for (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class=\"line\">                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class=\"line\">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // subscriberInfo为null 则通过反射获取</span><br><span class=\"line\">            findUsingReflectionInSingleClass(findState);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //接着获取父类的订阅方法</span><br><span class=\"line\">        findState.moveToSuperclass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return getMethodsAndRelease(findState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法订阅（注册方法）\"><a href=\"#方法订阅（注册方法）\" class=\"headerlink\" title=\"方法订阅（注册方法）\"></a>方法订阅（注册方法）</h3><p>其实上面这些就是为了获取到当前class 的所有订阅方法。然后遍历这些个订阅方法来完成订阅。接下来看一下<strong>逐个订阅</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class=\"line\">    subscribe(subscriber, subscriberMethod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先<strong>映入眼帘</strong>的是两个参数，一个<strong>订阅Class</strong>一个是订阅类中的要<strong>订阅的方法</strong>。</p>\n<p>上面把要订阅的方法封装成了<code>SubscriberMethod</code>。并且这个有一个事件类型（订阅方法的参数）<code>eventType</code>需要使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SubscriberMethod &#123;</span><br><span class=\"line\">    final Method method;</span><br><span class=\"line\">    final ThreadMode threadMode;</span><br><span class=\"line\">    final Class&lt;?&gt; eventType;</span><br><span class=\"line\">    final int priority;</span><br><span class=\"line\">    final boolean sticky;</span><br><span class=\"line\">    /** Used for efficient comparison */</span><br><span class=\"line\">    String methodString;</span><br></pre></td></tr></table></figure>\n<p>看订阅方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Must be called in synchronized block</span><br><span class=\"line\">private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t//订阅方法的参数类型，也是事件类型</span><br><span class=\"line\">\tClass&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class=\"line\">    // 封装订阅者和订阅方法</span><br><span class=\"line\">    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);</span><br><span class=\"line\">    // 根据事件类型key，获取subscriptions （Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt;） </span><br><span class=\"line\">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class=\"line\">    // 如果subscriptions集合为空，说明该事件类型没有注册，则创建一个新的集合。并把事件类型`eventType`作为key 和订阅方法集合作为value加入其中</span><br><span class=\"line\">    if (subscriptions == null) &#123;</span><br><span class=\"line\">        subscriptions = new CopyOnWriteArrayList&lt;&gt;();</span><br><span class=\"line\">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        if (subscriptions.contains(newSubscription)) &#123;</span><br><span class=\"line\">            throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot;</span><br><span class=\"line\">                    + eventType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int size = subscriptions.size();</span><br><span class=\"line\">    // 按照subscriberMethod的优先级插入newSubscription到正确的位置</span><br><span class=\"line\">    for (int i = 0; i &lt;= size; i++) &#123;</span><br><span class=\"line\">        // 最后一个直接插入，或者是要插入的method优先级大于 i 位置 的优先级</span><br><span class=\"line\">        if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class=\"line\">            subscriptions.add(i, newSubscription);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 存放订阅Method的事件类型</span><br><span class=\"line\">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class=\"line\">    if (subscribedEvents == null) &#123;</span><br><span class=\"line\">        subscribedEvents = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subscribedEvents.add(eventType);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 黏性事件</span><br><span class=\"line\">    if (subscriberMethod.sticky) &#123;</span><br><span class=\"line\">        if (eventInheritance) &#123;</span><br><span class=\"line\">            // Existing sticky events of all subclasses of eventType have to be considered.</span><br><span class=\"line\">            // Note: Iterating over all events may be inefficient with lots of sticky events,</span><br><span class=\"line\">            // thus data structure should be changed to allow a more efficient lookup</span><br><span class=\"line\">            // (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span><br><span class=\"line\">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class=\"line\">            for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class=\"line\">                if (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class=\"line\">                    Object stickyEvent = entry.getValue();</span><br><span class=\"line\">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class=\"line\">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方法说明</strong></p>\n<blockquote>\n</blockquote>\n<ul>\n<li>首先获取了方法参数类型 ： <code>eventType</code></li>\n<li>根据事件类型<code>eventType</code>，获取其所有订阅方法 ：<code>subscriptionsByEventType.get(eventType);</code></li>\n<li>subscriptions如果已经被初始化了，那么按照优先级将新的method插入其中，如果没有初始化，那么就<code>new CopyOnWriteArrayList&lt;&gt;();</code></li>\n<li>获取订阅者所有的订阅事件类型 ： <code>typesBySubscriber.get(subscriber);</code></li>\n<li>如果初始化了，那么就直接添加这个<code>eventType</code>到对应的集合中，如果没有那么初始化并将<strong><code>Subscriber</code>（还记得参数传入的就是这个吗）</strong>作为key，<strong><code>eventType</code>集合</strong>作为value</li>\n</ul>\n<p><strong>不太明白没关系，我们再接着往下看。。。</strong></p>\n<h3 id=\"事件发布\"><a href=\"#事件发布\" class=\"headerlink\" title=\"事件发布\"></a>事件发布</h3><p><code>EventBus.getDefault().post(new UpdateUIEvent());</code></p>\n<p>post：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Posts the given event to the event bus. */</span><br><span class=\"line\">public void post(Object event) &#123;</span><br><span class=\"line\">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class=\"line\">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class=\"line\">    // 将事件添加进当前线程的事件队列</span><br><span class=\"line\">    eventQueue.add(event);</span><br><span class=\"line\">\t // 判断当前线程是否正在发布事件</span><br><span class=\"line\">    if (!postingState.isPosting) &#123;</span><br><span class=\"line\">        postingState.isMainThread = isMainThread();</span><br><span class=\"line\">        postingState.isPosting = true;</span><br><span class=\"line\">        if (postingState.canceled) &#123;</span><br><span class=\"line\">            throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (!eventQueue.isEmpty()) &#123;</span><br><span class=\"line\">                postSingleEvent(eventQueue.remove(0), postingState);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            postingState.isPosting = false;</span><br><span class=\"line\">            postingState.isMainThread = false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先<code>currentPostingThreadState</code>是一个<code>ThreadLocal&lt;PostingThreadState&gt;</code></p>\n<p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，而这段数据是不会与其他线程共享的。可以看出currentPostingThreadState的实现是一个包含了PostingThreadState的ThreadLocal对象,这样可以保证取到的都是自己线程对应的数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** For ThreadLocal, much faster to set (and get multiple values). */</span><br><span class=\"line\">final static class PostingThreadState &#123;</span><br><span class=\"line\">    final List&lt;Object&gt; eventQueue = new ArrayList&lt;&gt;();//当前线程的事件队列</span><br><span class=\"line\">    boolean isPosting; //是否有事件正在分发</span><br><span class=\"line\">    boolean isMainThread;//post的线程是否是主线程</span><br><span class=\"line\">    Subscription subscription;</span><br><span class=\"line\">    Object event;</span><br><span class=\"line\">    boolean canceled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PostingThreadState中包含了当前线程的事件队列，就是当前线程所有分发的事件都保存在eventQueue事件队列中以及订阅者订阅事件等信息，有了这些信息我们就可以从事件队列中取出事件分发给对应的订阅者。</p>\n<p>我们看到了把当前的事件加入到了事件队列尾部，如果事件队列不为empty，那么就一直发送里面的事件直到为empty。我们看一下关键代码<code>postSingleEvent(eventQueue.remove(0), postingState);</code>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123;</span><br><span class=\"line\">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class=\"line\">    boolean subscriptionFound = false;</span><br><span class=\"line\">    if (eventInheritance) &#123;</span><br><span class=\"line\">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class=\"line\">        int countTypes = eventTypes.size();</span><br><span class=\"line\">        for (int h = 0; h &lt; countTypes; h++) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class=\"line\">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!subscriptionFound) &#123;</span><br><span class=\"line\">        if (logNoSubscriberMessages) &#123;</span><br><span class=\"line\">            logger.log(Level.FINE, &quot;No subscribers registered for event &quot; + eventClass);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class=\"line\">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class=\"line\">            post(new NoSubscriberEvent(this, event));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先判断的是<code>eventInheritance</code>是否开启了继承，由于EventBus创建的是默认的Builder，所以默认值为初始值true。那么会找到它所有的父类，然后依次发送事件。关键在于方法<strong><code>postSingleEventForEventType(event, postingState, eventClass);</code></strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) &#123;</span><br><span class=\"line\">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class=\"line\">    synchronized (this) &#123;</span><br><span class=\"line\">        // 根据事件类型找出相关的订阅信息</span><br><span class=\"line\">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class=\"line\">        for (Subscription subscription : subscriptions) &#123;</span><br><span class=\"line\">            postingState.event = event;</span><br><span class=\"line\">            postingState.subscription = subscription;</span><br><span class=\"line\">            boolean aborted = false;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                // 发布到具体的订阅者</span><br><span class=\"line\">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class=\"line\">                aborted = postingState.canceled;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                postingState.event = null;</span><br><span class=\"line\">                postingState.subscription = null;</span><br><span class=\"line\">                postingState.canceled = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (aborted) &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，如果根据事件类型找不到订阅方法，或者订阅方法为空，那么会返回false，上面抛出异常<code>No subscribers registered for event</code>。那如果找到了订阅的方法呢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123;</span><br><span class=\"line\">    switch (subscription.subscriberMethod.threadMode) &#123;</span><br><span class=\"line\">        // 订阅线程跟随发布线程</span><br><span class=\"line\">        case POSTING:</span><br><span class=\"line\">            // 订阅线程和发布线程相同，直接订阅</span><br><span class=\"line\">            invokeSubscriber(subscription, event);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为主线程</span><br><span class=\"line\">        case MAIN:</span><br><span class=\"line\">            // 发布线程和订阅线程都是主线程，直接订阅</span><br><span class=\"line\">            if (isMainThread) &#123;</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 发布线程不是主线程，订阅线程切换到主线程订阅</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                mainThreadPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case MAIN_ORDERED:</span><br><span class=\"line\">            if (mainThreadPoster != null) &#123;</span><br><span class=\"line\">                mainThreadPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                // temporary: technically not correct as poster not decoupled from subscriber</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为后台线程</span><br><span class=\"line\">        case BACKGROUND:</span><br><span class=\"line\">            // 发布线程为主线程，切换到后台线程订阅</span><br><span class=\"line\">            if (isMainThread) &#123;</span><br><span class=\"line\">                backgroundPoster.enqueue(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 发布线程不为主线程，直接订阅</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                invokeSubscriber(subscription, event);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        // 订阅线程为异步线程</span><br><span class=\"line\">        case ASYNC:</span><br><span class=\"line\">            // 使用线程池线程订阅</span><br><span class=\"line\">            asyncPoster.enqueue(subscription, event);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>POSTING：事件发布在什么线程，就在什么线程订阅。</li>\n<li>MAIN：无论事件在什么线程发布，都在主线程订阅。</li>\n<li>BACKGROUND：如果发布的线程不是主线程，则在该线程订阅，如果是主线程，则使用一个单独的后台线程订阅。</li>\n<li>ASYNC：在非主线程和发布线程中订阅。</li>\n</ul>\n<p>我们知道了根据不同类型进行区分。那么关键是如何调用Subscribe方法的呢？<br><code>invokeSubscriber(subscription, event);</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void invokeSubscriber(Subscription subscription, Object event) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class=\"line\">    &#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">        handleSubscriberException(subscription, event, e.getCause());</span><br><span class=\"line\">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">        throw new IllegalStateException(&quot;Unexpected exception&quot;, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样订阅者收到了时间，调用了订阅方法。event参数也成功传入。</p>\n<h3 id=\"反注册\"><a href=\"#反注册\" class=\"headerlink\" title=\"反注册\"></a>反注册</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Unregisters the given subscriber from all event classes. */</span><br><span class=\"line\">public synchronized void unregister(Object subscriber) &#123;</span><br><span class=\"line\">    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class=\"line\">    if (subscribedTypes != null) &#123;</span><br><span class=\"line\">        for (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class=\"line\">            unsubscribeByEventType(subscriber, eventType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        typesBySubscriber.remove(subscriber);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        logger.log(Level.WARNING, &quot;Subscriber to unregister was not registered before: &quot; + subscriber.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在注册的时候知道 <strong><code>typesBySubscriber</code></strong>是一个存储订阅者，订阅事件的Map<br><code>private final Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</code>。<br>先解绑list中的元素再讲Subscribe也从map中移除。我们看关键代码<code>unsubscribeByEventType(subscriber, eventType);</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** Only updates subscriptionsByEventType, not typesBySubscriber! Caller must update typesBySubscriber. */</span><br><span class=\"line\">private void unsubscribeByEventType(Object subscriber, Class&lt;?&gt; eventType) &#123;</span><br><span class=\"line\">    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class=\"line\">    if (subscriptions != null) &#123;</span><br><span class=\"line\">        int size = subscriptions.size();</span><br><span class=\"line\">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">            Subscription subscription = subscriptions.get(i);</span><br><span class=\"line\">            if (subscription.subscriber == subscriber) &#123;</span><br><span class=\"line\">                subscription.active = false;</span><br><span class=\"line\">                subscriptions.remove(i);</span><br><span class=\"line\">                i--;</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多看几遍源码就OK了。 (●ﾟωﾟ●)，接下来尝试着自己写一个简版的EventBus<br><a href=\"https://o0o0oo00.github.io/2018/10/09/Observer/#more\">观察者模式</a></p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5a3e19c26fb9a0452207b6b5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a3e19c26fb9a0452207b6b5</a></li>\n<li><a href=\"https://juejin.im/post/58f5c86a8d6d810057c12975\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58f5c86a8d6d810057c12975</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqnkydml0000or267t9ji8z9","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydn4000dor26gdozvfrs"},{"post_id":"cjqnkydmz0008or26pbyxyhs5","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydn8000gor26zy2z1szo"},{"post_id":"cjqnkydn1000aor26wa28t8jn","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydna000ior26yw13ijb2"},{"post_id":"cjqnkydmr0002or26s3dwtw3y","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnc000mor26zgp136iu"},{"post_id":"cjqnkydn2000cor26jzkvlir4","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnd000oor26ong9501e"},{"post_id":"cjqnkydn7000for26fe0dh9xz","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydne000qor262m3y41x7"},{"post_id":"cjqnkydmw0005or26wt6jeds9","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydng000tor26vamfax47"},{"post_id":"cjqnkydn9000hor26uxgsm23i","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnh000vor26hxhg6avv"},{"post_id":"cjqnkydnb000lor26hfg1d15k","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydni000xor261zrxi1et"},{"post_id":"cjqnkydmy0007or26280ln0f6","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnk000zor26v9k32zwq"},{"post_id":"cjqnkydne000por26i95cma3x","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnl0011or26cyj8gmhe"},{"post_id":"cjqnkydnf000sor269buwnj5h","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnm0013or26al36b4q2"},{"post_id":"cjqnkydng000uor26vhfkpk65","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnn0014or26t4phodxo"},{"post_id":"cjqnkydnc000nor26v7a7cxvc","category_id":"cjqnkydnf000ror26vccgu5zn","_id":"cjqnkydnn0015or26sg2ffjsu"},{"post_id":"cjqnkydni000wor264owsdxry","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydnn0016or26smpmzal8"},{"post_id":"cjqnkydnj000yor26rr6998j1","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydnq0017or2699ztoe00"},{"post_id":"cjqnkydnk0010or265rq5ail7","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydnq0018or26hkzb0thb"},{"post_id":"cjqnkydnl0012or266965ucw8","category_id":"cjqnkydmu0004or26ziwxmm2v","_id":"cjqnkydnr0019or262b9m4vi1"},{"post_id":"cjqnkydsh001bor26qw1x1eqh","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydsl001eor26yqdg9xwq"},{"post_id":"cjqnkydsj001dor269729rd8c","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydsl001for26l5n8ctwo"},{"post_id":"cjqnkydto001gor2626divgzv","category_id":"cjqnkydn00009or26bfw6feio","_id":"cjqnkydtq001ior26rnj3c6bc"}],"PostTag":[{"post_id":"cjqnkydmr0002or26s3dwtw3y","tag_id":"cjqnkydmx0006or26omywzafd","_id":"cjqnkydn2000bor26hkhbqsd5"},{"post_id":"cjqnkydn7000for26fe0dh9xz","tag_id":"cjqnkydmx0006or26omywzafd","_id":"cjqnkydnb000kor26y6eaerb0"},{"post_id":"cjqnkydto001gor2626divgzv","tag_id":"cjqnkydtq001hor2610q0jepc","_id":"cjqnkydtq001jor26da4vou87"}],"Tag":[{"name":"技术","_id":"cjqnkydmx0006or26omywzafd"},{"name":"technology","_id":"cjqnkydtq001hor2610q0jepc"}]}}